ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC_SAR_Seq_1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_SAR_Seq_1_initVar
  18              		.bss
  19              		.type	ADC_SAR_Seq_1_initVar, %object
  20              		.size	ADC_SAR_Seq_1_initVar, 1
  21              	ADC_SAR_Seq_1_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_SAR_Seq_1_offset,2,4
  24              		.comm	ADC_SAR_Seq_1_countsPer10Volt,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_SAR_Seq_1_channelsConfig, %object
  28              		.size	ADC_SAR_Seq_1_channelsConfig, 4
  29              	ADC_SAR_Seq_1_channelsConfig:
  30 0000 00000000 		.space	4
  31              		.section	.text.ADC_SAR_Seq_1_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_SAR_Seq_1_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_SAR_Seq_1_Start, %function
  37              	ADC_SAR_Seq_1_Start:
  38              	.LFB0:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\ADC_SAR_Seq_1.c"
   1:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * File Name: ADC_SAR_Seq_1.c
   3:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Version 2.20
   4:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
   5:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
   9:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  11:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  18:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #include "ADC_SAR_Seq_1.h"
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 2


  19:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  20:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  21:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** uint8 ADC_SAR_Seq_1_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** volatile int16 ADC_SAR_Seq_1_offset[ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** volatile int32 ADC_SAR_Seq_1_countsPer10Volt[ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM];   /* Gain compensat
  27:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  28:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  29:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** static const uint32 CYCODE ADC_SAR_Seq_1_channelsConfig[] = { 0x00000000u };
  34:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  35:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  36:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Start
  38:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  40:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  45:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  48:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  51:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  The ADC_SAR_Seq_1_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start() routine.
  57:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  to zero before call of ADC_SAR_Seq_1_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Init() and ADC_SAR_Seq_1_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start() routine.
  61:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  62:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Start(void)
  64:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if(ADC_SAR_Seq_1_initVar == 0u)
  48              		.loc 1 66 0
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 3


  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
  68:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_SAR_Seq_1_Init
  69:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
  71:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_SAR_Seq_1_Enable
  72:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_SAR_Seq_1_initVar
  70              		.cfi_endproc
  71              	.LFE0:
  72              		.size	ADC_SAR_Seq_1_Start, .-ADC_SAR_Seq_1_Start
  73              		.section	.text.ADC_SAR_Seq_1_Init,"ax",%progbits
  74              		.align	2
  75              		.global	ADC_SAR_Seq_1_Init
  76              		.code	16
  77              		.thumb_func
  78              		.type	ADC_SAR_Seq_1_Init, %function
  79              	ADC_SAR_Seq_1_Init:
  80              	.LFB1:
  73:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  74:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  75:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Init
  77:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  79:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start().
  83:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  84:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  87:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  90:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
  91:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  The ADC_SAR_Seq_1_offset variable is initialized.
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 4


  92:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  93:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Init(void)
  95:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
  81              		.loc 1 95 0
  82              		.cfi_startproc
  83 0000 90B5     		push	{r4, r7, lr}
  84              		.cfi_def_cfa_offset 12
  85              		.cfi_offset 4, -12
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 85B0     		sub	sp, sp, #20
  89              		.cfi_def_cfa_offset 32
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 100:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         static const uint8 CYCODE ADC_SAR_Seq_1_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 103:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****              (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 9u)
 136:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_9_PIN
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 5


 138:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 9u */
 139:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 10u)
 140:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_10_PIN
 142:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 10u */
 143:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 11u)
 144:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_11_PIN
 146:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 11u */
 147:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 12u)
 148:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_12_PIN
 150:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 12u */
 151:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 13u)
 152:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_13_PIN
 154:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 13u */
 155:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 14u)
 156:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_14_PIN
 158:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 14u */
 159:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 15u)
 160:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_15_PIN
 162:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 15u */
 163:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 16u)
 164:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_16_PIN
 166:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 16u */
 167:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         };
 168:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 169:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 170:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_IRQ_REMOVE == 0u)
 171:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Start and set interrupt vector */
 172:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CyIntSetPriority(ADC_SAR_Seq_1_INTC_NUMBER, ADC_SAR_Seq_1_INTC_PRIOR_NUMBER);
  92              		.loc 1 172 0
  93 0006 0E20     		mov	r0, #14
  94 0008 0321     		mov	r1, #3
  95 000a FFF7FEFF 		bl	CyIntSetPriority
 173:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         (void)CyIntSetVector(ADC_SAR_Seq_1_INTC_NUMBER, &ADC_SAR_Seq_1_ISR);
  96              		.loc 1 173 0
  97 000e 534B     		ldr	r3, .L17
  98 0010 0E20     		mov	r0, #14
  99 0012 191C     		mov	r1, r3
 100 0014 FFF7FEFF 		bl	CyIntSetVector
 174:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif   /* End ADC_SAR_Seq_1_IRQ_REMOVE */
 175:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 176:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Init SAR and MUX registers */
 177:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CHAN_EN_REG = ADC_SAR_Seq_1_DEFAULT_EN_CHANNELS;
 101              		.loc 1 177 0
 102 0018 514B     		ldr	r3, .L17+4
 103 001a 0122     		mov	r2, #1
 104 001c 1A60     		str	r2, [r3]
 178:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 105              		.loc 1 178 0
 106 001e 514B     		ldr	r3, .L17+8
 107 0020 504A     		ldr	r2, .L17+8
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 6


 108 0022 1168     		ldr	r1, [r2]
 179:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         (((ADC_SAR_Seq_1_PUMP_CTRL_REG & ADC_SAR_Seq_1_PUMP_CTRL_ENABLED) != 0u) ? 
 109              		.loc 1 180 0
 110 0024 504A     		ldr	r2, .L17+12
 111 0026 1268     		ldr	r2, [r2]
 178:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 112              		.loc 1 178 0
 113 0028 002A     		cmp	r2, #0
 114 002a 01DA     		bge	.L6
 178:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 115              		.loc 1 178 0 is_stmt 0 discriminator 1
 116 002c 4F4A     		ldr	r2, .L17+16
 117 002e 00E0     		b	.L7
 118              	.L6:
 178:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 119              		.loc 1 178 0 discriminator 2
 120 0030 4F4A     		ldr	r2, .L17+20
 121              	.L7:
 178:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 122              		.loc 1 178 0 discriminator 3
 123 0032 0A43     		orr	r2, r1
 124 0034 1A60     		str	r2, [r3]
 181:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_BOOSTPUMP_EN : 0u);
 182:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_CTRL_REG_CFG;
 125              		.loc 1 182 0 is_stmt 1 discriminator 3
 126 0036 4F4B     		ldr	r3, .L17+24
 127 0038 4F4A     		ldr	r2, .L17+28
 128 003a 1A60     		str	r2, [r3]
 183:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG = ADC_SAR_Seq_1_DEFAULT_RANGE_THRES_REG_CFG;
 129              		.loc 1 183 0 discriminator 3
 130 003c 4F4B     		ldr	r3, .L17+32
 131 003e 504A     		ldr	r2, .L17+36
 132 0040 1A60     		str	r2, [r3]
 184:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_COND_REG  = ADC_SAR_Seq_1_COMPARE_MODE;
 133              		.loc 1 184 0 discriminator 3
 134 0042 504B     		ldr	r3, .L17+40
 135 0044 0022     		mov	r2, #0
 136 0046 1A60     		str	r2, [r3]
 185:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_TIME01_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_TIME01_REG_CFG;
 137              		.loc 1 185 0 discriminator 3
 138 0048 4F4B     		ldr	r3, .L17+44
 139 004a 504A     		ldr	r2, .L17+48
 140 004c 1A60     		str	r2, [r3]
 186:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_TIME23_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_TIME23_REG_CFG;
 141              		.loc 1 186 0 discriminator 3
 142 004e 504B     		ldr	r3, .L17+52
 143 0050 4E4A     		ldr	r2, .L17+48
 144 0052 1A60     		str	r2, [r3]
 187:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 188:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0 != 0u)
 190:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_MUX_SWITCH0_REG |= ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0;
 145              		.loc 1 190 0 discriminator 3
 146 0054 4F4B     		ldr	r3, .L17+56
 147 0056 4F4A     		ldr	r2, .L17+56
 148 0058 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 7


 149 005a 8021     		mov	r1, #128
 150 005c 4902     		lsl	r1, r1, #9
 151 005e 0A43     		orr	r2, r1
 152 0060 1A60     		str	r2, [r3]
 191:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 193:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ADC_SAR_Seq_1_MUX_SWITCH_HW_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0;
 194:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 195:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /*ADC_SAR_Seq_1_CHANNELS_MODE !=0 */
 196:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 197:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG = 0u;
 153              		.loc 1 197 0 discriminator 3
 154 0062 4D4B     		ldr	r3, .L17+60
 155 0064 0022     		mov	r2, #0
 156 0066 1A60     		str	r2, [r3]
 198:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG = 0u;
 157              		.loc 1 198 0 discriminator 3
 158 0068 4C4B     		ldr	r3, .L17+64
 159 006a 0022     		mov	r2, #0
 160 006c 1A60     		str	r2, [r3]
 199:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_INTR_MASK_REG = ADC_SAR_Seq_1_SAR_INTR_MASK;
 161              		.loc 1 199 0 discriminator 3
 162 006e 4C4B     		ldr	r3, .L17+68
 163 0070 0122     		mov	r2, #1
 164 0072 1A60     		str	r2, [r3]
 200:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 201:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0)
 202:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_ANA_TRIM_REG = ADC_SAR_Seq_1_TRIM_COEF;
 165              		.loc 1 202 0 discriminator 3
 166 0074 4B4B     		ldr	r3, .L17+72
 167 0076 0222     		mov	r2, #2
 168 0078 1A60     		str	r2, [r3]
 203:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0) */
 204:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 205:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Read and modify default configuration based on characterization */
 206:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     tmpRegVal = ADC_SAR_Seq_1_SAR_DFT_CTRL_REG;
 169              		.loc 1 206 0 discriminator 3
 170 007a 4B4B     		ldr	r3, .L17+76
 171 007c 1B68     		ldr	r3, [r3]
 172 007e 7B60     		str	r3, [r7, #4]
 207:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     tmpRegVal &= (uint32)~ADC_SAR_Seq_1_DCEN;
 173              		.loc 1 207 0 discriminator 3
 174 0080 7A68     		ldr	r2, [r7, #4]
 175 0082 4A4B     		ldr	r3, .L17+80
 176 0084 1340     		and	r3, r2
 177 0086 7B60     		str	r3, [r7, #4]
 208:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 209:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0)
 210:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_NOMINAL_CLOCK_FREQ > (ADC_SAR_Seq_1_MAX_FREQUENCY / 2))
 211:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_SEL_CSEL_DFT_CHAR;
 212:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else  /* clock speed < 9 Mhz */
 213:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DLY_INC;
 178              		.loc 1 213 0 discriminator 3
 179 0088 7B68     		ldr	r3, [r7, #4]
 180 008a 0122     		mov	r2, #1
 181 008c 1343     		orr	r3, r2
 182 008e 7B60     		str	r3, [r7, #4]
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 8


 214:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* clock speed > 9 Mhz */
 215:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #else
 216:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if ((ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNAL1024) || \
 217:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****              (ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNALVREF))
 218:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DLY_INC;
 219:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else
 220:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DCEN;
 221:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal &= (uint32)~ADC_SAR_Seq_1_DLY_INC;
 222:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ((ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNAL1024) || \
 223:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                    (ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNALVREF)) */
 224:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0) */
 225:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 226:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_DFT_CTRL_REG = tmpRegVal;
 183              		.loc 1 226 0 discriminator 3
 184 0090 454B     		ldr	r3, .L17+76
 185 0092 7A68     		ldr	r2, [r7, #4]
 186 0094 1A60     		str	r2, [r3]
 227:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 228:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12)
 229:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_WOUNDING_REG = ADC_SAR_Seq_1_ALT_WOUNDING;
 230:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12 */
 231:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 232:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM; chNum++)
 187              		.loc 1 232 0 discriminator 3
 188 0096 0023     		mov	r3, #0
 189 0098 FB60     		str	r3, [r7, #12]
 190 009a 58E0     		b	.L8
 191              	.L16:
 233:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 234:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         tmpRegVal = (ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_CHANNEL_CONFIG_MASK);
 192              		.loc 1 234 0
 193 009c 0022     		mov	r2, #0
 194 009e DC23     		mov	r3, #220
 195 00a0 9B01     		lsl	r3, r3, #6
 196 00a2 1340     		and	r3, r2
 197 00a4 7B60     		str	r3, [r7, #4]
 235:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 236:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_InputsPlacement[chNum];
 237:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 238:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 239:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 240:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         *  (0) and 8-bit (1) resolution.
 243:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         */
 244:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if((ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12) && \
 245:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (ADC_SAR_Seq_1_ALT_WOUNDING == ADC_SAR_Seq_1_WOUNDING_10BIT))
 246:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal &= (uint32)(~ADC_SAR_Seq_1_ALT_RESOLUTION_ON);
 247:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12 */
 248:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 249:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 250:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if(chNum < ADC_SAR_Seq_1_SEQUENCED_CHANNELS_NUM)
 251:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 252:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 253:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_Seq_1_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRe
 198              		.loc 1 253 0
 199 00a6 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 9


 200 00a8 9B00     		lsl	r3, r3, #2
 201 00aa 414A     		ldr	r2, .L17+84
 202 00ac 9B18     		add	r3, r3, r2
 203 00ae 7A68     		ldr	r2, [r7, #4]
 204 00b0 1A60     		str	r2, [r3]
 254:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 255:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_SATURATE_EN_MASK) != 0u)
 205              		.loc 1 255 0
 206 00b2 0022     		mov	r2, #0
 207 00b4 0123     		mov	r3, #1
 208 00b6 1340     		and	r3, r2
 209 00b8 0AD0     		beq	.L9
 256:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 257:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 210              		.loc 1 257 0
 211 00ba 374B     		ldr	r3, .L17+60
 212 00bc 364A     		ldr	r2, .L17+60
 213 00be 1168     		ldr	r1, [r2]
 214 00c0 FA68     		ldr	r2, [r7, #12]
 215 00c2 0120     		mov	r0, #1
 216 00c4 041C     		mov	r4, r0
 217 00c6 9440     		lsl	r4, r4, r2
 218 00c8 221C     		mov	r2, r4
 219 00ca 92B2     		uxth	r2, r2
 220 00cc 0A43     		orr	r2, r1
 221 00ce 1A60     		str	r2, [r3]
 222              	.L9:
 258:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 259:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 260:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_RANGE_CTRL_EN_MASK) != 0u)
 223              		.loc 1 260 0
 224 00d0 0022     		mov	r2, #0
 225 00d2 0223     		mov	r3, #2
 226 00d4 1340     		and	r3, r2
 227 00d6 0AD0     		beq	.L10
 261:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 262:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 228              		.loc 1 262 0
 229 00d8 304B     		ldr	r3, .L17+64
 230 00da 304A     		ldr	r2, .L17+64
 231 00dc 1168     		ldr	r1, [r2]
 232 00de FA68     		ldr	r2, [r7, #12]
 233 00e0 0120     		mov	r0, #1
 234 00e2 041C     		mov	r4, r0
 235 00e4 9440     		lsl	r4, r4, r2
 236 00e6 221C     		mov	r2, r4
 237 00e8 92B2     		uxth	r2, r2
 238 00ea 0A43     		orr	r2, r1
 239 00ec 1A60     		str	r2, [r3]
 240              	.L10:
 263:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 264:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 265:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 266:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             else
 267:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 268:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 CY_SET_REG32(ADC_SAR_Seq_1_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_SAR_Seq_1_INJ_T
 269:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 10


 270:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_SATURATE_EN_MASK) != 0u)
 271:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 {
 272:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                     ADC_SAR_Seq_1_SAR_INTR_MASK_REG |= ADC_SAR_Seq_1_INJ_SATURATE_MASK;
 273:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 }
 274:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 275:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_RANGE_CTRL_EN_MASK) != 0
 276:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 {
 277:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                     ADC_SAR_Seq_1_SAR_INTR_MASK_REG |= ADC_SAR_Seq_1_INJ_RANGE_MASK;
 278:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 }
 279:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 280:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 281:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 282:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_ALT_RESOLUTION_ON) != 0u)
 241              		.loc 1 282 0
 242 00ee 0022     		mov	r2, #0
 243 00f0 8023     		mov	r3, #128
 244 00f2 9B00     		lsl	r3, r3, #2
 245 00f4 1340     		and	r3, r2
 246 00f6 03D0     		beq	.L11
 283:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 284:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                counts = (int32)ADC_SAR_Seq_1_DEFAULT_MAX_WRK_ALT;
 247              		.loc 1 284 0
 248 00f8 8023     		mov	r3, #128
 249 00fa 5B00     		lsl	r3, r3, #1
 250 00fc BB60     		str	r3, [r7, #8]
 251 00fe 02E0     		b	.L12
 252              	.L11:
 285:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 286:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         else
 287:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 288:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                counts = (int32)ADC_SAR_Seq_1_SAR_WRK_MAX_12BIT;
 253              		.loc 1 288 0
 254 0100 8023     		mov	r3, #128
 255 0102 5B01     		lsl	r3, r3, #5
 256 0104 BB60     		str	r3, [r7, #8]
 257              	.L12:
 289:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 290:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 291:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_DIFFERENTIAL_EN) == 0u)
 258              		.loc 1 291 0
 259 0106 0022     		mov	r2, #0
 260 0108 8023     		mov	r3, #128
 261 010a 5B00     		lsl	r3, r3, #1
 262 010c 1340     		and	r3, r2
 263 010e 05D1     		bne	.L13
 292:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 293:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if((ADC_SAR_Seq_1_DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FSIGNED) && \
 294:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 (ADC_SAR_Seq_1_DEFAULT_NEG_INPUT_SEL == ADC_SAR_Seq_1__VREF))
 295:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = (int16)(counts / -2);
 297:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #else
 298:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = 0;
 264              		.loc 1 298 0
 265 0110 284B     		ldr	r3, .L17+88
 266 0112 FA68     		ldr	r2, [r7, #12]
 267 0114 5200     		lsl	r2, r2, #1
 268 0116 0021     		mov	r1, #0
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 11


 269 0118 D152     		strh	r1, [r2, r3]
 270 011a 04E0     		b	.L14
 271              	.L13:
 299:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FSIGNED */
 300:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 301:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         else    /* Differential channel */
 302:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 303:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FUNSIGNED)
 304:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = (int16)(counts / 2);
 306:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #else
 307:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = 0;
 272              		.loc 1 307 0
 273 011c 254B     		ldr	r3, .L17+88
 274 011e FA68     		ldr	r2, [r7, #12]
 275 0120 5200     		lsl	r2, r2, #1
 276 0122 0021     		mov	r1, #0
 277 0124 D152     		strh	r1, [r2, r3]
 278              	.L14:
 308:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* end ADC_SAR_Seq_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FUNSIGNED 
 309:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 310:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_Seq_1_10MV_COUNTS) +
 279              		.loc 1 311 0
 280 0126 BB68     		ldr	r3, [r7, #8]
 281 0128 234A     		ldr	r2, .L17+92
 282 012a 5343     		mul	r3, r2
 283 012c 8022     		mov	r2, #128
 284 012e D200     		lsl	r2, r2, #3
 285 0130 9B18     		add	r3, r3, r2
 312:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                             ADC_SAR_Seq_1_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_Seq_1_DEFAULT_VREF_MV_V
 286              		.loc 1 312 0
 287 0132 002B     		cmp	r3, #0
 288 0134 01DA     		bge	.L15
 289 0136 214C     		ldr	r4, .L17+96
 290 0138 1B19     		add	r3, r3, r4
 291              	.L15:
 292 013a DB12     		asr	r3, r3, #11
 311:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_Seq_1_10MV_COUNTS) +
 293              		.loc 1 311 0
 294 013c 9BB2     		uxth	r3, r3
 295 013e 19B2     		sxth	r1, r3
 296 0140 1F4B     		ldr	r3, .L17+100
 297 0142 FA68     		ldr	r2, [r7, #12]
 298 0144 9200     		lsl	r2, r2, #2
 299 0146 D150     		str	r1, [r2, r3]
 232:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM; chNum++)
 300              		.loc 1 232 0
 301 0148 FB68     		ldr	r3, [r7, #12]
 302 014a 0133     		add	r3, r3, #1
 303 014c FB60     		str	r3, [r7, #12]
 304              	.L8:
 232:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM; chNum++)
 305              		.loc 1 232 0 is_stmt 0 discriminator 1
 306 014e FB68     		ldr	r3, [r7, #12]
 307 0150 002B     		cmp	r3, #0
 308 0152 A3D0     		beq	.L16
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 12


 313:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 314:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 309              		.loc 1 314 0 is_stmt 1
 310 0154 BD46     		mov	sp, r7
 311 0156 05B0     		add	sp, sp, #20
 312              		@ sp needed
 313 0158 90BD     		pop	{r4, r7, pc}
 314              	.L18:
 315 015a C046     		.align	2
 316              	.L17:
 317 015c 00000000 		.word	ADC_SAR_Seq_1_ISR
 318 0160 20001A40 		.word	1075445792
 319 0164 00001A40 		.word	1075445760
 320 0168 80031A40 		.word	1075446656
 321 016c C0021051 		.word	1360003776
 322 0170 C0020051 		.word	1358955200
 323 0174 04001A40 		.word	1075445764
 324 0178 88000080 		.word	-2147483512
 325 017c 18001A40 		.word	1075445784
 326 0180 0000FF07 		.word	134152192
 327 0184 1C001A40 		.word	1075445788
 328 0188 10001A40 		.word	1075445776
 329 018c 04000400 		.word	262148
 330 0190 14001A40 		.word	1075445780
 331 0194 00031A40 		.word	1075446528
 332 0198 28021A40 		.word	1075446312
 333 019c 38021A40 		.word	1075446328
 334 01a0 18021A40 		.word	1075446296
 335 01a4 000F1A40 		.word	1075449600
 336 01a8 30001A40 		.word	1075445808
 337 01ac FFFFFFDF 		.word	-536870913
 338 01b0 80001A40 		.word	1075445888
 339 01b4 00000000 		.word	ADC_SAR_Seq_1_offset
 340 01b8 10270000 		.word	10000
 341 01bc FF070000 		.word	2047
 342 01c0 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 343              		.cfi_endproc
 344              	.LFE1:
 345              		.size	ADC_SAR_Seq_1_Init, .-ADC_SAR_Seq_1_Init
 346              		.section	.text.ADC_SAR_Seq_1_Enable,"ax",%progbits
 347              		.align	2
 348              		.global	ADC_SAR_Seq_1_Enable
 349              		.code	16
 350              		.thumb_func
 351              		.type	ADC_SAR_Seq_1_Enable, %function
 352              	ADC_SAR_Seq_1_Enable:
 353              	.LFB2:
 315:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 316:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 317:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_1_Enable
 318:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 319:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 320:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 321:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Enables the clock and analog power for SAR ADC.
 322:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 323:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 13


 325:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 326:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 329:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Enable(void)
 331:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 354              		.loc 1 331 0
 355              		.cfi_startproc
 356 0000 80B5     		push	{r7, lr}
 357              		.cfi_def_cfa_offset 8
 358              		.cfi_offset 7, -8
 359              		.cfi_offset 14, -4
 360 0002 00AF     		add	r7, sp, #0
 361              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if (0u == (ADC_SAR_Seq_1_SAR_CTRL_REG & ADC_SAR_Seq_1_ENABLE))
 362              		.loc 1 332 0
 363 0004 074B     		ldr	r3, .L21
 364 0006 1B68     		ldr	r3, [r3]
 365 0008 002B     		cmp	r3, #0
 366 000a 09DB     		blt	.L19
 333:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 334:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_CY_SAR_IP_VER != ADC_SAR_Seq_1_CY_SAR_IP_VER0)
 335:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 336:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             while (0u != (ADC_SAR_Seq_1_SAR_STATUS_REG & ADC_SAR_Seq_1_STATUS_BUSY))
 337:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 338:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 340:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER != ADC_SAR_Seq_1_CY_SAR_IP_VER0) */
 341:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 342:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_ENABLE;
 367              		.loc 1 342 0
 368 000c 054B     		ldr	r3, .L21
 369 000e 054A     		ldr	r2, .L21
 370 0010 1268     		ldr	r2, [r2]
 371 0012 8021     		mov	r1, #128
 372 0014 0906     		lsl	r1, r1, #24
 373 0016 0A43     		orr	r2, r1
 374 0018 1A60     		str	r2, [r3]
 343:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 344:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CyDelayUs(ADC_SAR_Seq_1_10US_DELAY);         
 375              		.loc 1 345 0
 376 001a 0A20     		mov	r0, #10
 377 001c FFF7FEFF 		bl	CyDelayUs
 378              	.L19:
 346:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 347:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 379              		.loc 1 347 0
 380 0020 BD46     		mov	sp, r7
 381              		@ sp needed
 382 0022 80BD     		pop	{r7, pc}
 383              	.L22:
 384              		.align	2
 385              	.L21:
 386 0024 00001A40 		.word	1075445760
 387              		.cfi_endproc
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 14


 388              	.LFE2:
 389              		.size	ADC_SAR_Seq_1_Enable, .-ADC_SAR_Seq_1_Enable
 390              		.section	.text.ADC_SAR_Seq_1_Stop,"ax",%progbits
 391              		.align	2
 392              		.global	ADC_SAR_Seq_1_Stop
 393              		.code	16
 394              		.thumb_func
 395              		.type	ADC_SAR_Seq_1_Stop, %function
 396              	ADC_SAR_Seq_1_Stop:
 397              	.LFB3:
 348:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 349:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 350:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 351:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Stop
 352:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 353:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 354:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 355:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mode.
 357:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 358:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 359:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 360:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 361:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 362:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 363:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 364:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 365:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Stop(void)
 366:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 398              		.loc 1 366 0
 399              		.cfi_startproc
 400 0000 80B5     		push	{r7, lr}
 401              		.cfi_def_cfa_offset 8
 402              		.cfi_offset 7, -8
 403              		.cfi_offset 14, -4
 404 0002 00AF     		add	r7, sp, #0
 405              		.cfi_def_cfa_register 7
 367:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG &= (uint32)~ADC_SAR_Seq_1_ENABLE;
 406              		.loc 1 367 0
 407 0004 034B     		ldr	r3, .L24
 408 0006 034A     		ldr	r2, .L24
 409 0008 1268     		ldr	r2, [r2]
 410 000a 5200     		lsl	r2, r2, #1
 411 000c 5208     		lsr	r2, r2, #1
 412 000e 1A60     		str	r2, [r3]
 368:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 413              		.loc 1 368 0
 414 0010 BD46     		mov	sp, r7
 415              		@ sp needed
 416 0012 80BD     		pop	{r7, pc}
 417              	.L25:
 418              		.align	2
 419              	.L24:
 420 0014 00001A40 		.word	1075445760
 421              		.cfi_endproc
 422              	.LFE3:
 423              		.size	ADC_SAR_Seq_1_Stop, .-ADC_SAR_Seq_1_Stop
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 15


 424              		.section	.text.ADC_SAR_Seq_1_StartConvert,"ax",%progbits
 425              		.align	2
 426              		.global	ADC_SAR_Seq_1_StartConvert
 427              		.code	16
 428              		.thumb_func
 429              		.type	ADC_SAR_Seq_1_StartConvert, %function
 430              	ADC_SAR_Seq_1_StartConvert:
 431              	.LFB4:
 369:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 370:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 371:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 372:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_StartConvert
 373:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 374:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 375:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 376:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description:
 377:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  For free running mode, this API starts the conversion process and it
 378:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  runs continuously.
 379:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 380:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  In a triggered mode, this routine triggers every conversion by
 381:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  every conversion has to start by this API.
 383:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 384:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 385:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 386:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 387:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 388:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 389:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 390:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 391:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_StartConvert(void)
 392:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 432              		.loc 1 392 0
 433              		.cfi_startproc
 434 0000 80B5     		push	{r7, lr}
 435              		.cfi_def_cfa_offset 8
 436              		.cfi_offset 7, -8
 437              		.cfi_offset 14, -4
 438 0002 00AF     		add	r7, sp, #0
 439              		.cfi_def_cfa_register 7
 393:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_1__FREERUNNING)
 394:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG |= ADC_SAR_Seq_1_CONTINUOUS_EN;
 440              		.loc 1 394 0
 441 0004 044B     		ldr	r3, .L27
 442 0006 044A     		ldr	r2, .L27
 443 0008 1268     		ldr	r2, [r2]
 444 000a 8021     		mov	r1, #128
 445 000c 4902     		lsl	r1, r1, #9
 446 000e 0A43     		orr	r2, r1
 447 0010 1A60     		str	r2, [r3]
 395:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #else /* Firmware trigger */
 396:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_START_CTRL_REG = ADC_SAR_Seq_1_FW_TRIGGER;
 397:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* End ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_1__FREERUNNING */
 398:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 399:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 448              		.loc 1 399 0
 449 0012 BD46     		mov	sp, r7
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 16


 450              		@ sp needed
 451 0014 80BD     		pop	{r7, pc}
 452              	.L28:
 453 0016 C046     		.align	2
 454              	.L27:
 455 0018 04001A40 		.word	1075445764
 456              		.cfi_endproc
 457              	.LFE4:
 458              		.size	ADC_SAR_Seq_1_StartConvert, .-ADC_SAR_Seq_1_StartConvert
 459              		.section	.text.ADC_SAR_Seq_1_StopConvert,"ax",%progbits
 460              		.align	2
 461              		.global	ADC_SAR_Seq_1_StopConvert
 462              		.code	16
 463              		.thumb_func
 464              		.type	ADC_SAR_Seq_1_StopConvert, %function
 465              	ADC_SAR_Seq_1_StopConvert:
 466              	.LFB5:
 400:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 401:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 402:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 403:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_StopConvert
 404:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 405:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 406:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 407:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Forces the ADC to stop all conversions.
 408:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 409:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 410:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 411:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 412:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 413:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 414:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 415:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 416:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_StopConvert(void)
 417:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 467              		.loc 1 417 0
 468              		.cfi_startproc
 469 0000 80B5     		push	{r7, lr}
 470              		.cfi_def_cfa_offset 8
 471              		.cfi_offset 7, -8
 472              		.cfi_offset 14, -4
 473 0002 00AF     		add	r7, sp, #0
 474              		.cfi_def_cfa_register 7
 418:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_1__FREERUNNING)
 419:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_SAR_Seq_1_CONTINUOUS_EN);
 475              		.loc 1 419 0
 476 0004 034B     		ldr	r3, .L30
 477 0006 034A     		ldr	r2, .L30
 478 0008 1168     		ldr	r1, [r2]
 479 000a 034A     		ldr	r2, .L30+4
 480 000c 0A40     		and	r2, r1
 481 000e 1A60     		str	r2, [r3]
 420:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_1__FREERUNNING */
 421:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 482              		.loc 1 421 0
 483 0010 BD46     		mov	sp, r7
 484              		@ sp needed
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 17


 485 0012 80BD     		pop	{r7, pc}
 486              	.L31:
 487              		.align	2
 488              	.L30:
 489 0014 04001A40 		.word	1075445764
 490 0018 FFFFFEFF 		.word	-65537
 491              		.cfi_endproc
 492              	.LFE5:
 493              		.size	ADC_SAR_Seq_1_StopConvert, .-ADC_SAR_Seq_1_StopConvert
 494              		.section	.text.ADC_SAR_Seq_1_IsEndConversion,"ax",%progbits
 495              		.align	2
 496              		.global	ADC_SAR_Seq_1_IsEndConversion
 497              		.code	16
 498              		.thumb_func
 499              		.type	ADC_SAR_Seq_1_IsEndConversion, %function
 500              	ADC_SAR_Seq_1_IsEndConversion:
 501              	.LFB6:
 422:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 423:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 424:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 425:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_IsEndConversion
 426:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 427:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 428:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 429:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description: Checks for ADC end of conversion for the case one
 430:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  as a software version of the EOC. This function provides the
 432:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  programmer with two options. In one mode this function
 433:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  immediately returns with the conversion status. In the other mode,
 434:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  the function does not return (blocking) until the conversion has
 435:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  completed.
 436:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 437:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 438:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *                              for injection channel
 442:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *                              channel conversion
 444:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 445:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 446:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 449:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 450:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** uint32 ADC_SAR_Seq_1_IsEndConversion(uint32 retMode)
 451:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 502              		.loc 1 451 0
 503              		.cfi_startproc
 504 0000 80B5     		push	{r7, lr}
 505              		.cfi_def_cfa_offset 8
 506              		.cfi_offset 7, -8
 507              		.cfi_offset 14, -4
 508 0002 84B0     		sub	sp, sp, #16
 509              		.cfi_def_cfa_offset 24
 510 0004 00AF     		add	r7, sp, #0
 511              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 18


 512 0006 7860     		str	r0, [r7, #4]
 452:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 status = 0u;
 513              		.loc 1 452 0
 514 0008 0023     		mov	r3, #0
 515 000a FB60     		str	r3, [r7, #12]
 453:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 454:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if((retMode & (ADC_SAR_Seq_1_RETURN_STATUS | ADC_SAR_Seq_1_WAIT_FOR_RESULT)) != 0u)
 516              		.loc 1 454 0
 517 000c 7A68     		ldr	r2, [r7, #4]
 518 000e 0323     		mov	r3, #3
 519 0010 1340     		and	r3, r2
 520 0012 11D0     		beq	.L33
 521              	.L35:
 455:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 456:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         do
 457:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 458:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             status = ADC_SAR_Seq_1_SAR_INTR_REG & ADC_SAR_Seq_1_EOS_MASK;
 522              		.loc 1 458 0 discriminator 1
 523 0014 0B4B     		ldr	r3, .L37
 524 0016 1A68     		ldr	r2, [r3]
 525 0018 0123     		mov	r3, #1
 526 001a 1340     		and	r3, r2
 527 001c FB60     		str	r3, [r7, #12]
 459:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }while((status == 0u) && ((retMode & ADC_SAR_Seq_1_WAIT_FOR_RESULT) != 0u));
 528              		.loc 1 459 0 discriminator 1
 529 001e FB68     		ldr	r3, [r7, #12]
 530 0020 002B     		cmp	r3, #0
 531 0022 03D1     		bne	.L34
 532 0024 7A68     		ldr	r2, [r7, #4]
 533 0026 0223     		mov	r3, #2
 534 0028 1340     		and	r3, r2
 535 002a F3D1     		bne	.L35
 536              	.L34:
 460:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 461:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if(status != 0u)
 537              		.loc 1 461 0
 538 002c FB68     		ldr	r3, [r7, #12]
 539 002e 002B     		cmp	r3, #0
 540 0030 02D0     		beq	.L33
 462:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 463:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             /* Clear EOS bit */
 464:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ADC_SAR_Seq_1_SAR_INTR_REG = ADC_SAR_Seq_1_EOS_MASK;
 541              		.loc 1 464 0
 542 0032 044B     		ldr	r3, .L37
 543 0034 0122     		mov	r2, #1
 544 0036 1A60     		str	r2, [r3]
 545              	.L33:
 465:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 466:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 467:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 468:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 469:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((retMode & (ADC_SAR_Seq_1_RETURN_STATUS_INJ | ADC_SAR_Seq_1_WAIT_FOR_RESULT_INJ)) != 0u)
 470:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 471:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             do
 472:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 473:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 status |= ADC_SAR_Seq_1_SAR_INTR_REG & ADC_SAR_Seq_1_INJ_EOC_MASK;
 474:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }while(((status & ADC_SAR_Seq_1_INJ_EOC_MASK) == 0u) &&
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 19


 475:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                    ((retMode & ADC_SAR_Seq_1_WAIT_FOR_RESULT_INJ) != 0u));
 476:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 477:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((status & ADC_SAR_Seq_1_INJ_EOC_MASK) != 0u)
 478:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 479:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Clear Injection EOS bit */
 480:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_INTR_REG = ADC_SAR_Seq_1_INJ_EOC_MASK;
 481:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 482:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 483:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 484:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 485:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     return (status);
 546              		.loc 1 485 0
 547 0038 FB68     		ldr	r3, [r7, #12]
 486:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 548              		.loc 1 486 0
 549 003a 181C     		mov	r0, r3
 550 003c BD46     		mov	sp, r7
 551 003e 04B0     		add	sp, sp, #16
 552              		@ sp needed
 553 0040 80BD     		pop	{r7, pc}
 554              	.L38:
 555 0042 C046     		.align	2
 556              	.L37:
 557 0044 10021A40 		.word	1075446288
 558              		.cfi_endproc
 559              	.LFE6:
 560              		.size	ADC_SAR_Seq_1_IsEndConversion, .-ADC_SAR_Seq_1_IsEndConversion
 561              		.section	.text.ADC_SAR_Seq_1_GetResult16,"ax",%progbits
 562              		.align	2
 563              		.global	ADC_SAR_Seq_1_GetResult16
 564              		.code	16
 565              		.thumb_func
 566              		.type	ADC_SAR_Seq_1_GetResult16, %function
 567              	ADC_SAR_Seq_1_GetResult16:
 568              	.LFB7:
 487:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 488:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 489:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 490:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_GetResult16
 491:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 492:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 493:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 494:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Gets the data available in the SAR DATA register.
 495:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 496:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 497:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 500:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 501:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Returns converted data as a signed 16-bit integer
 502:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 503:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 504:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** int16 ADC_SAR_Seq_1_GetResult16(uint32 chan)
 505:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 569              		.loc 1 505 0
 570              		.cfi_startproc
 571 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 20


 572              		.cfi_def_cfa_offset 8
 573              		.cfi_offset 7, -8
 574              		.cfi_offset 14, -4
 575 0002 84B0     		sub	sp, sp, #16
 576              		.cfi_def_cfa_offset 24
 577 0004 00AF     		add	r7, sp, #0
 578              		.cfi_def_cfa_register 7
 579 0006 7860     		str	r0, [r7, #4]
 506:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 result;
 507:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 508:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 580              		.loc 1 509 0
 581 0008 7B68     		ldr	r3, [r7, #4]
 582 000a 002B     		cmp	r3, #0
 583 000c 02D0     		beq	.L40
 584              		.loc 1 509 0 is_stmt 0 discriminator 1
 585 000e 0020     		mov	r0, #0
 586 0010 FFF7FEFF 		bl	CyHalt
 587              	.L40:
 510:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 511:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if(chan < ADC_SAR_Seq_1_SEQUENCED_CHANNELS_NUM)
 588              		.loc 1 511 0 is_stmt 1
 589 0014 7B68     		ldr	r3, [r7, #4]
 590 0016 002B     		cmp	r3, #0
 591 0018 08D1     		bne	.L41
 512:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 513:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_Seq_1_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) 
 592              		.loc 1 513 0
 593 001a 7B68     		ldr	r3, [r7, #4]
 594 001c 9B00     		lsl	r3, r3, #2
 595 001e 084A     		ldr	r2, .L44
 596 0020 9B18     		add	r3, r3, r2
 597 0022 1B68     		ldr	r3, [r3]
 598 0024 1B04     		lsl	r3, r3, #16
 599 0026 1B0C     		lsr	r3, r3, #16
 600 0028 FB60     		str	r3, [r7, #12]
 601 002a 01E0     		b	.L42
 602              	.L41:
 514:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_RESULT_MASK;
 515:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 516:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     else
 517:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 518:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 519:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             result = ADC_SAR_Seq_1_SAR_INJ_RESULT_REG & ADC_SAR_Seq_1_RESULT_MASK;
 520:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else
 521:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             result = 0u;
 603              		.loc 1 521 0
 604 002c 0023     		mov	r3, #0
 605 002e FB60     		str	r3, [r7, #12]
 606              	.L42:
 522:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 523:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 524:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 525:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     return ( (int16)result );
 607              		.loc 1 525 0
 608 0030 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 21


 609 0032 9BB2     		uxth	r3, r3
 610 0034 1BB2     		sxth	r3, r3
 526:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 611              		.loc 1 526 0
 612 0036 181C     		mov	r0, r3
 613 0038 BD46     		mov	sp, r7
 614 003a 04B0     		add	sp, sp, #16
 615              		@ sp needed
 616 003c 80BD     		pop	{r7, pc}
 617              	.L45:
 618 003e C046     		.align	2
 619              	.L44:
 620 0040 80011A40 		.word	1075446144
 621              		.cfi_endproc
 622              	.LFE7:
 623              		.size	ADC_SAR_Seq_1_GetResult16, .-ADC_SAR_Seq_1_GetResult16
 624              		.section	.text.ADC_SAR_Seq_1_SetChanMask,"ax",%progbits
 625              		.align	2
 626              		.global	ADC_SAR_Seq_1_SetChanMask
 627              		.code	16
 628              		.thumb_func
 629              		.type	ADC_SAR_Seq_1_SetChanMask, %function
 630              	ADC_SAR_Seq_1_SetChanMask:
 631              	.LFB8:
 527:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 528:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 529:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 530:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetChanMask
 531:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 532:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 533:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 534:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel enable mask.
 535:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 536:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 537:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that will be
 538:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This API will not enable the injection channel.
 542:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Examples: If the component is setup to sequence through 8
 543:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 545:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 546:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 547:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 548:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 549:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetChanMask(uint32 mask)
 550:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 632              		.loc 1 550 0
 633              		.cfi_startproc
 634 0000 80B5     		push	{r7, lr}
 635              		.cfi_def_cfa_offset 8
 636              		.cfi_offset 7, -8
 637              		.cfi_offset 14, -4
 638 0002 82B0     		sub	sp, sp, #8
 639              		.cfi_def_cfa_offset 16
 640 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 22


 641              		.cfi_def_cfa_register 7
 642 0006 7860     		str	r0, [r7, #4]
 551:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CHAN_EN_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 643              		.loc 1 551 0
 644 0008 034B     		ldr	r3, .L47
 645 000a 7968     		ldr	r1, [r7, #4]
 646 000c 0122     		mov	r2, #1
 647 000e 0A40     		and	r2, r1
 648 0010 1A60     		str	r2, [r3]
 552:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 649              		.loc 1 552 0
 650 0012 BD46     		mov	sp, r7
 651 0014 02B0     		add	sp, sp, #8
 652              		@ sp needed
 653 0016 80BD     		pop	{r7, pc}
 654              	.L48:
 655              		.align	2
 656              	.L47:
 657 0018 20001A40 		.word	1075445792
 658              		.cfi_endproc
 659              	.LFE8:
 660              		.size	ADC_SAR_Seq_1_SetChanMask, .-ADC_SAR_Seq_1_SetChanMask
 661              		.section	.text.ADC_SAR_Seq_1_SetLowLimit,"ax",%progbits
 662              		.align	2
 663              		.global	ADC_SAR_Seq_1_SetLowLimit
 664              		.code	16
 665              		.thumb_func
 666              		.type	ADC_SAR_Seq_1_SetLowLimit, %function
 667              	ADC_SAR_Seq_1_SetLowLimit:
 668              	.LFB9:
 553:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 554:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 555:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 556:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 557:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 558:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_EnableInjection
 559:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 560:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 561:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 562:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Enables the injection channel for the next scan only.
 563:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 564:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 565:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  None.
 566:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 567:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 568:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  None.
 569:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 570:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 571:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     void ADC_SAR_Seq_1_EnableInjection(void)
 572:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 573:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_INJ_CHAN_CONFIG_REG |= ADC_SAR_Seq_1_INJ_CHAN_EN;
 574:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 575:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 576:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 577:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 578:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 579:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 23


 580:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetLowLimit
 581:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 582:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 583:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 584:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the low limit parameter for a limit condition.
 585:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 586:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 587:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  lowLimit: The low limit for a limit condition.
 588:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 589:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 590:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 591:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 592:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 593:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetLowLimit(uint32 lowLimit)
 594:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 669              		.loc 1 594 0
 670              		.cfi_startproc
 671 0000 80B5     		push	{r7, lr}
 672              		.cfi_def_cfa_offset 8
 673              		.cfi_offset 7, -8
 674              		.cfi_offset 14, -4
 675 0002 82B0     		sub	sp, sp, #8
 676              		.cfi_def_cfa_offset 16
 677 0004 00AF     		add	r7, sp, #0
 678              		.cfi_def_cfa_register 7
 679 0006 7860     		str	r0, [r7, #4]
 595:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_1_RANGE_LOW_MASK);
 680              		.loc 1 595 0
 681 0008 084B     		ldr	r3, .L50
 682 000a 084A     		ldr	r2, .L50
 683 000c 1268     		ldr	r2, [r2]
 684 000e 120C     		lsr	r2, r2, #16
 685 0010 1204     		lsl	r2, r2, #16
 686 0012 1A60     		str	r2, [r3]
 596:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG |= lowLimit & ADC_SAR_Seq_1_RANGE_LOW_MASK;
 687              		.loc 1 596 0
 688 0014 054B     		ldr	r3, .L50
 689 0016 054A     		ldr	r2, .L50
 690 0018 1168     		ldr	r1, [r2]
 691 001a 7A68     		ldr	r2, [r7, #4]
 692 001c 1204     		lsl	r2, r2, #16
 693 001e 120C     		lsr	r2, r2, #16
 694 0020 0A43     		orr	r2, r1
 695 0022 1A60     		str	r2, [r3]
 597:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 696              		.loc 1 597 0
 697 0024 BD46     		mov	sp, r7
 698 0026 02B0     		add	sp, sp, #8
 699              		@ sp needed
 700 0028 80BD     		pop	{r7, pc}
 701              	.L51:
 702 002a C046     		.align	2
 703              	.L50:
 704 002c 18001A40 		.word	1075445784
 705              		.cfi_endproc
 706              	.LFE9:
 707              		.size	ADC_SAR_Seq_1_SetLowLimit, .-ADC_SAR_Seq_1_SetLowLimit
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 24


 708              		.section	.text.ADC_SAR_Seq_1_SetHighLimit,"ax",%progbits
 709              		.align	2
 710              		.global	ADC_SAR_Seq_1_SetHighLimit
 711              		.code	16
 712              		.thumb_func
 713              		.type	ADC_SAR_Seq_1_SetHighLimit, %function
 714              	ADC_SAR_Seq_1_SetHighLimit:
 715              	.LFB10:
 598:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 599:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 600:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 601:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetHighLimit
 602:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 603:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 604:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 605:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the low limit parameter for a limit condition.
 606:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 607:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 608:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  highLimit: The high limit for a limit condition.
 609:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 610:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 611:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 612:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 613:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 614:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetHighLimit(uint32 highLimit)
 615:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 716              		.loc 1 615 0
 717              		.cfi_startproc
 718 0000 80B5     		push	{r7, lr}
 719              		.cfi_def_cfa_offset 8
 720              		.cfi_offset 7, -8
 721              		.cfi_offset 14, -4
 722 0002 82B0     		sub	sp, sp, #8
 723              		.cfi_def_cfa_offset 16
 724 0004 00AF     		add	r7, sp, #0
 725              		.cfi_def_cfa_register 7
 726 0006 7860     		str	r0, [r7, #4]
 616:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_1_RANGE_HIGH_MASK);
 727              		.loc 1 616 0
 728 0008 074B     		ldr	r3, .L53
 729 000a 074A     		ldr	r2, .L53
 730 000c 1268     		ldr	r2, [r2]
 731 000e 1204     		lsl	r2, r2, #16
 732 0010 120C     		lsr	r2, r2, #16
 733 0012 1A60     		str	r2, [r3]
 617:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_SAR_Seq_1_RANGE_HIGH_OFFSET);
 734              		.loc 1 617 0
 735 0014 044B     		ldr	r3, .L53
 736 0016 044A     		ldr	r2, .L53
 737 0018 1168     		ldr	r1, [r2]
 738 001a 7A68     		ldr	r2, [r7, #4]
 739 001c 1204     		lsl	r2, r2, #16
 740 001e 0A43     		orr	r2, r1
 741 0020 1A60     		str	r2, [r3]
 618:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 742              		.loc 1 618 0
 743 0022 BD46     		mov	sp, r7
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 25


 744 0024 02B0     		add	sp, sp, #8
 745              		@ sp needed
 746 0026 80BD     		pop	{r7, pc}
 747              	.L54:
 748              		.align	2
 749              	.L53:
 750 0028 18001A40 		.word	1075445784
 751              		.cfi_endproc
 752              	.LFE10:
 753              		.size	ADC_SAR_Seq_1_SetHighLimit, .-ADC_SAR_Seq_1_SetHighLimit
 754              		.section	.text.ADC_SAR_Seq_1_SetLimitMask,"ax",%progbits
 755              		.align	2
 756              		.global	ADC_SAR_Seq_1_SetLimitMask
 757              		.code	16
 758              		.thumb_func
 759              		.type	ADC_SAR_Seq_1_SetLimitMask, %function
 760              	ADC_SAR_Seq_1_SetLimitMask:
 761              	.LFB11:
 619:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 620:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 621:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 622:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetLimitMask
 623:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 624:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 625:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 626:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel limit condition mask.
 627:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 628:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 629:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that may cause a
 630:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 634:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 635:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 636:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 637:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 638:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetLimitMask(uint32 mask)
 639:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 762              		.loc 1 639 0
 763              		.cfi_startproc
 764 0000 80B5     		push	{r7, lr}
 765              		.cfi_def_cfa_offset 8
 766              		.cfi_offset 7, -8
 767              		.cfi_offset 14, -4
 768 0002 82B0     		sub	sp, sp, #8
 769              		.cfi_def_cfa_offset 16
 770 0004 00AF     		add	r7, sp, #0
 771              		.cfi_def_cfa_register 7
 772 0006 7860     		str	r0, [r7, #4]
 640:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 773              		.loc 1 640 0
 774 0008 034B     		ldr	r3, .L56
 775 000a 7968     		ldr	r1, [r7, #4]
 776 000c 0122     		mov	r2, #1
 777 000e 0A40     		and	r2, r1
 778 0010 1A60     		str	r2, [r3]
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 26


 641:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 779              		.loc 1 641 0
 780 0012 BD46     		mov	sp, r7
 781 0014 02B0     		add	sp, sp, #8
 782              		@ sp needed
 783 0016 80BD     		pop	{r7, pc}
 784              	.L57:
 785              		.align	2
 786              	.L56:
 787 0018 38021A40 		.word	1075446328
 788              		.cfi_endproc
 789              	.LFE11:
 790              		.size	ADC_SAR_Seq_1_SetLimitMask, .-ADC_SAR_Seq_1_SetLimitMask
 791              		.section	.text.ADC_SAR_Seq_1_SetSatMask,"ax",%progbits
 792              		.align	2
 793              		.global	ADC_SAR_Seq_1_SetSatMask
 794              		.code	16
 795              		.thumb_func
 796              		.type	ADC_SAR_Seq_1_SetSatMask, %function
 797              	ADC_SAR_Seq_1_SetSatMask:
 798              	.LFB12:
 642:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 643:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 644:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 645:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetSatMask
 646:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 647:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 648:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 649:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel saturation event mask.
 650:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 651:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 652:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that may cause a
 653:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 657:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 658:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 659:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 660:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 661:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetSatMask(uint32 mask)
 662:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 799              		.loc 1 662 0
 800              		.cfi_startproc
 801 0000 80B5     		push	{r7, lr}
 802              		.cfi_def_cfa_offset 8
 803              		.cfi_offset 7, -8
 804              		.cfi_offset 14, -4
 805 0002 82B0     		sub	sp, sp, #8
 806              		.cfi_def_cfa_offset 16
 807 0004 00AF     		add	r7, sp, #0
 808              		.cfi_def_cfa_register 7
 809 0006 7860     		str	r0, [r7, #4]
 663:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 810              		.loc 1 663 0
 811 0008 034B     		ldr	r3, .L59
 812 000a 7968     		ldr	r1, [r7, #4]
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 27


 813 000c 0122     		mov	r2, #1
 814 000e 0A40     		and	r2, r1
 815 0010 1A60     		str	r2, [r3]
 664:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 816              		.loc 1 664 0
 817 0012 BD46     		mov	sp, r7
 818 0014 02B0     		add	sp, sp, #8
 819              		@ sp needed
 820 0016 80BD     		pop	{r7, pc}
 821              	.L60:
 822              		.align	2
 823              	.L59:
 824 0018 28021A40 		.word	1075446312
 825              		.cfi_endproc
 826              	.LFE12:
 827              		.size	ADC_SAR_Seq_1_SetSatMask, .-ADC_SAR_Seq_1_SetSatMask
 828              		.section	.text.ADC_SAR_Seq_1_SetOffset,"ax",%progbits
 829              		.align	2
 830              		.global	ADC_SAR_Seq_1_SetOffset
 831              		.code	16
 832              		.thumb_func
 833              		.type	ADC_SAR_Seq_1_SetOffset, %function
 834              	ADC_SAR_Seq_1_SetOffset:
 835              	.LFB13:
 665:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 666:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 667:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 668:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetOffset
 669:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 670:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 671:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 672:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   Description: Sets the ADC offset which is used by the functions
 673:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   to substract the offset from the given reading
 675:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   before calculating the voltage conversion.
 676:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 677:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 678:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: ADC channel number.
 679:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  offset: This value is a measured value when the
 680:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *          inputs are shorted or connected to the same input voltage.
 681:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 682:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 683:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 684:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 685:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
 686:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Offset:  Modified to set the user provided offset.
 687:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 688:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 689:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetOffset(uint32 chan, int16 offset)
 690:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 836              		.loc 1 690 0
 837              		.cfi_startproc
 838 0000 80B5     		push	{r7, lr}
 839              		.cfi_def_cfa_offset 8
 840              		.cfi_offset 7, -8
 841              		.cfi_offset 14, -4
 842 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 28


 843              		.cfi_def_cfa_offset 16
 844 0004 00AF     		add	r7, sp, #0
 845              		.cfi_def_cfa_register 7
 846 0006 7860     		str	r0, [r7, #4]
 847 0008 0A1C     		mov	r2, r1
 848 000a BB1C     		add	r3, r7, #2
 849 000c 1A80     		strh	r2, [r3]
 691:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 850              		.loc 1 692 0
 851 000e 7B68     		ldr	r3, [r7, #4]
 852 0010 002B     		cmp	r3, #0
 853 0012 02D0     		beq	.L62
 854              		.loc 1 692 0 is_stmt 0 discriminator 1
 855 0014 0020     		mov	r0, #0
 856 0016 FFF7FEFF 		bl	CyHalt
 857              	.L62:
 693:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 694:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_offset[chan] = offset;
 858              		.loc 1 694 0 is_stmt 1
 859 001a 044B     		ldr	r3, .L63
 860 001c 7A68     		ldr	r2, [r7, #4]
 861 001e 5200     		lsl	r2, r2, #1
 862 0020 B91C     		add	r1, r7, #2
 863 0022 0988     		ldrh	r1, [r1]
 864 0024 D152     		strh	r1, [r2, r3]
 695:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 865              		.loc 1 695 0
 866 0026 BD46     		mov	sp, r7
 867 0028 02B0     		add	sp, sp, #8
 868              		@ sp needed
 869 002a 80BD     		pop	{r7, pc}
 870              	.L64:
 871              		.align	2
 872              	.L63:
 873 002c 00000000 		.word	ADC_SAR_Seq_1_offset
 874              		.cfi_endproc
 875              	.LFE13:
 876              		.size	ADC_SAR_Seq_1_SetOffset, .-ADC_SAR_Seq_1_SetOffset
 877              		.section	.text.ADC_SAR_Seq_1_SetGain,"ax",%progbits
 878              		.align	2
 879              		.global	ADC_SAR_Seq_1_SetGain
 880              		.code	16
 881              		.thumb_func
 882              		.type	ADC_SAR_Seq_1_SetGain, %function
 883              	ADC_SAR_Seq_1_SetGain:
 884              	.LFB14:
 696:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 697:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 698:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 699:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetGain
 700:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 701:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 702:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 703:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  conversion functions below. This value is set by default by the
 705:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  reference and input range settings. It should only be used to further
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 29


 706:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  calibrate the ADC with a known input or if an external reference is
 707:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  conversion between ADC counts and voltage.
 710:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 711:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 712:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: ADC channel number.
 713:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 715:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 716:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 717:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 718:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
 719:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_CountsPer10Volt:  modified to set the ADC gain in counts
 720:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   per 10 volt.
 721:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 722:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 723:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetGain(uint32 chan, int32 adcGain)
 724:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 885              		.loc 1 724 0
 886              		.cfi_startproc
 887 0000 80B5     		push	{r7, lr}
 888              		.cfi_def_cfa_offset 8
 889              		.cfi_offset 7, -8
 890              		.cfi_offset 14, -4
 891 0002 82B0     		sub	sp, sp, #8
 892              		.cfi_def_cfa_offset 16
 893 0004 00AF     		add	r7, sp, #0
 894              		.cfi_def_cfa_register 7
 895 0006 7860     		str	r0, [r7, #4]
 896 0008 3960     		str	r1, [r7]
 725:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 897              		.loc 1 726 0
 898 000a 7B68     		ldr	r3, [r7, #4]
 899 000c 002B     		cmp	r3, #0
 900 000e 02D0     		beq	.L66
 901              		.loc 1 726 0 is_stmt 0 discriminator 1
 902 0010 0020     		mov	r0, #0
 903 0012 FFF7FEFF 		bl	CyHalt
 904              	.L66:
 727:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 728:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_countsPer10Volt[chan] = adcGain;
 905              		.loc 1 728 0 is_stmt 1
 906 0016 044B     		ldr	r3, .L67
 907 0018 7A68     		ldr	r2, [r7, #4]
 908 001a 9200     		lsl	r2, r2, #2
 909 001c 3968     		ldr	r1, [r7]
 910 001e D150     		str	r1, [r2, r3]
 729:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 911              		.loc 1 729 0
 912 0020 BD46     		mov	sp, r7
 913 0022 02B0     		add	sp, sp, #8
 914              		@ sp needed
 915 0024 80BD     		pop	{r7, pc}
 916              	.L68:
 917 0026 C046     		.align	2
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 30


 918              	.L67:
 919 0028 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 920              		.cfi_endproc
 921              	.LFE14:
 922              		.size	ADC_SAR_Seq_1_SetGain, .-ADC_SAR_Seq_1_SetGain
 923              		.global	__aeabi_idiv
 924              		.section	.text.ADC_SAR_Seq_1_CountsTo_mVolts,"ax",%progbits
 925              		.align	2
 926              		.global	ADC_SAR_Seq_1_CountsTo_mVolts
 927              		.code	16
 928              		.thumb_func
 929              		.type	ADC_SAR_Seq_1_CountsTo_mVolts, %function
 930              	ADC_SAR_Seq_1_CountsTo_mVolts:
 931              	.LFB15:
 730:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 731:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 732:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #if(ADC_SAR_Seq_1_DEFAULT_JUSTIFICATION_SEL == ADC_SAR_Seq_1__RIGHT)
 733:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 734:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 735:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 736:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_mVolts
 737:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 738:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 739:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 740:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function converts ADC counts to mVolts
 741:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 742:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 743:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 744:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 745:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  adcCounts: Result from the ADC conversion
 746:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 747:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 748:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in mVolts
 749:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 750:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 751:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 753:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 754:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 755:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 756:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int16 ADC_SAR_Seq_1_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 932              		.loc 1 757 0
 933              		.cfi_startproc
 934 0000 80B5     		push	{r7, lr}
 935              		.cfi_def_cfa_offset 8
 936              		.cfi_offset 7, -8
 937              		.cfi_offset 14, -4
 938 0002 84B0     		sub	sp, sp, #16
 939              		.cfi_def_cfa_offset 24
 940 0004 00AF     		add	r7, sp, #0
 941              		.cfi_def_cfa_register 7
 942 0006 7860     		str	r0, [r7, #4]
 943 0008 0A1C     		mov	r2, r1
 944 000a BB1C     		add	r3, r7, #2
 945 000c 1A80     		strh	r2, [r3]
 758:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         int16 mVolts;
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 31


 759:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 760:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 946              		.loc 1 761 0
 947 000e 7B68     		ldr	r3, [r7, #4]
 948 0010 002B     		cmp	r3, #0
 949 0012 02D0     		beq	.L70
 950              		.loc 1 761 0 is_stmt 0 discriminator 1
 951 0014 0020     		mov	r0, #0
 952 0016 FFF7FEFF 		bl	CyHalt
 953              	.L70:
 762:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 763:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 765:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 766:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 767:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 768:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 769:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 770:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 771:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 772:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 954              		.loc 1 772 0 is_stmt 1
 955 001a BB1C     		add	r3, r7, #2
 956 001c 1A88     		ldrh	r2, [r3]
 957 001e 1E4B     		ldr	r3, .L76
 958 0020 7968     		ldr	r1, [r7, #4]
 959 0022 4900     		lsl	r1, r1, #1
 960 0024 CB5A     		ldrh	r3, [r1, r3]
 961 0026 9BB2     		uxth	r3, r3
 962 0028 9BB2     		uxth	r3, r3
 963 002a D31A     		sub	r3, r2, r3
 964 002c 9AB2     		uxth	r2, r3
 965 002e BB1C     		add	r3, r7, #2
 966 0030 1A80     		strh	r2, [r3]
 773:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 774:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 967              		.loc 1 774 0
 968 0032 BB1C     		add	r3, r7, #2
 969 0034 0021     		mov	r1, #0
 970 0036 5B5E     		ldrsh	r3, [r3, r1]
 971 0038 184A     		ldr	r2, .L76+4
 972 003a 5A43     		mul	r2, r3
 775:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (ADC_SAR_Seq_1_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_1_countsPer10Volt[chan]
 973              		.loc 1 775 0
 974 003c BB1C     		add	r3, r7, #2
 975 003e 0021     		mov	r1, #0
 976 0040 5B5E     		ldrsh	r3, [r3, r1]
 977 0042 002B     		cmp	r3, #0
 978 0044 08DD     		ble	.L71
 979              		.loc 1 775 0 is_stmt 0 discriminator 1
 980 0046 164B     		ldr	r3, .L76+8
 981 0048 7968     		ldr	r1, [r7, #4]
 982 004a 8900     		lsl	r1, r1, #2
 983 004c CB58     		ldr	r3, [r1, r3]
 984 004e 002B     		cmp	r3, #0
 985 0050 00DA     		bge	.L72
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 32


 986 0052 0133     		add	r3, r3, #1
 987              	.L72:
 988 0054 5B10     		asr	r3, r3, #1
 989 0056 08E0     		b	.L73
 990              	.L71:
 991              		.loc 1 775 0 discriminator 2
 992 0058 114B     		ldr	r3, .L76+8
 993 005a 7968     		ldr	r1, [r7, #4]
 994 005c 8900     		lsl	r1, r1, #2
 995 005e CB58     		ldr	r3, [r1, r3]
 996 0060 002B     		cmp	r3, #0
 997 0062 00DA     		bge	.L74
 998 0064 0133     		add	r3, r3, #1
 999              	.L74:
 1000 0066 5B10     		asr	r3, r3, #1
 1001 0068 5B42     		neg	r3, r3
 1002              	.L73:
 774:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 1003              		.loc 1 774 0 is_stmt 1
 1004 006a D218     		add	r2, r2, r3
 776:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  / ADC_SAR_Seq_1_countsPer10Volt[chan]);
 1005              		.loc 1 776 0
 1006 006c 0C4B     		ldr	r3, .L76+8
 1007 006e 7968     		ldr	r1, [r7, #4]
 1008 0070 8900     		lsl	r1, r1, #2
 1009 0072 CB58     		ldr	r3, [r1, r3]
 1010 0074 101C     		mov	r0, r2
 1011 0076 191C     		mov	r1, r3
 1012 0078 FFF7FEFF 		bl	__aeabi_idiv
 1013 007c 031C     		mov	r3, r0
 1014 007e 1A1C     		mov	r2, r3
 774:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 1015              		.loc 1 774 0
 1016 0080 3B1C     		mov	r3, r7
 1017 0082 0E33     		add	r3, r3, #14
 1018 0084 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 778:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( mVolts );
 1019              		.loc 1 778 0
 1020 0086 3B1C     		mov	r3, r7
 1021 0088 0E33     		add	r3, r3, #14
 1022 008a 1B88     		ldrh	r3, [r3]
 1023 008c 1BB2     		sxth	r3, r3
 779:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1024              		.loc 1 779 0
 1025 008e 181C     		mov	r0, r3
 1026 0090 BD46     		mov	sp, r7
 1027 0092 04B0     		add	sp, sp, #16
 1028              		@ sp needed
 1029 0094 80BD     		pop	{r7, pc}
 1030              	.L77:
 1031 0096 C046     		.align	2
 1032              	.L76:
 1033 0098 00000000 		.word	ADC_SAR_Seq_1_offset
 1034 009c 10270000 		.word	10000
 1035 00a0 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1036              		.cfi_endproc
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 33


 1037              	.LFE15:
 1038              		.size	ADC_SAR_Seq_1_CountsTo_mVolts, .-ADC_SAR_Seq_1_CountsTo_mVolts
 1039              		.global	__aeabi_lmul
 1040              		.global	__aeabi_ldivmod
 1041              		.section	.text.ADC_SAR_Seq_1_CountsTo_uVolts,"ax",%progbits
 1042              		.align	2
 1043              		.global	ADC_SAR_Seq_1_CountsTo_uVolts
 1044              		.code	16
 1045              		.thumb_func
 1046              		.type	ADC_SAR_Seq_1_CountsTo_uVolts, %function
 1047              	ADC_SAR_Seq_1_CountsTo_uVolts:
 1048              	.LFB16:
 780:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 781:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 782:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 783:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_uVolts
 784:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 785:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 786:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 787:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function converts ADC counts to micro Volts
 788:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 789:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 790:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 791:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 792:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  adcCounts: Result from the ADC conversion
 793:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 794:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 795:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in uVolts
 796:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 797:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 798:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 800:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 801:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 802:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Theory:
 803:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  resolution.
 806:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 809:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 810:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int32 ADC_SAR_Seq_1_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 1049              		.loc 1 811 0
 1050              		.cfi_startproc
 1051 0000 B0B5     		push	{r4, r5, r7, lr}
 1052              		.cfi_def_cfa_offset 16
 1053              		.cfi_offset 4, -16
 1054              		.cfi_offset 5, -12
 1055              		.cfi_offset 7, -8
 1056              		.cfi_offset 14, -4
 1057 0002 86B0     		sub	sp, sp, #24
 1058              		.cfi_def_cfa_offset 40
 1059 0004 00AF     		add	r7, sp, #0
 1060              		.cfi_def_cfa_register 7
 1061 0006 F860     		str	r0, [r7, #12]
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 34


 1062 0008 0A1C     		mov	r2, r1
 1063 000a 3B1C     		mov	r3, r7
 1064 000c 0A33     		add	r3, r3, #10
 1065 000e 1A80     		strh	r2, [r3]
 812:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         int64 uVolts;
 813:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 814:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 1066              		.loc 1 815 0
 1067 0010 FB68     		ldr	r3, [r7, #12]
 1068 0012 002B     		cmp	r3, #0
 1069 0014 02D0     		beq	.L79
 1070              		.loc 1 815 0 is_stmt 0 discriminator 1
 1071 0016 0020     		mov	r0, #0
 1072 0018 FFF7FEFF 		bl	CyHalt
 1073              	.L79:
 816:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 817:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 819:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 820:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 821:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 822:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 823:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 824:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 825:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 826:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 1074              		.loc 1 826 0 is_stmt 1
 1075 001c 3B1C     		mov	r3, r7
 1076 001e 0A33     		add	r3, r3, #10
 1077 0020 1A88     		ldrh	r2, [r3]
 1078 0022 1B4B     		ldr	r3, .L81+8
 1079 0024 F968     		ldr	r1, [r7, #12]
 1080 0026 4900     		lsl	r1, r1, #1
 1081 0028 CB5A     		ldrh	r3, [r1, r3]
 1082 002a 9BB2     		uxth	r3, r3
 1083 002c 9BB2     		uxth	r3, r3
 1084 002e D31A     		sub	r3, r2, r3
 1085 0030 9AB2     		uxth	r2, r3
 1086 0032 3B1C     		mov	r3, r7
 1087 0034 0A33     		add	r3, r3, #10
 1088 0036 1A80     		strh	r2, [r3]
 827:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 828:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         uVolts = ((int64)adcCounts * ADC_SAR_Seq_1_10UV_COUNTS) / ADC_SAR_Seq_1_countsPer10Volt[cha
 1089              		.loc 1 828 0
 1090 0038 3B1C     		mov	r3, r7
 1091 003a 0A33     		add	r3, r3, #10
 1092 003c 1B88     		ldrh	r3, [r3]
 1093 003e 1BB2     		sxth	r3, r3
 1094 0040 3B60     		str	r3, [r7]
 1095 0042 DB17     		asr	r3, r3, #31
 1096 0044 7B60     		str	r3, [r7, #4]
 1097 0046 3868     		ldr	r0, [r7]
 1098 0048 7968     		ldr	r1, [r7, #4]
 1099 004a 104B     		ldr	r3, .L81+4
 1100 004c 0E4A     		ldr	r2, .L81
 1101 004e FFF7FEFF 		bl	__aeabi_lmul
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 35


 1102 0052 021C     		mov	r2, r0
 1103 0054 0B1C     		mov	r3, r1
 1104 0056 0F49     		ldr	r1, .L81+12
 1105 0058 F868     		ldr	r0, [r7, #12]
 1106 005a 8000     		lsl	r0, r0, #2
 1107 005c 4158     		ldr	r1, [r0, r1]
 1108 005e 0C1C     		mov	r4, r1
 1109 0060 C917     		asr	r1, r1, #31
 1110 0062 0D1C     		mov	r5, r1
 1111 0064 101C     		mov	r0, r2
 1112 0066 191C     		mov	r1, r3
 1113 0068 221C     		mov	r2, r4
 1114 006a 2B1C     		mov	r3, r5
 1115 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1116 0070 031C     		mov	r3, r0
 1117 0072 0C1C     		mov	r4, r1
 1118 0074 3B61     		str	r3, [r7, #16]
 1119 0076 7C61     		str	r4, [r7, #20]
 829:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 830:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( (int32)uVolts );
 1120              		.loc 1 830 0
 1121 0078 3B69     		ldr	r3, [r7, #16]
 831:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1122              		.loc 1 831 0
 1123 007a 181C     		mov	r0, r3
 1124 007c BD46     		mov	sp, r7
 1125 007e 06B0     		add	sp, sp, #24
 1126              		@ sp needed
 1127 0080 B0BD     		pop	{r4, r5, r7, pc}
 1128              	.L82:
 1129 0082 C046C046 		.align	3
 1129      C046
 1130              	.L81:
 1131 0088 80969800 		.word	10000000
 1132 008c 00000000 		.word	0
 1133 0090 00000000 		.word	ADC_SAR_Seq_1_offset
 1134 0094 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1135              		.cfi_endproc
 1136              	.LFE16:
 1137              		.size	ADC_SAR_Seq_1_CountsTo_uVolts, .-ADC_SAR_Seq_1_CountsTo_uVolts
 1138              		.global	__aeabi_i2f
 1139              		.global	__aeabi_fmul
 1140              		.global	__aeabi_fdiv
 1141              		.section	.text.ADC_SAR_Seq_1_CountsTo_Volts,"ax",%progbits
 1142              		.align	2
 1143              		.global	ADC_SAR_Seq_1_CountsTo_Volts
 1144              		.code	16
 1145              		.thumb_func
 1146              		.type	ADC_SAR_Seq_1_CountsTo_Volts, %function
 1147              	ADC_SAR_Seq_1_CountsTo_Volts:
 1148              	.LFB17:
 832:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 833:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 834:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 835:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_Volts
 836:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 837:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 36


 838:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 839:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 841:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 842:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 843:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 844:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Result from the ADC conversion
 845:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 846:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 847:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in Volts
 848:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 849:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 850:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to Volts.
 851:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 852:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 853:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 854:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 855:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     float32 ADC_SAR_Seq_1_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 1149              		.loc 1 856 0
 1150              		.cfi_startproc
 1151 0000 90B5     		push	{r4, r7, lr}
 1152              		.cfi_def_cfa_offset 12
 1153              		.cfi_offset 4, -12
 1154              		.cfi_offset 7, -8
 1155              		.cfi_offset 14, -4
 1156 0002 85B0     		sub	sp, sp, #20
 1157              		.cfi_def_cfa_offset 32
 1158 0004 00AF     		add	r7, sp, #0
 1159              		.cfi_def_cfa_register 7
 1160 0006 7860     		str	r0, [r7, #4]
 1161 0008 0A1C     		mov	r2, r1
 1162 000a BB1C     		add	r3, r7, #2
 1163 000c 1A80     		strh	r2, [r3]
 857:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         float32 volts;
 858:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 859:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 1164              		.loc 1 860 0
 1165 000e 7B68     		ldr	r3, [r7, #4]
 1166 0010 002B     		cmp	r3, #0
 1167 0012 02D0     		beq	.L84
 1168              		.loc 1 860 0 is_stmt 0 discriminator 1
 1169 0014 0020     		mov	r0, #0
 1170 0016 FFF7FEFF 		bl	CyHalt
 1171              	.L84:
 861:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 862:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 864:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 865:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 866:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 867:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 868:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 869:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 870:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 871:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 37


 1172              		.loc 1 871 0 is_stmt 1
 1173 001a BB1C     		add	r3, r7, #2
 1174 001c 1A88     		ldrh	r2, [r3]
 1175 001e 154B     		ldr	r3, .L86
 1176 0020 7968     		ldr	r1, [r7, #4]
 1177 0022 4900     		lsl	r1, r1, #1
 1178 0024 CB5A     		ldrh	r3, [r1, r3]
 1179 0026 9BB2     		uxth	r3, r3
 1180 0028 9BB2     		uxth	r3, r3
 1181 002a D31A     		sub	r3, r2, r3
 1182 002c 9AB2     		uxth	r2, r3
 1183 002e BB1C     		add	r3, r7, #2
 1184 0030 1A80     		strh	r2, [r3]
 872:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 873:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         volts = ((float32)adcCounts * ADC_SAR_Seq_1_10V_COUNTS) / (float32)ADC_SAR_Seq_1_countsPer1
 1185              		.loc 1 873 0
 1186 0032 BB1C     		add	r3, r7, #2
 1187 0034 0022     		mov	r2, #0
 1188 0036 9B5E     		ldrsh	r3, [r3, r2]
 1189 0038 181C     		mov	r0, r3
 1190 003a FFF7FEFF 		bl	__aeabi_i2f
 1191 003e 031C     		add	r3, r0, #0
 1192 0040 181C     		add	r0, r3, #0
 1193 0042 0D49     		ldr	r1, .L86+4
 1194 0044 FFF7FEFF 		bl	__aeabi_fmul
 1195 0048 031C     		add	r3, r0, #0
 1196 004a 1C1C     		add	r4, r3, #0
 1197 004c 0B4B     		ldr	r3, .L86+8
 1198 004e 7A68     		ldr	r2, [r7, #4]
 1199 0050 9200     		lsl	r2, r2, #2
 1200 0052 D358     		ldr	r3, [r2, r3]
 1201 0054 181C     		mov	r0, r3
 1202 0056 FFF7FEFF 		bl	__aeabi_i2f
 1203 005a 031C     		add	r3, r0, #0
 1204 005c 201C     		add	r0, r4, #0
 1205 005e 191C     		add	r1, r3, #0
 1206 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1207 0064 031C     		add	r3, r0, #0
 1208 0066 FB60     		str	r3, [r7, #12]
 874:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 875:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( volts );
 1209              		.loc 1 875 0
 1210 0068 FB68     		ldr	r3, [r7, #12]
 876:.\Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1211              		.loc 1 876 0
 1212 006a 181C     		add	r0, r3, #0
 1213 006c BD46     		mov	sp, r7
 1214 006e 05B0     		add	sp, sp, #20
 1215              		@ sp needed
 1216 0070 90BD     		pop	{r4, r7, pc}
 1217              	.L87:
 1218 0072 C046     		.align	2
 1219              	.L86:
 1220 0074 00000000 		.word	ADC_SAR_Seq_1_offset
 1221 0078 00002041 		.word	1092616192
 1222 007c 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1223              		.cfi_endproc
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 38


 1224              	.LFE17:
 1225              		.size	ADC_SAR_Seq_1_CountsTo_Volts, .-ADC_SAR_Seq_1_CountsTo_Volts
 1226              		.text
 1227              	.Letext0:
 1228              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1229              		.section	.debug_info,"",%progbits
 1230              	.Ldebug_info0:
 1231 0000 70040000 		.4byte	0x470
 1232 0004 0400     		.2byte	0x4
 1233 0006 00000000 		.4byte	.Ldebug_abbrev0
 1234 000a 04       		.byte	0x4
 1235 000b 01       		.uleb128 0x1
 1236 000c 06010000 		.4byte	.LASF59
 1237 0010 01       		.byte	0x1
 1238 0011 20000000 		.4byte	.LASF60
 1239 0015 FC020000 		.4byte	.LASF61
 1240 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1241 001d 00000000 		.4byte	0
 1242 0021 00000000 		.4byte	.Ldebug_line0
 1243 0025 02       		.uleb128 0x2
 1244 0026 01       		.byte	0x1
 1245 0027 06       		.byte	0x6
 1246 0028 27040000 		.4byte	.LASF0
 1247 002c 02       		.uleb128 0x2
 1248 002d 01       		.byte	0x1
 1249 002e 08       		.byte	0x8
 1250 002f 82010000 		.4byte	.LASF1
 1251 0033 02       		.uleb128 0x2
 1252 0034 02       		.byte	0x2
 1253 0035 05       		.byte	0x5
 1254 0036 D5030000 		.4byte	.LASF2
 1255 003a 02       		.uleb128 0x2
 1256 003b 02       		.byte	0x2
 1257 003c 07       		.byte	0x7
 1258 003d 33040000 		.4byte	.LASF3
 1259 0041 02       		.uleb128 0x2
 1260 0042 04       		.byte	0x4
 1261 0043 05       		.byte	0x5
 1262 0044 00040000 		.4byte	.LASF4
 1263 0048 02       		.uleb128 0x2
 1264 0049 04       		.byte	0x4
 1265 004a 07       		.byte	0x7
 1266 004b C4010000 		.4byte	.LASF5
 1267 004f 02       		.uleb128 0x2
 1268 0050 08       		.byte	0x8
 1269 0051 05       		.byte	0x5
 1270 0052 96030000 		.4byte	.LASF6
 1271 0056 02       		.uleb128 0x2
 1272 0057 08       		.byte	0x8
 1273 0058 07       		.byte	0x7
 1274 0059 CD020000 		.4byte	.LASF7
 1275 005d 03       		.uleb128 0x3
 1276 005e 04       		.byte	0x4
 1277 005f 05       		.byte	0x5
 1278 0060 696E7400 		.ascii	"int\000"
 1279 0064 02       		.uleb128 0x2
 1280 0065 04       		.byte	0x4
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 39


 1281 0066 07       		.byte	0x7
 1282 0067 9E020000 		.4byte	.LASF8
 1283 006b 04       		.uleb128 0x4
 1284 006c DF030000 		.4byte	.LASF9
 1285 0070 02       		.byte	0x2
 1286 0071 C1       		.byte	0xc1
 1287 0072 2C000000 		.4byte	0x2c
 1288 0076 04       		.uleb128 0x4
 1289 0077 6D020000 		.4byte	.LASF10
 1290 007b 02       		.byte	0x2
 1291 007c C2       		.byte	0xc2
 1292 007d 3A000000 		.4byte	0x3a
 1293 0081 04       		.uleb128 0x4
 1294 0082 7E020000 		.4byte	.LASF11
 1295 0086 02       		.byte	0x2
 1296 0087 C3       		.byte	0xc3
 1297 0088 48000000 		.4byte	0x48
 1298 008c 04       		.uleb128 0x4
 1299 008d BE010000 		.4byte	.LASF12
 1300 0091 02       		.byte	0x2
 1301 0092 C5       		.byte	0xc5
 1302 0093 33000000 		.4byte	0x33
 1303 0097 04       		.uleb128 0x4
 1304 0098 D6010000 		.4byte	.LASF13
 1305 009c 02       		.byte	0x2
 1306 009d C6       		.byte	0xc6
 1307 009e 41000000 		.4byte	0x41
 1308 00a2 04       		.uleb128 0x4
 1309 00a3 F4000000 		.4byte	.LASF14
 1310 00a7 02       		.byte	0x2
 1311 00a8 C7       		.byte	0xc7
 1312 00a9 AD000000 		.4byte	0xad
 1313 00ad 02       		.uleb128 0x2
 1314 00ae 04       		.byte	0x4
 1315 00af 04       		.byte	0x4
 1316 00b0 65000000 		.4byte	.LASF15
 1317 00b4 02       		.uleb128 0x2
 1318 00b5 08       		.byte	0x8
 1319 00b6 04       		.byte	0x4
 1320 00b7 22020000 		.4byte	.LASF16
 1321 00bb 04       		.uleb128 0x4
 1322 00bc 4D040000 		.4byte	.LASF17
 1323 00c0 02       		.byte	0x2
 1324 00c1 CC       		.byte	0xcc
 1325 00c2 4F000000 		.4byte	0x4f
 1326 00c6 02       		.uleb128 0x2
 1327 00c7 01       		.byte	0x1
 1328 00c8 08       		.byte	0x8
 1329 00c9 CA000000 		.4byte	.LASF18
 1330 00cd 05       		.uleb128 0x5
 1331 00ce 1A000000 		.4byte	.LASF19
 1332 00d2 02       		.byte	0x2
 1333 00d3 6D01     		.2byte	0x16d
 1334 00d5 D9000000 		.4byte	0xd9
 1335 00d9 06       		.uleb128 0x6
 1336 00da 81000000 		.4byte	0x81
 1337 00de 02       		.uleb128 0x2
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 40


 1338 00df 04       		.byte	0x4
 1339 00e0 07       		.byte	0x7
 1340 00e1 8D030000 		.4byte	.LASF20
 1341 00e5 07       		.uleb128 0x7
 1342 00e6 0E020000 		.4byte	.LASF24
 1343 00ea 01       		.byte	0x1
 1344 00eb 3F       		.byte	0x3f
 1345 00ec 00000000 		.4byte	.LFB0
 1346 00f0 24000000 		.4byte	.LFE0-.LFB0
 1347 00f4 01       		.uleb128 0x1
 1348 00f5 9C       		.byte	0x9c
 1349 00f6 08       		.uleb128 0x8
 1350 00f7 53040000 		.4byte	.LASF35
 1351 00fb 01       		.byte	0x1
 1352 00fc 5E       		.byte	0x5e
 1353 00fd 00000000 		.4byte	.LFB1
 1354 0101 C4010000 		.4byte	.LFE1-.LFB1
 1355 0105 01       		.uleb128 0x1
 1356 0106 9C       		.byte	0x9c
 1357 0107 36010000 		.4byte	0x136
 1358 010b 09       		.uleb128 0x9
 1359 010c A9030000 		.4byte	.LASF21
 1360 0110 01       		.byte	0x1
 1361 0111 60       		.byte	0x60
 1362 0112 81000000 		.4byte	0x81
 1363 0116 02       		.uleb128 0x2
 1364 0117 91       		.byte	0x91
 1365 0118 6C       		.sleb128 -20
 1366 0119 09       		.uleb128 0x9
 1367 011a FC000000 		.4byte	.LASF22
 1368 011e 01       		.byte	0x1
 1369 011f 61       		.byte	0x61
 1370 0120 81000000 		.4byte	0x81
 1371 0124 02       		.uleb128 0x2
 1372 0125 91       		.byte	0x91
 1373 0126 64       		.sleb128 -28
 1374 0127 09       		.uleb128 0x9
 1375 0128 C6020000 		.4byte	.LASF23
 1376 012c 01       		.byte	0x1
 1377 012d 62       		.byte	0x62
 1378 012e 97000000 		.4byte	0x97
 1379 0132 02       		.uleb128 0x2
 1380 0133 91       		.byte	0x91
 1381 0134 68       		.sleb128 -24
 1382 0135 00       		.byte	0
 1383 0136 0A       		.uleb128 0xa
 1384 0137 DC010000 		.4byte	.LASF25
 1385 013b 01       		.byte	0x1
 1386 013c 4A01     		.2byte	0x14a
 1387 013e 00000000 		.4byte	.LFB2
 1388 0142 28000000 		.4byte	.LFE2-.LFB2
 1389 0146 01       		.uleb128 0x1
 1390 0147 9C       		.byte	0x9c
 1391 0148 0B       		.uleb128 0xb
 1392 0149 90010000 		.4byte	.LASF26
 1393 014d 01       		.byte	0x1
 1394 014e 6D01     		.2byte	0x16d
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 41


 1395 0150 00000000 		.4byte	.LFB3
 1396 0154 18000000 		.4byte	.LFE3-.LFB3
 1397 0158 01       		.uleb128 0x1
 1398 0159 9C       		.byte	0x9c
 1399 015a 0B       		.uleb128 0xb
 1400 015b AB020000 		.4byte	.LASF27
 1401 015f 01       		.byte	0x1
 1402 0160 8701     		.2byte	0x187
 1403 0162 00000000 		.4byte	.LFB4
 1404 0166 1C000000 		.4byte	.LFE4-.LFB4
 1405 016a 01       		.uleb128 0x1
 1406 016b 9C       		.byte	0x9c
 1407 016c 0B       		.uleb128 0xb
 1408 016d 00000000 		.4byte	.LASF28
 1409 0171 01       		.byte	0x1
 1410 0172 A001     		.2byte	0x1a0
 1411 0174 00000000 		.4byte	.LFB5
 1412 0178 1C000000 		.4byte	.LFE5-.LFB5
 1413 017c 01       		.uleb128 0x1
 1414 017d 9C       		.byte	0x9c
 1415 017e 0C       		.uleb128 0xc
 1416 017f 09040000 		.4byte	.LASF30
 1417 0183 01       		.byte	0x1
 1418 0184 C201     		.2byte	0x1c2
 1419 0186 81000000 		.4byte	0x81
 1420 018a 00000000 		.4byte	.LFB6
 1421 018e 48000000 		.4byte	.LFE6-.LFB6
 1422 0192 01       		.uleb128 0x1
 1423 0193 9C       		.byte	0x9c
 1424 0194 B7010000 		.4byte	0x1b7
 1425 0198 0D       		.uleb128 0xd
 1426 0199 CD030000 		.4byte	.LASF32
 1427 019d 01       		.byte	0x1
 1428 019e C201     		.2byte	0x1c2
 1429 01a0 81000000 		.4byte	0x81
 1430 01a4 02       		.uleb128 0x2
 1431 01a5 91       		.byte	0x91
 1432 01a6 6C       		.sleb128 -20
 1433 01a7 0E       		.uleb128 0xe
 1434 01a8 CF000000 		.4byte	.LASF29
 1435 01ac 01       		.byte	0x1
 1436 01ad C401     		.2byte	0x1c4
 1437 01af 81000000 		.4byte	0x81
 1438 01b3 02       		.uleb128 0x2
 1439 01b4 91       		.byte	0x91
 1440 01b5 74       		.sleb128 -12
 1441 01b6 00       		.byte	0
 1442 01b7 0F       		.uleb128 0xf
 1443 01b8 66040000 		.4byte	.LASF31
 1444 01bc 01       		.byte	0x1
 1445 01bd F801     		.2byte	0x1f8
 1446 01bf 8C000000 		.4byte	0x8c
 1447 01c3 00000000 		.4byte	.LFB7
 1448 01c7 44000000 		.4byte	.LFE7-.LFB7
 1449 01cb 01       		.uleb128 0x1
 1450 01cc 9C       		.byte	0x9c
 1451 01cd F0010000 		.4byte	0x1f0
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 42


 1452 01d1 0D       		.uleb128 0xd
 1453 01d2 81030000 		.4byte	.LASF33
 1454 01d6 01       		.byte	0x1
 1455 01d7 F801     		.2byte	0x1f8
 1456 01d9 81000000 		.4byte	0x81
 1457 01dd 02       		.uleb128 0x2
 1458 01de 91       		.byte	0x91
 1459 01df 6C       		.sleb128 -20
 1460 01e0 0E       		.uleb128 0xe
 1461 01e1 46040000 		.4byte	.LASF34
 1462 01e5 01       		.byte	0x1
 1463 01e6 FA01     		.2byte	0x1fa
 1464 01e8 81000000 		.4byte	0x81
 1465 01ec 02       		.uleb128 0x2
 1466 01ed 91       		.byte	0x91
 1467 01ee 74       		.sleb128 -12
 1468 01ef 00       		.byte	0
 1469 01f0 10       		.uleb128 0x10
 1470 01f1 61030000 		.4byte	.LASF36
 1471 01f5 01       		.byte	0x1
 1472 01f6 2502     		.2byte	0x225
 1473 01f8 00000000 		.4byte	.LFB8
 1474 01fc 1C000000 		.4byte	.LFE8-.LFB8
 1475 0200 01       		.uleb128 0x1
 1476 0201 9C       		.byte	0x9c
 1477 0202 16020000 		.4byte	0x216
 1478 0206 0D       		.uleb128 0xd
 1479 0207 A4030000 		.4byte	.LASF37
 1480 020b 01       		.byte	0x1
 1481 020c 2502     		.2byte	0x225
 1482 020e 81000000 		.4byte	0x81
 1483 0212 02       		.uleb128 0x2
 1484 0213 91       		.byte	0x91
 1485 0214 74       		.sleb128 -12
 1486 0215 00       		.byte	0
 1487 0216 10       		.uleb128 0x10
 1488 0217 75000000 		.4byte	.LASF38
 1489 021b 01       		.byte	0x1
 1490 021c 5102     		.2byte	0x251
 1491 021e 00000000 		.4byte	.LFB9
 1492 0222 30000000 		.4byte	.LFE9-.LFB9
 1493 0226 01       		.uleb128 0x1
 1494 0227 9C       		.byte	0x9c
 1495 0228 3C020000 		.4byte	0x23c
 1496 022c 0D       		.uleb128 0xd
 1497 022d 5C020000 		.4byte	.LASF39
 1498 0231 01       		.byte	0x1
 1499 0232 5102     		.2byte	0x251
 1500 0234 81000000 		.4byte	0x81
 1501 0238 02       		.uleb128 0x2
 1502 0239 91       		.byte	0x91
 1503 023a 74       		.sleb128 -12
 1504 023b 00       		.byte	0
 1505 023c 10       		.uleb128 0x10
 1506 023d A3010000 		.4byte	.LASF40
 1507 0241 01       		.byte	0x1
 1508 0242 6602     		.2byte	0x266
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 43


 1509 0244 00000000 		.4byte	.LFB10
 1510 0248 2C000000 		.4byte	.LFE10-.LFB10
 1511 024c 01       		.uleb128 0x1
 1512 024d 9C       		.byte	0x9c
 1513 024e 62020000 		.4byte	0x262
 1514 0252 0D       		.uleb128 0xd
 1515 0253 6B000000 		.4byte	.LASF41
 1516 0257 01       		.byte	0x1
 1517 0258 6602     		.2byte	0x266
 1518 025a 81000000 		.4byte	0x81
 1519 025e 02       		.uleb128 0x2
 1520 025f 91       		.byte	0x91
 1521 0260 74       		.sleb128 -12
 1522 0261 00       		.byte	0
 1523 0262 10       		.uleb128 0x10
 1524 0263 E5030000 		.4byte	.LASF42
 1525 0267 01       		.byte	0x1
 1526 0268 7E02     		.2byte	0x27e
 1527 026a 00000000 		.4byte	.LFB11
 1528 026e 1C000000 		.4byte	.LFE11-.LFB11
 1529 0272 01       		.uleb128 0x1
 1530 0273 9C       		.byte	0x9c
 1531 0274 88020000 		.4byte	0x288
 1532 0278 0D       		.uleb128 0xd
 1533 0279 A4030000 		.4byte	.LASF37
 1534 027d 01       		.byte	0x1
 1535 027e 7E02     		.2byte	0x27e
 1536 0280 81000000 		.4byte	0x81
 1537 0284 02       		.uleb128 0x2
 1538 0285 91       		.byte	0x91
 1539 0286 74       		.sleb128 -12
 1540 0287 00       		.byte	0
 1541 0288 10       		.uleb128 0x10
 1542 0289 85020000 		.4byte	.LASF43
 1543 028d 01       		.byte	0x1
 1544 028e 9502     		.2byte	0x295
 1545 0290 00000000 		.4byte	.LFB12
 1546 0294 1C000000 		.4byte	.LFE12-.LFB12
 1547 0298 01       		.uleb128 0x1
 1548 0299 9C       		.byte	0x9c
 1549 029a AE020000 		.4byte	0x2ae
 1550 029e 0D       		.uleb128 0xd
 1551 029f A4030000 		.4byte	.LASF37
 1552 02a3 01       		.byte	0x1
 1553 02a4 9502     		.2byte	0x295
 1554 02a6 81000000 		.4byte	0x81
 1555 02aa 02       		.uleb128 0x2
 1556 02ab 91       		.byte	0x91
 1557 02ac 74       		.sleb128 -12
 1558 02ad 00       		.byte	0
 1559 02ae 11       		.uleb128 0x11
 1560 02af E4020000 		.4byte	.LASF44
 1561 02b3 01       		.byte	0x1
 1562 02b4 B102     		.2byte	0x2b1
 1563 02b6 00000000 		.4byte	.LFB13
 1564 02ba 30000000 		.4byte	.LFE13-.LFB13
 1565 02be 01       		.uleb128 0x1
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 44


 1566 02bf 9C       		.byte	0x9c
 1567 02c0 E3020000 		.4byte	0x2e3
 1568 02c4 0D       		.uleb128 0xd
 1569 02c5 81030000 		.4byte	.LASF33
 1570 02c9 01       		.byte	0x1
 1571 02ca B102     		.2byte	0x2b1
 1572 02cc 81000000 		.4byte	0x81
 1573 02d0 02       		.uleb128 0x2
 1574 02d1 91       		.byte	0x91
 1575 02d2 74       		.sleb128 -12
 1576 02d3 0D       		.uleb128 0xd
 1577 02d4 5E000000 		.4byte	.LASF45
 1578 02d8 01       		.byte	0x1
 1579 02d9 B102     		.2byte	0x2b1
 1580 02db 8C000000 		.4byte	0x8c
 1581 02df 02       		.uleb128 0x2
 1582 02e0 91       		.byte	0x91
 1583 02e1 72       		.sleb128 -14
 1584 02e2 00       		.byte	0
 1585 02e3 11       		.uleb128 0x11
 1586 02e4 46020000 		.4byte	.LASF46
 1587 02e8 01       		.byte	0x1
 1588 02e9 D302     		.2byte	0x2d3
 1589 02eb 00000000 		.4byte	.LFB14
 1590 02ef 2C000000 		.4byte	.LFE14-.LFB14
 1591 02f3 01       		.uleb128 0x1
 1592 02f4 9C       		.byte	0x9c
 1593 02f5 18030000 		.4byte	0x318
 1594 02f9 0D       		.uleb128 0xd
 1595 02fa 81030000 		.4byte	.LASF33
 1596 02fe 01       		.byte	0x1
 1597 02ff D302     		.2byte	0x2d3
 1598 0301 81000000 		.4byte	0x81
 1599 0305 02       		.uleb128 0x2
 1600 0306 91       		.byte	0x91
 1601 0307 74       		.sleb128 -12
 1602 0308 0D       		.uleb128 0xd
 1603 0309 65020000 		.4byte	.LASF47
 1604 030d 01       		.byte	0x1
 1605 030e D302     		.2byte	0x2d3
 1606 0310 97000000 		.4byte	0x97
 1607 0314 02       		.uleb128 0x2
 1608 0315 91       		.byte	0x91
 1609 0316 70       		.sleb128 -16
 1610 0317 00       		.byte	0
 1611 0318 0F       		.uleb128 0xf
 1612 0319 AF030000 		.4byte	.LASF48
 1613 031d 01       		.byte	0x1
 1614 031e F402     		.2byte	0x2f4
 1615 0320 8C000000 		.4byte	0x8c
 1616 0324 00000000 		.4byte	.LFB15
 1617 0328 A4000000 		.4byte	.LFE15-.LFB15
 1618 032c 01       		.uleb128 0x1
 1619 032d 9C       		.byte	0x9c
 1620 032e 60030000 		.4byte	0x360
 1621 0332 0D       		.uleb128 0xd
 1622 0333 81030000 		.4byte	.LASF33
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 45


 1623 0337 01       		.byte	0x1
 1624 0338 F402     		.2byte	0x2f4
 1625 033a 81000000 		.4byte	0x81
 1626 033e 02       		.uleb128 0x2
 1627 033f 91       		.byte	0x91
 1628 0340 6C       		.sleb128 -20
 1629 0341 0D       		.uleb128 0xd
 1630 0342 74020000 		.4byte	.LASF49
 1631 0346 01       		.byte	0x1
 1632 0347 F402     		.2byte	0x2f4
 1633 0349 8C000000 		.4byte	0x8c
 1634 034d 02       		.uleb128 0x2
 1635 034e 91       		.byte	0x91
 1636 034f 6A       		.sleb128 -22
 1637 0350 0E       		.uleb128 0xe
 1638 0351 86030000 		.4byte	.LASF50
 1639 0355 01       		.byte	0x1
 1640 0356 F602     		.2byte	0x2f6
 1641 0358 8C000000 		.4byte	0x8c
 1642 035c 02       		.uleb128 0x2
 1643 035d 91       		.byte	0x91
 1644 035e 76       		.sleb128 -10
 1645 035f 00       		.byte	0
 1646 0360 0F       		.uleb128 0xf
 1647 0361 D6000000 		.4byte	.LASF51
 1648 0365 01       		.byte	0x1
 1649 0366 2A03     		.2byte	0x32a
 1650 0368 97000000 		.4byte	0x97
 1651 036c 00000000 		.4byte	.LFB16
 1652 0370 98000000 		.4byte	.LFE16-.LFB16
 1653 0374 01       		.uleb128 0x1
 1654 0375 9C       		.byte	0x9c
 1655 0376 A8030000 		.4byte	0x3a8
 1656 037a 0D       		.uleb128 0xd
 1657 037b 81030000 		.4byte	.LASF33
 1658 037f 01       		.byte	0x1
 1659 0380 2A03     		.2byte	0x32a
 1660 0382 81000000 		.4byte	0x81
 1661 0386 02       		.uleb128 0x2
 1662 0387 91       		.byte	0x91
 1663 0388 64       		.sleb128 -28
 1664 0389 0D       		.uleb128 0xd
 1665 038a 74020000 		.4byte	.LASF49
 1666 038e 01       		.byte	0x1
 1667 038f 2A03     		.2byte	0x32a
 1668 0391 8C000000 		.4byte	0x8c
 1669 0395 02       		.uleb128 0x2
 1670 0396 91       		.byte	0x91
 1671 0397 62       		.sleb128 -30
 1672 0398 0E       		.uleb128 0xe
 1673 0399 AD000000 		.4byte	.LASF52
 1674 039d 01       		.byte	0x1
 1675 039e 2C03     		.2byte	0x32c
 1676 03a0 BB000000 		.4byte	0xbb
 1677 03a4 02       		.uleb128 0x2
 1678 03a5 91       		.byte	0x91
 1679 03a6 68       		.sleb128 -24
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 46


 1680 03a7 00       		.byte	0
 1681 03a8 0F       		.uleb128 0xf
 1682 03a9 29020000 		.4byte	.LASF53
 1683 03ad 01       		.byte	0x1
 1684 03ae 5703     		.2byte	0x357
 1685 03b0 A2000000 		.4byte	0xa2
 1686 03b4 00000000 		.4byte	.LFB17
 1687 03b8 80000000 		.4byte	.LFE17-.LFB17
 1688 03bc 01       		.uleb128 0x1
 1689 03bd 9C       		.byte	0x9c
 1690 03be F0030000 		.4byte	0x3f0
 1691 03c2 0D       		.uleb128 0xd
 1692 03c3 81030000 		.4byte	.LASF33
 1693 03c7 01       		.byte	0x1
 1694 03c8 5703     		.2byte	0x357
 1695 03ca 81000000 		.4byte	0x81
 1696 03ce 02       		.uleb128 0x2
 1697 03cf 91       		.byte	0x91
 1698 03d0 64       		.sleb128 -28
 1699 03d1 0D       		.uleb128 0xd
 1700 03d2 74020000 		.4byte	.LASF49
 1701 03d6 01       		.byte	0x1
 1702 03d7 5703     		.2byte	0x357
 1703 03d9 8C000000 		.4byte	0x8c
 1704 03dd 02       		.uleb128 0x2
 1705 03de 91       		.byte	0x91
 1706 03df 62       		.sleb128 -30
 1707 03e0 0E       		.uleb128 0xe
 1708 03e1 7B030000 		.4byte	.LASF54
 1709 03e5 01       		.byte	0x1
 1710 03e6 5903     		.2byte	0x359
 1711 03e8 A2000000 		.4byte	0xa2
 1712 03ec 02       		.uleb128 0x2
 1713 03ed 91       		.byte	0x91
 1714 03ee 6C       		.sleb128 -20
 1715 03ef 00       		.byte	0
 1716 03f0 12       		.uleb128 0x12
 1717 03f1 81000000 		.4byte	0x81
 1718 03f5 00040000 		.4byte	0x400
 1719 03f9 13       		.uleb128 0x13
 1720 03fa DE000000 		.4byte	0xde
 1721 03fe 00       		.byte	0
 1722 03ff 00       		.byte	0
 1723 0400 09       		.uleb128 0x9
 1724 0401 F1010000 		.4byte	.LASF55
 1725 0405 01       		.byte	0x1
 1726 0406 21       		.byte	0x21
 1727 0407 11040000 		.4byte	0x411
 1728 040b 05       		.uleb128 0x5
 1729 040c 03       		.byte	0x3
 1730 040d 00000000 		.4byte	ADC_SAR_Seq_1_channelsConfig
 1731 0411 14       		.uleb128 0x14
 1732 0412 F0030000 		.4byte	0x3f0
 1733 0416 15       		.uleb128 0x15
 1734 0417 B4000000 		.4byte	.LASF56
 1735 041b 01       		.byte	0x1
 1736 041c 18       		.byte	0x18
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 47


 1737 041d 6B000000 		.4byte	0x6b
 1738 0421 05       		.uleb128 0x5
 1739 0422 03       		.byte	0x3
 1740 0423 00000000 		.4byte	ADC_SAR_Seq_1_initVar
 1741 0427 12       		.uleb128 0x12
 1742 0428 8C000000 		.4byte	0x8c
 1743 042c 37040000 		.4byte	0x437
 1744 0430 13       		.uleb128 0x13
 1745 0431 DE000000 		.4byte	0xde
 1746 0435 00       		.byte	0
 1747 0436 00       		.byte	0
 1748 0437 15       		.uleb128 0x15
 1749 0438 49000000 		.4byte	.LASF57
 1750 043c 01       		.byte	0x1
 1751 043d 19       		.byte	0x19
 1752 043e 48040000 		.4byte	0x448
 1753 0442 05       		.uleb128 0x5
 1754 0443 03       		.byte	0x3
 1755 0444 00000000 		.4byte	ADC_SAR_Seq_1_offset
 1756 0448 06       		.uleb128 0x6
 1757 0449 27040000 		.4byte	0x427
 1758 044d 12       		.uleb128 0x12
 1759 044e 97000000 		.4byte	0x97
 1760 0452 5D040000 		.4byte	0x45d
 1761 0456 13       		.uleb128 0x13
 1762 0457 DE000000 		.4byte	0xde
 1763 045b 00       		.byte	0
 1764 045c 00       		.byte	0
 1765 045d 15       		.uleb128 0x15
 1766 045e 8F000000 		.4byte	.LASF58
 1767 0462 01       		.byte	0x1
 1768 0463 1A       		.byte	0x1a
 1769 0464 6E040000 		.4byte	0x46e
 1770 0468 05       		.uleb128 0x5
 1771 0469 03       		.byte	0x3
 1772 046a 00000000 		.4byte	ADC_SAR_Seq_1_countsPer10Volt
 1773 046e 06       		.uleb128 0x6
 1774 046f 4D040000 		.4byte	0x44d
 1775 0473 00       		.byte	0
 1776              		.section	.debug_abbrev,"",%progbits
 1777              	.Ldebug_abbrev0:
 1778 0000 01       		.uleb128 0x1
 1779 0001 11       		.uleb128 0x11
 1780 0002 01       		.byte	0x1
 1781 0003 25       		.uleb128 0x25
 1782 0004 0E       		.uleb128 0xe
 1783 0005 13       		.uleb128 0x13
 1784 0006 0B       		.uleb128 0xb
 1785 0007 03       		.uleb128 0x3
 1786 0008 0E       		.uleb128 0xe
 1787 0009 1B       		.uleb128 0x1b
 1788 000a 0E       		.uleb128 0xe
 1789 000b 55       		.uleb128 0x55
 1790 000c 17       		.uleb128 0x17
 1791 000d 11       		.uleb128 0x11
 1792 000e 01       		.uleb128 0x1
 1793 000f 10       		.uleb128 0x10
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 48


 1794 0010 17       		.uleb128 0x17
 1795 0011 00       		.byte	0
 1796 0012 00       		.byte	0
 1797 0013 02       		.uleb128 0x2
 1798 0014 24       		.uleb128 0x24
 1799 0015 00       		.byte	0
 1800 0016 0B       		.uleb128 0xb
 1801 0017 0B       		.uleb128 0xb
 1802 0018 3E       		.uleb128 0x3e
 1803 0019 0B       		.uleb128 0xb
 1804 001a 03       		.uleb128 0x3
 1805 001b 0E       		.uleb128 0xe
 1806 001c 00       		.byte	0
 1807 001d 00       		.byte	0
 1808 001e 03       		.uleb128 0x3
 1809 001f 24       		.uleb128 0x24
 1810 0020 00       		.byte	0
 1811 0021 0B       		.uleb128 0xb
 1812 0022 0B       		.uleb128 0xb
 1813 0023 3E       		.uleb128 0x3e
 1814 0024 0B       		.uleb128 0xb
 1815 0025 03       		.uleb128 0x3
 1816 0026 08       		.uleb128 0x8
 1817 0027 00       		.byte	0
 1818 0028 00       		.byte	0
 1819 0029 04       		.uleb128 0x4
 1820 002a 16       		.uleb128 0x16
 1821 002b 00       		.byte	0
 1822 002c 03       		.uleb128 0x3
 1823 002d 0E       		.uleb128 0xe
 1824 002e 3A       		.uleb128 0x3a
 1825 002f 0B       		.uleb128 0xb
 1826 0030 3B       		.uleb128 0x3b
 1827 0031 0B       		.uleb128 0xb
 1828 0032 49       		.uleb128 0x49
 1829 0033 13       		.uleb128 0x13
 1830 0034 00       		.byte	0
 1831 0035 00       		.byte	0
 1832 0036 05       		.uleb128 0x5
 1833 0037 16       		.uleb128 0x16
 1834 0038 00       		.byte	0
 1835 0039 03       		.uleb128 0x3
 1836 003a 0E       		.uleb128 0xe
 1837 003b 3A       		.uleb128 0x3a
 1838 003c 0B       		.uleb128 0xb
 1839 003d 3B       		.uleb128 0x3b
 1840 003e 05       		.uleb128 0x5
 1841 003f 49       		.uleb128 0x49
 1842 0040 13       		.uleb128 0x13
 1843 0041 00       		.byte	0
 1844 0042 00       		.byte	0
 1845 0043 06       		.uleb128 0x6
 1846 0044 35       		.uleb128 0x35
 1847 0045 00       		.byte	0
 1848 0046 49       		.uleb128 0x49
 1849 0047 13       		.uleb128 0x13
 1850 0048 00       		.byte	0
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 49


 1851 0049 00       		.byte	0
 1852 004a 07       		.uleb128 0x7
 1853 004b 2E       		.uleb128 0x2e
 1854 004c 00       		.byte	0
 1855 004d 3F       		.uleb128 0x3f
 1856 004e 19       		.uleb128 0x19
 1857 004f 03       		.uleb128 0x3
 1858 0050 0E       		.uleb128 0xe
 1859 0051 3A       		.uleb128 0x3a
 1860 0052 0B       		.uleb128 0xb
 1861 0053 3B       		.uleb128 0x3b
 1862 0054 0B       		.uleb128 0xb
 1863 0055 27       		.uleb128 0x27
 1864 0056 19       		.uleb128 0x19
 1865 0057 11       		.uleb128 0x11
 1866 0058 01       		.uleb128 0x1
 1867 0059 12       		.uleb128 0x12
 1868 005a 06       		.uleb128 0x6
 1869 005b 40       		.uleb128 0x40
 1870 005c 18       		.uleb128 0x18
 1871 005d 9642     		.uleb128 0x2116
 1872 005f 19       		.uleb128 0x19
 1873 0060 00       		.byte	0
 1874 0061 00       		.byte	0
 1875 0062 08       		.uleb128 0x8
 1876 0063 2E       		.uleb128 0x2e
 1877 0064 01       		.byte	0x1
 1878 0065 3F       		.uleb128 0x3f
 1879 0066 19       		.uleb128 0x19
 1880 0067 03       		.uleb128 0x3
 1881 0068 0E       		.uleb128 0xe
 1882 0069 3A       		.uleb128 0x3a
 1883 006a 0B       		.uleb128 0xb
 1884 006b 3B       		.uleb128 0x3b
 1885 006c 0B       		.uleb128 0xb
 1886 006d 27       		.uleb128 0x27
 1887 006e 19       		.uleb128 0x19
 1888 006f 11       		.uleb128 0x11
 1889 0070 01       		.uleb128 0x1
 1890 0071 12       		.uleb128 0x12
 1891 0072 06       		.uleb128 0x6
 1892 0073 40       		.uleb128 0x40
 1893 0074 18       		.uleb128 0x18
 1894 0075 9642     		.uleb128 0x2116
 1895 0077 19       		.uleb128 0x19
 1896 0078 01       		.uleb128 0x1
 1897 0079 13       		.uleb128 0x13
 1898 007a 00       		.byte	0
 1899 007b 00       		.byte	0
 1900 007c 09       		.uleb128 0x9
 1901 007d 34       		.uleb128 0x34
 1902 007e 00       		.byte	0
 1903 007f 03       		.uleb128 0x3
 1904 0080 0E       		.uleb128 0xe
 1905 0081 3A       		.uleb128 0x3a
 1906 0082 0B       		.uleb128 0xb
 1907 0083 3B       		.uleb128 0x3b
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 50


 1908 0084 0B       		.uleb128 0xb
 1909 0085 49       		.uleb128 0x49
 1910 0086 13       		.uleb128 0x13
 1911 0087 02       		.uleb128 0x2
 1912 0088 18       		.uleb128 0x18
 1913 0089 00       		.byte	0
 1914 008a 00       		.byte	0
 1915 008b 0A       		.uleb128 0xa
 1916 008c 2E       		.uleb128 0x2e
 1917 008d 00       		.byte	0
 1918 008e 3F       		.uleb128 0x3f
 1919 008f 19       		.uleb128 0x19
 1920 0090 03       		.uleb128 0x3
 1921 0091 0E       		.uleb128 0xe
 1922 0092 3A       		.uleb128 0x3a
 1923 0093 0B       		.uleb128 0xb
 1924 0094 3B       		.uleb128 0x3b
 1925 0095 05       		.uleb128 0x5
 1926 0096 27       		.uleb128 0x27
 1927 0097 19       		.uleb128 0x19
 1928 0098 11       		.uleb128 0x11
 1929 0099 01       		.uleb128 0x1
 1930 009a 12       		.uleb128 0x12
 1931 009b 06       		.uleb128 0x6
 1932 009c 40       		.uleb128 0x40
 1933 009d 18       		.uleb128 0x18
 1934 009e 9642     		.uleb128 0x2116
 1935 00a0 19       		.uleb128 0x19
 1936 00a1 00       		.byte	0
 1937 00a2 00       		.byte	0
 1938 00a3 0B       		.uleb128 0xb
 1939 00a4 2E       		.uleb128 0x2e
 1940 00a5 00       		.byte	0
 1941 00a6 3F       		.uleb128 0x3f
 1942 00a7 19       		.uleb128 0x19
 1943 00a8 03       		.uleb128 0x3
 1944 00a9 0E       		.uleb128 0xe
 1945 00aa 3A       		.uleb128 0x3a
 1946 00ab 0B       		.uleb128 0xb
 1947 00ac 3B       		.uleb128 0x3b
 1948 00ad 05       		.uleb128 0x5
 1949 00ae 27       		.uleb128 0x27
 1950 00af 19       		.uleb128 0x19
 1951 00b0 11       		.uleb128 0x11
 1952 00b1 01       		.uleb128 0x1
 1953 00b2 12       		.uleb128 0x12
 1954 00b3 06       		.uleb128 0x6
 1955 00b4 40       		.uleb128 0x40
 1956 00b5 18       		.uleb128 0x18
 1957 00b6 9742     		.uleb128 0x2117
 1958 00b8 19       		.uleb128 0x19
 1959 00b9 00       		.byte	0
 1960 00ba 00       		.byte	0
 1961 00bb 0C       		.uleb128 0xc
 1962 00bc 2E       		.uleb128 0x2e
 1963 00bd 01       		.byte	0x1
 1964 00be 3F       		.uleb128 0x3f
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 51


 1965 00bf 19       		.uleb128 0x19
 1966 00c0 03       		.uleb128 0x3
 1967 00c1 0E       		.uleb128 0xe
 1968 00c2 3A       		.uleb128 0x3a
 1969 00c3 0B       		.uleb128 0xb
 1970 00c4 3B       		.uleb128 0x3b
 1971 00c5 05       		.uleb128 0x5
 1972 00c6 27       		.uleb128 0x27
 1973 00c7 19       		.uleb128 0x19
 1974 00c8 49       		.uleb128 0x49
 1975 00c9 13       		.uleb128 0x13
 1976 00ca 11       		.uleb128 0x11
 1977 00cb 01       		.uleb128 0x1
 1978 00cc 12       		.uleb128 0x12
 1979 00cd 06       		.uleb128 0x6
 1980 00ce 40       		.uleb128 0x40
 1981 00cf 18       		.uleb128 0x18
 1982 00d0 9742     		.uleb128 0x2117
 1983 00d2 19       		.uleb128 0x19
 1984 00d3 01       		.uleb128 0x1
 1985 00d4 13       		.uleb128 0x13
 1986 00d5 00       		.byte	0
 1987 00d6 00       		.byte	0
 1988 00d7 0D       		.uleb128 0xd
 1989 00d8 05       		.uleb128 0x5
 1990 00d9 00       		.byte	0
 1991 00da 03       		.uleb128 0x3
 1992 00db 0E       		.uleb128 0xe
 1993 00dc 3A       		.uleb128 0x3a
 1994 00dd 0B       		.uleb128 0xb
 1995 00de 3B       		.uleb128 0x3b
 1996 00df 05       		.uleb128 0x5
 1997 00e0 49       		.uleb128 0x49
 1998 00e1 13       		.uleb128 0x13
 1999 00e2 02       		.uleb128 0x2
 2000 00e3 18       		.uleb128 0x18
 2001 00e4 00       		.byte	0
 2002 00e5 00       		.byte	0
 2003 00e6 0E       		.uleb128 0xe
 2004 00e7 34       		.uleb128 0x34
 2005 00e8 00       		.byte	0
 2006 00e9 03       		.uleb128 0x3
 2007 00ea 0E       		.uleb128 0xe
 2008 00eb 3A       		.uleb128 0x3a
 2009 00ec 0B       		.uleb128 0xb
 2010 00ed 3B       		.uleb128 0x3b
 2011 00ee 05       		.uleb128 0x5
 2012 00ef 49       		.uleb128 0x49
 2013 00f0 13       		.uleb128 0x13
 2014 00f1 02       		.uleb128 0x2
 2015 00f2 18       		.uleb128 0x18
 2016 00f3 00       		.byte	0
 2017 00f4 00       		.byte	0
 2018 00f5 0F       		.uleb128 0xf
 2019 00f6 2E       		.uleb128 0x2e
 2020 00f7 01       		.byte	0x1
 2021 00f8 3F       		.uleb128 0x3f
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 52


 2022 00f9 19       		.uleb128 0x19
 2023 00fa 03       		.uleb128 0x3
 2024 00fb 0E       		.uleb128 0xe
 2025 00fc 3A       		.uleb128 0x3a
 2026 00fd 0B       		.uleb128 0xb
 2027 00fe 3B       		.uleb128 0x3b
 2028 00ff 05       		.uleb128 0x5
 2029 0100 27       		.uleb128 0x27
 2030 0101 19       		.uleb128 0x19
 2031 0102 49       		.uleb128 0x49
 2032 0103 13       		.uleb128 0x13
 2033 0104 11       		.uleb128 0x11
 2034 0105 01       		.uleb128 0x1
 2035 0106 12       		.uleb128 0x12
 2036 0107 06       		.uleb128 0x6
 2037 0108 40       		.uleb128 0x40
 2038 0109 18       		.uleb128 0x18
 2039 010a 9642     		.uleb128 0x2116
 2040 010c 19       		.uleb128 0x19
 2041 010d 01       		.uleb128 0x1
 2042 010e 13       		.uleb128 0x13
 2043 010f 00       		.byte	0
 2044 0110 00       		.byte	0
 2045 0111 10       		.uleb128 0x10
 2046 0112 2E       		.uleb128 0x2e
 2047 0113 01       		.byte	0x1
 2048 0114 3F       		.uleb128 0x3f
 2049 0115 19       		.uleb128 0x19
 2050 0116 03       		.uleb128 0x3
 2051 0117 0E       		.uleb128 0xe
 2052 0118 3A       		.uleb128 0x3a
 2053 0119 0B       		.uleb128 0xb
 2054 011a 3B       		.uleb128 0x3b
 2055 011b 05       		.uleb128 0x5
 2056 011c 27       		.uleb128 0x27
 2057 011d 19       		.uleb128 0x19
 2058 011e 11       		.uleb128 0x11
 2059 011f 01       		.uleb128 0x1
 2060 0120 12       		.uleb128 0x12
 2061 0121 06       		.uleb128 0x6
 2062 0122 40       		.uleb128 0x40
 2063 0123 18       		.uleb128 0x18
 2064 0124 9742     		.uleb128 0x2117
 2065 0126 19       		.uleb128 0x19
 2066 0127 01       		.uleb128 0x1
 2067 0128 13       		.uleb128 0x13
 2068 0129 00       		.byte	0
 2069 012a 00       		.byte	0
 2070 012b 11       		.uleb128 0x11
 2071 012c 2E       		.uleb128 0x2e
 2072 012d 01       		.byte	0x1
 2073 012e 3F       		.uleb128 0x3f
 2074 012f 19       		.uleb128 0x19
 2075 0130 03       		.uleb128 0x3
 2076 0131 0E       		.uleb128 0xe
 2077 0132 3A       		.uleb128 0x3a
 2078 0133 0B       		.uleb128 0xb
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 53


 2079 0134 3B       		.uleb128 0x3b
 2080 0135 05       		.uleb128 0x5
 2081 0136 27       		.uleb128 0x27
 2082 0137 19       		.uleb128 0x19
 2083 0138 11       		.uleb128 0x11
 2084 0139 01       		.uleb128 0x1
 2085 013a 12       		.uleb128 0x12
 2086 013b 06       		.uleb128 0x6
 2087 013c 40       		.uleb128 0x40
 2088 013d 18       		.uleb128 0x18
 2089 013e 9642     		.uleb128 0x2116
 2090 0140 19       		.uleb128 0x19
 2091 0141 01       		.uleb128 0x1
 2092 0142 13       		.uleb128 0x13
 2093 0143 00       		.byte	0
 2094 0144 00       		.byte	0
 2095 0145 12       		.uleb128 0x12
 2096 0146 01       		.uleb128 0x1
 2097 0147 01       		.byte	0x1
 2098 0148 49       		.uleb128 0x49
 2099 0149 13       		.uleb128 0x13
 2100 014a 01       		.uleb128 0x1
 2101 014b 13       		.uleb128 0x13
 2102 014c 00       		.byte	0
 2103 014d 00       		.byte	0
 2104 014e 13       		.uleb128 0x13
 2105 014f 21       		.uleb128 0x21
 2106 0150 00       		.byte	0
 2107 0151 49       		.uleb128 0x49
 2108 0152 13       		.uleb128 0x13
 2109 0153 2F       		.uleb128 0x2f
 2110 0154 0B       		.uleb128 0xb
 2111 0155 00       		.byte	0
 2112 0156 00       		.byte	0
 2113 0157 14       		.uleb128 0x14
 2114 0158 26       		.uleb128 0x26
 2115 0159 00       		.byte	0
 2116 015a 49       		.uleb128 0x49
 2117 015b 13       		.uleb128 0x13
 2118 015c 00       		.byte	0
 2119 015d 00       		.byte	0
 2120 015e 15       		.uleb128 0x15
 2121 015f 34       		.uleb128 0x34
 2122 0160 00       		.byte	0
 2123 0161 03       		.uleb128 0x3
 2124 0162 0E       		.uleb128 0xe
 2125 0163 3A       		.uleb128 0x3a
 2126 0164 0B       		.uleb128 0xb
 2127 0165 3B       		.uleb128 0x3b
 2128 0166 0B       		.uleb128 0xb
 2129 0167 49       		.uleb128 0x49
 2130 0168 13       		.uleb128 0x13
 2131 0169 3F       		.uleb128 0x3f
 2132 016a 19       		.uleb128 0x19
 2133 016b 02       		.uleb128 0x2
 2134 016c 18       		.uleb128 0x18
 2135 016d 00       		.byte	0
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 54


 2136 016e 00       		.byte	0
 2137 016f 00       		.byte	0
 2138              		.section	.debug_aranges,"",%progbits
 2139 0000 A4000000 		.4byte	0xa4
 2140 0004 0200     		.2byte	0x2
 2141 0006 00000000 		.4byte	.Ldebug_info0
 2142 000a 04       		.byte	0x4
 2143 000b 00       		.byte	0
 2144 000c 0000     		.2byte	0
 2145 000e 0000     		.2byte	0
 2146 0010 00000000 		.4byte	.LFB0
 2147 0014 24000000 		.4byte	.LFE0-.LFB0
 2148 0018 00000000 		.4byte	.LFB1
 2149 001c C4010000 		.4byte	.LFE1-.LFB1
 2150 0020 00000000 		.4byte	.LFB2
 2151 0024 28000000 		.4byte	.LFE2-.LFB2
 2152 0028 00000000 		.4byte	.LFB3
 2153 002c 18000000 		.4byte	.LFE3-.LFB3
 2154 0030 00000000 		.4byte	.LFB4
 2155 0034 1C000000 		.4byte	.LFE4-.LFB4
 2156 0038 00000000 		.4byte	.LFB5
 2157 003c 1C000000 		.4byte	.LFE5-.LFB5
 2158 0040 00000000 		.4byte	.LFB6
 2159 0044 48000000 		.4byte	.LFE6-.LFB6
 2160 0048 00000000 		.4byte	.LFB7
 2161 004c 44000000 		.4byte	.LFE7-.LFB7
 2162 0050 00000000 		.4byte	.LFB8
 2163 0054 1C000000 		.4byte	.LFE8-.LFB8
 2164 0058 00000000 		.4byte	.LFB9
 2165 005c 30000000 		.4byte	.LFE9-.LFB9
 2166 0060 00000000 		.4byte	.LFB10
 2167 0064 2C000000 		.4byte	.LFE10-.LFB10
 2168 0068 00000000 		.4byte	.LFB11
 2169 006c 1C000000 		.4byte	.LFE11-.LFB11
 2170 0070 00000000 		.4byte	.LFB12
 2171 0074 1C000000 		.4byte	.LFE12-.LFB12
 2172 0078 00000000 		.4byte	.LFB13
 2173 007c 30000000 		.4byte	.LFE13-.LFB13
 2174 0080 00000000 		.4byte	.LFB14
 2175 0084 2C000000 		.4byte	.LFE14-.LFB14
 2176 0088 00000000 		.4byte	.LFB15
 2177 008c A4000000 		.4byte	.LFE15-.LFB15
 2178 0090 00000000 		.4byte	.LFB16
 2179 0094 98000000 		.4byte	.LFE16-.LFB16
 2180 0098 00000000 		.4byte	.LFB17
 2181 009c 80000000 		.4byte	.LFE17-.LFB17
 2182 00a0 00000000 		.4byte	0
 2183 00a4 00000000 		.4byte	0
 2184              		.section	.debug_ranges,"",%progbits
 2185              	.Ldebug_ranges0:
 2186 0000 00000000 		.4byte	.LFB0
 2187 0004 24000000 		.4byte	.LFE0
 2188 0008 00000000 		.4byte	.LFB1
 2189 000c C4010000 		.4byte	.LFE1
 2190 0010 00000000 		.4byte	.LFB2
 2191 0014 28000000 		.4byte	.LFE2
 2192 0018 00000000 		.4byte	.LFB3
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 55


 2193 001c 18000000 		.4byte	.LFE3
 2194 0020 00000000 		.4byte	.LFB4
 2195 0024 1C000000 		.4byte	.LFE4
 2196 0028 00000000 		.4byte	.LFB5
 2197 002c 1C000000 		.4byte	.LFE5
 2198 0030 00000000 		.4byte	.LFB6
 2199 0034 48000000 		.4byte	.LFE6
 2200 0038 00000000 		.4byte	.LFB7
 2201 003c 44000000 		.4byte	.LFE7
 2202 0040 00000000 		.4byte	.LFB8
 2203 0044 1C000000 		.4byte	.LFE8
 2204 0048 00000000 		.4byte	.LFB9
 2205 004c 30000000 		.4byte	.LFE9
 2206 0050 00000000 		.4byte	.LFB10
 2207 0054 2C000000 		.4byte	.LFE10
 2208 0058 00000000 		.4byte	.LFB11
 2209 005c 1C000000 		.4byte	.LFE11
 2210 0060 00000000 		.4byte	.LFB12
 2211 0064 1C000000 		.4byte	.LFE12
 2212 0068 00000000 		.4byte	.LFB13
 2213 006c 30000000 		.4byte	.LFE13
 2214 0070 00000000 		.4byte	.LFB14
 2215 0074 2C000000 		.4byte	.LFE14
 2216 0078 00000000 		.4byte	.LFB15
 2217 007c A4000000 		.4byte	.LFE15
 2218 0080 00000000 		.4byte	.LFB16
 2219 0084 98000000 		.4byte	.LFE16
 2220 0088 00000000 		.4byte	.LFB17
 2221 008c 80000000 		.4byte	.LFE17
 2222 0090 00000000 		.4byte	0
 2223 0094 00000000 		.4byte	0
 2224              		.section	.debug_line,"",%progbits
 2225              	.Ldebug_line0:
 2226 0000 88020000 		.section	.debug_str,"MS",%progbits,1
 2226      02004C00 
 2226      00000201 
 2226      FB0E0D00 
 2226      01010101 
 2227              	.LASF28:
 2228 0000 4144435F 		.ascii	"ADC_SAR_Seq_1_StopConvert\000"
 2228      5341525F 
 2228      5365715F 
 2228      315F5374 
 2228      6F70436F 
 2229              	.LASF19:
 2230 001a 72656733 		.ascii	"reg32\000"
 2230      3200
 2231              	.LASF60:
 2232 0020 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC_SAR_Seq_1.c\000"
 2232      6E657261 
 2232      7465645F 
 2232      536F7572 
 2232      63655C50 
 2233              	.LASF57:
 2234 0049 4144435F 		.ascii	"ADC_SAR_Seq_1_offset\000"
 2234      5341525F 
 2234      5365715F 
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 56


 2234      315F6F66 
 2234      66736574 
 2235              	.LASF45:
 2236 005e 6F666673 		.ascii	"offset\000"
 2236      657400
 2237              	.LASF15:
 2238 0065 666C6F61 		.ascii	"float\000"
 2238      7400
 2239              	.LASF41:
 2240 006b 68696768 		.ascii	"highLimit\000"
 2240      4C696D69 
 2240      7400
 2241              	.LASF38:
 2242 0075 4144435F 		.ascii	"ADC_SAR_Seq_1_SetLowLimit\000"
 2242      5341525F 
 2242      5365715F 
 2242      315F5365 
 2242      744C6F77 
 2243              	.LASF58:
 2244 008f 4144435F 		.ascii	"ADC_SAR_Seq_1_countsPer10Volt\000"
 2244      5341525F 
 2244      5365715F 
 2244      315F636F 
 2244      756E7473 
 2245              	.LASF52:
 2246 00ad 75566F6C 		.ascii	"uVolts\000"
 2246      747300
 2247              	.LASF56:
 2248 00b4 4144435F 		.ascii	"ADC_SAR_Seq_1_initVar\000"
 2248      5341525F 
 2248      5365715F 
 2248      315F696E 
 2248      69745661 
 2249              	.LASF18:
 2250 00ca 63686172 		.ascii	"char\000"
 2250      00
 2251              	.LASF29:
 2252 00cf 73746174 		.ascii	"status\000"
 2252      757300
 2253              	.LASF51:
 2254 00d6 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_uVolts\000"
 2254      5341525F 
 2254      5365715F 
 2254      315F436F 
 2254      756E7473 
 2255              	.LASF14:
 2256 00f4 666C6F61 		.ascii	"float32\000"
 2256      74333200 
 2257              	.LASF22:
 2258 00fc 746D7052 		.ascii	"tmpRegVal\000"
 2258      65675661 
 2258      6C00
 2259              	.LASF59:
 2260 0106 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2260      4320342E 
 2260      382E3420 
 2260      32303134 
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 57


 2260      30353236 
 2261 0139 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2261      20726576 
 2261      6973696F 
 2261      6E203231 
 2261      31333538 
 2262 016c 30202D66 		.ascii	"0 -ffunction-sections\000"
 2262      66756E63 
 2262      74696F6E 
 2262      2D736563 
 2262      74696F6E 
 2263              	.LASF1:
 2264 0182 756E7369 		.ascii	"unsigned char\000"
 2264      676E6564 
 2264      20636861 
 2264      7200
 2265              	.LASF26:
 2266 0190 4144435F 		.ascii	"ADC_SAR_Seq_1_Stop\000"
 2266      5341525F 
 2266      5365715F 
 2266      315F5374 
 2266      6F7000
 2267              	.LASF40:
 2268 01a3 4144435F 		.ascii	"ADC_SAR_Seq_1_SetHighLimit\000"
 2268      5341525F 
 2268      5365715F 
 2268      315F5365 
 2268      74486967 
 2269              	.LASF12:
 2270 01be 696E7431 		.ascii	"int16\000"
 2270      3600
 2271              	.LASF5:
 2272 01c4 6C6F6E67 		.ascii	"long unsigned int\000"
 2272      20756E73 
 2272      69676E65 
 2272      6420696E 
 2272      7400
 2273              	.LASF13:
 2274 01d6 696E7433 		.ascii	"int32\000"
 2274      3200
 2275              	.LASF25:
 2276 01dc 4144435F 		.ascii	"ADC_SAR_Seq_1_Enable\000"
 2276      5341525F 
 2276      5365715F 
 2276      315F456E 
 2276      61626C65 
 2277              	.LASF55:
 2278 01f1 4144435F 		.ascii	"ADC_SAR_Seq_1_channelsConfig\000"
 2278      5341525F 
 2278      5365715F 
 2278      315F6368 
 2278      616E6E65 
 2279              	.LASF24:
 2280 020e 4144435F 		.ascii	"ADC_SAR_Seq_1_Start\000"
 2280      5341525F 
 2280      5365715F 
 2280      315F5374 
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 58


 2280      61727400 
 2281              	.LASF16:
 2282 0222 646F7562 		.ascii	"double\000"
 2282      6C6500
 2283              	.LASF53:
 2284 0229 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_Volts\000"
 2284      5341525F 
 2284      5365715F 
 2284      315F436F 
 2284      756E7473 
 2285              	.LASF46:
 2286 0246 4144435F 		.ascii	"ADC_SAR_Seq_1_SetGain\000"
 2286      5341525F 
 2286      5365715F 
 2286      315F5365 
 2286      74476169 
 2287              	.LASF39:
 2288 025c 6C6F774C 		.ascii	"lowLimit\000"
 2288      696D6974 
 2288      00
 2289              	.LASF47:
 2290 0265 61646347 		.ascii	"adcGain\000"
 2290      61696E00 
 2291              	.LASF10:
 2292 026d 75696E74 		.ascii	"uint16\000"
 2292      313600
 2293              	.LASF49:
 2294 0274 61646343 		.ascii	"adcCounts\000"
 2294      6F756E74 
 2294      7300
 2295              	.LASF11:
 2296 027e 75696E74 		.ascii	"uint32\000"
 2296      333200
 2297              	.LASF43:
 2298 0285 4144435F 		.ascii	"ADC_SAR_Seq_1_SetSatMask\000"
 2298      5341525F 
 2298      5365715F 
 2298      315F5365 
 2298      74536174 
 2299              	.LASF8:
 2300 029e 756E7369 		.ascii	"unsigned int\000"
 2300      676E6564 
 2300      20696E74 
 2300      00
 2301              	.LASF27:
 2302 02ab 4144435F 		.ascii	"ADC_SAR_Seq_1_StartConvert\000"
 2302      5341525F 
 2302      5365715F 
 2302      315F5374 
 2302      61727443 
 2303              	.LASF23:
 2304 02c6 636F756E 		.ascii	"counts\000"
 2304      747300
 2305              	.LASF7:
 2306 02cd 6C6F6E67 		.ascii	"long long unsigned int\000"
 2306      206C6F6E 
 2306      6720756E 
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 59


 2306      7369676E 
 2306      65642069 
 2307              	.LASF44:
 2308 02e4 4144435F 		.ascii	"ADC_SAR_Seq_1_SetOffset\000"
 2308      5341525F 
 2308      5365715F 
 2308      315F5365 
 2308      744F6666 
 2309              	.LASF61:
 2310 02fc 433A5C55 		.ascii	"C:\\Users\\mitchell\\Documents\\fsae\\E-Throttle\\E"
 2310      73657273 
 2310      5C6D6974 
 2310      6368656C 
 2310      6C5C446F 
 2311 0329 2D546872 		.ascii	"-Throttle\\ExampleProject1\\Lab Solutions\\Lab 4 AD"
 2311      6F74746C 
 2311      655C4578 
 2311      616D706C 
 2311      6550726F 
 2312 0359 432E6379 		.ascii	"C.cydsn\000"
 2312      64736E00 
 2313              	.LASF36:
 2314 0361 4144435F 		.ascii	"ADC_SAR_Seq_1_SetChanMask\000"
 2314      5341525F 
 2314      5365715F 
 2314      315F5365 
 2314      74436861 
 2315              	.LASF54:
 2316 037b 766F6C74 		.ascii	"volts\000"
 2316      7300
 2317              	.LASF33:
 2318 0381 6368616E 		.ascii	"chan\000"
 2318      00
 2319              	.LASF50:
 2320 0386 6D566F6C 		.ascii	"mVolts\000"
 2320      747300
 2321              	.LASF20:
 2322 038d 73697A65 		.ascii	"sizetype\000"
 2322      74797065 
 2322      00
 2323              	.LASF6:
 2324 0396 6C6F6E67 		.ascii	"long long int\000"
 2324      206C6F6E 
 2324      6720696E 
 2324      7400
 2325              	.LASF37:
 2326 03a4 6D61736B 		.ascii	"mask\000"
 2326      00
 2327              	.LASF21:
 2328 03a9 63684E75 		.ascii	"chNum\000"
 2328      6D00
 2329              	.LASF48:
 2330 03af 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_mVolts\000"
 2330      5341525F 
 2330      5365715F 
 2330      315F436F 
 2330      756E7473 
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccOoaxiE.s 			page 60


 2331              	.LASF32:
 2332 03cd 7265744D 		.ascii	"retMode\000"
 2332      6F646500 
 2333              	.LASF2:
 2334 03d5 73686F72 		.ascii	"short int\000"
 2334      7420696E 
 2334      7400
 2335              	.LASF9:
 2336 03df 75696E74 		.ascii	"uint8\000"
 2336      3800
 2337              	.LASF42:
 2338 03e5 4144435F 		.ascii	"ADC_SAR_Seq_1_SetLimitMask\000"
 2338      5341525F 
 2338      5365715F 
 2338      315F5365 
 2338      744C696D 
 2339              	.LASF4:
 2340 0400 6C6F6E67 		.ascii	"long int\000"
 2340      20696E74 
 2340      00
 2341              	.LASF30:
 2342 0409 4144435F 		.ascii	"ADC_SAR_Seq_1_IsEndConversion\000"
 2342      5341525F 
 2342      5365715F 
 2342      315F4973 
 2342      456E6443 
 2343              	.LASF0:
 2344 0427 7369676E 		.ascii	"signed char\000"
 2344      65642063 
 2344      68617200 
 2345              	.LASF3:
 2346 0433 73686F72 		.ascii	"short unsigned int\000"
 2346      7420756E 
 2346      7369676E 
 2346      65642069 
 2346      6E7400
 2347              	.LASF34:
 2348 0446 72657375 		.ascii	"result\000"
 2348      6C7400
 2349              	.LASF17:
 2350 044d 696E7436 		.ascii	"int64\000"
 2350      3400
 2351              	.LASF35:
 2352 0453 4144435F 		.ascii	"ADC_SAR_Seq_1_Init\000"
 2352      5341525F 
 2352      5365715F 
 2352      315F496E 
 2352      697400
 2353              	.LASF31:
 2354 0466 4144435F 		.ascii	"ADC_SAR_Seq_1_GetResult16\000"
 2354      5341525F 
 2354      5365715F 
 2354      315F4765 
 2354      74526573 
 2355              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
