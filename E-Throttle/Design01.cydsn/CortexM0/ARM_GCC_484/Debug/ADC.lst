ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,8,4
  24              		.comm	ADC_countsPer10Volt,16,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 16
  29              	ADC_channelsConfig:
  30 0000 02050000 		.word	1282
  31 0004 00050000 		.word	1280
  32 0008 00040000 		.word	1024
  33 000c 00040000 		.word	1024
  34              		.section	.text.ADC_Start,"ax",%progbits
  35              		.align	2
  36              		.global	ADC_Start
  37              		.code	16
  38              		.thumb_func
  39              		.type	ADC_Start, %function
  40              	ADC_Start:
  41              	.LFB0:
  42              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.20
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 2


  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000502u, 0x00000500u, 0x00000400u, 0x000004
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  43              		.loc 1 64 0
  44              		.cfi_startproc
  45 0000 80B5     		push	{r7, lr}
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 7, -8
  48              		.cfi_offset 14, -4
  49 0002 00AF     		add	r7, sp, #0
  50              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 3


  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  51              		.loc 1 66 0
  52 0004 064B     		ldr	r3, .L3
  53 0006 1B78     		ldrb	r3, [r3]
  54 0008 002B     		cmp	r3, #0
  55 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  56              		.loc 1 68 0
  57 000c FFF7FEFF 		bl	ADC_Init
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  58              		.loc 1 69 0
  59 0010 034B     		ldr	r3, .L3
  60 0012 0122     		mov	r2, #1
  61 0014 1A70     		strb	r2, [r3]
  62              	.L2:
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  63              		.loc 1 71 0
  64 0016 FFF7FEFF 		bl	ADC_Enable
  72:.\Generated_Source\PSoC4/ADC.c **** }
  65              		.loc 1 72 0
  66 001a BD46     		mov	sp, r7
  67              		@ sp needed
  68 001c 80BD     		pop	{r7, pc}
  69              	.L4:
  70 001e C046     		.align	2
  71              	.L3:
  72 0020 00000000 		.word	ADC_initVar
  73              		.cfi_endproc
  74              	.LFE0:
  75              		.size	ADC_Start, .-ADC_Start
  76              		.section	.text.ADC_Init,"ax",%progbits
  77              		.align	2
  78              		.global	ADC_Init
  79              		.code	16
  80              		.thumb_func
  81              		.type	ADC_Init, %function
  82              	ADC_Init:
  83              	.LFB1:
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 4


  89:.\Generated_Source\PSoC4/ADC.c **** *
  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  84              		.loc 1 95 0
  85              		.cfi_startproc
  86 0000 90B5     		push	{r4, r7, lr}
  87              		.cfi_def_cfa_offset 12
  88              		.cfi_offset 4, -12
  89              		.cfi_offset 7, -8
  90              		.cfi_offset 14, -4
  91 0002 85B0     		sub	sp, sp, #20
  92              		.cfi_def_cfa_offset 32
  93 0004 00AF     		add	r7, sp, #0
  94              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 5


 135:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 9u)
 136:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_9_PIN
 138:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 9u */
 139:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 10u)
 140:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_10_PIN
 142:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 10u */
 143:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 11u)
 144:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_11_PIN
 146:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 11u */
 147:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 12u)
 148:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_12_PIN
 150:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 12u */
 151:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 13u)
 152:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_13_PIN
 154:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 13u */
 155:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 14u)
 156:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_14_PIN
 158:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 14u */
 159:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 15u)
 160:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_15_PIN
 162:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 15u */
 163:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 16u)
 164:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_16_PIN
 166:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 16u */
 167:.\Generated_Source\PSoC4/ADC.c ****         };
 168:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 169:.\Generated_Source\PSoC4/ADC.c **** 
 170:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 171:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 172:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  95              		.loc 1 172 0
  96 0006 0E20     		mov	r0, #14
  97 0008 0321     		mov	r1, #3
  98 000a FFF7FEFF 		bl	CyIntSetPriority
 173:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  99              		.loc 1 173 0
 100 000e 624B     		ldr	r3, .L17
 101 0010 0E20     		mov	r0, #14
 102 0012 191C     		mov	r1, r3
 103 0014 FFF7FEFF 		bl	CyIntSetVector
 174:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 175:.\Generated_Source\PSoC4/ADC.c **** 
 176:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 177:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 104              		.loc 1 177 0
 105 0018 604B     		ldr	r3, .L17+4
 106 001a 0F22     		mov	r2, #15
 107 001c 1A60     		str	r2, [r3]
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 6


 108              		.loc 1 178 0
 109 001e 604B     		ldr	r3, .L17+8
 110 0020 5F4A     		ldr	r2, .L17+8
 111 0022 1168     		ldr	r1, [r2]
 179:.\Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:.\Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 112              		.loc 1 180 0
 113 0024 5F4A     		ldr	r2, .L17+12
 114 0026 1268     		ldr	r2, [r2]
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 115              		.loc 1 178 0
 116 0028 002A     		cmp	r2, #0
 117 002a 01DA     		bge	.L6
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 118              		.loc 1 178 0 is_stmt 0 discriminator 1
 119 002c 5E4A     		ldr	r2, .L17+16
 120 002e 00E0     		b	.L7
 121              	.L6:
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 122              		.loc 1 178 0 discriminator 2
 123 0030 5E4A     		ldr	r2, .L17+20
 124              	.L7:
 178:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 125              		.loc 1 178 0 discriminator 3
 126 0032 0A43     		orr	r2, r1
 127 0034 1A60     		str	r2, [r3]
 181:.\Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 182:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 128              		.loc 1 182 0 is_stmt 1 discriminator 3
 129 0036 5E4B     		ldr	r3, .L17+24
 130 0038 5E4A     		ldr	r2, .L17+28
 131 003a 1A60     		str	r2, [r3]
 183:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 132              		.loc 1 183 0 discriminator 3
 133 003c 5E4B     		ldr	r3, .L17+32
 134 003e 5F4A     		ldr	r2, .L17+36
 135 0040 1A60     		str	r2, [r3]
 184:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 136              		.loc 1 184 0 discriminator 3
 137 0042 5F4B     		ldr	r3, .L17+40
 138 0044 C022     		mov	r2, #192
 139 0046 1206     		lsl	r2, r2, #24
 140 0048 1A60     		str	r2, [r3]
 185:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 141              		.loc 1 185 0 discriminator 3
 142 004a 5E4B     		ldr	r3, .L17+44
 143 004c 5E4A     		ldr	r2, .L17+48
 144 004e 1A60     		str	r2, [r3]
 186:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 145              		.loc 1 186 0 discriminator 3
 146 0050 5E4B     		ldr	r3, .L17+52
 147 0052 5D4A     		ldr	r2, .L17+48
 148 0054 1A60     		str	r2, [r3]
 187:.\Generated_Source\PSoC4/ADC.c ****     
 188:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 190:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 7


 149              		.loc 1 190 0 discriminator 3
 150 0056 5E4B     		ldr	r3, .L17+56
 151 0058 5D4A     		ldr	r2, .L17+56
 152 005a 1268     		ldr	r2, [r2]
 153 005c 8021     		mov	r1, #128
 154 005e 4902     		lsl	r1, r1, #9
 155 0060 0A43     		orr	r2, r1
 156 0062 1A60     		str	r2, [r3]
 191:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 193:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 157              		.loc 1 193 0 discriminator 3
 158 0064 5B4B     		ldr	r3, .L17+60
 159 0066 5B4A     		ldr	r2, .L17+60
 160 0068 1268     		ldr	r2, [r2]
 161 006a 8021     		mov	r1, #128
 162 006c 4902     		lsl	r1, r1, #9
 163 006e 0A43     		orr	r2, r1
 164 0070 1A60     		str	r2, [r3]
 194:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 195:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 196:.\Generated_Source\PSoC4/ADC.c **** 
 197:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 165              		.loc 1 197 0 discriminator 3
 166 0072 594B     		ldr	r3, .L17+64
 167 0074 0022     		mov	r2, #0
 168 0076 1A60     		str	r2, [r3]
 198:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 169              		.loc 1 198 0 discriminator 3
 170 0078 584B     		ldr	r3, .L17+68
 171 007a 0022     		mov	r2, #0
 172 007c 1A60     		str	r2, [r3]
 199:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 173              		.loc 1 199 0 discriminator 3
 174 007e 584B     		ldr	r3, .L17+72
 175 0080 0122     		mov	r2, #1
 176 0082 1A60     		str	r2, [r3]
 200:.\Generated_Source\PSoC4/ADC.c **** 
 201:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 202:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 177              		.loc 1 202 0 discriminator 3
 178 0084 574B     		ldr	r3, .L17+76
 179 0086 0222     		mov	r2, #2
 180 0088 1A60     		str	r2, [r3]
 203:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 204:.\Generated_Source\PSoC4/ADC.c **** 
 205:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 206:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 181              		.loc 1 206 0 discriminator 3
 182 008a 574B     		ldr	r3, .L17+80
 183 008c 1B68     		ldr	r3, [r3]
 184 008e 7B60     		str	r3, [r7, #4]
 207:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 185              		.loc 1 207 0 discriminator 3
 186 0090 7A68     		ldr	r2, [r7, #4]
 187 0092 564B     		ldr	r3, .L17+84
 188 0094 1340     		and	r3, r2
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 8


 189 0096 7B60     		str	r3, [r7, #4]
 208:.\Generated_Source\PSoC4/ADC.c ****     
 209:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0)
 210:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 211:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 212:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 213:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 190              		.loc 1 213 0 discriminator 3
 191 0098 7B68     		ldr	r3, [r7, #4]
 192 009a 0122     		mov	r2, #1
 193 009c 1343     		orr	r3, r2
 194 009e 7B60     		str	r3, [r7, #4]
 214:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 215:.\Generated_Source\PSoC4/ADC.c ****     #else
 216:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 217:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 218:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 219:.\Generated_Source\PSoC4/ADC.c ****         #else
 220:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 221:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 222:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 223:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 224:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_VER0) */
 225:.\Generated_Source\PSoC4/ADC.c ****     
 226:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 195              		.loc 1 226 0 discriminator 3
 196 00a0 514B     		ldr	r3, .L17+80
 197 00a2 7A68     		ldr	r2, [r7, #4]
 198 00a4 1A60     		str	r2, [r3]
 227:.\Generated_Source\PSoC4/ADC.c **** 
 228:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 229:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 230:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 231:.\Generated_Source\PSoC4/ADC.c **** 
 232:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 199              		.loc 1 232 0 discriminator 3
 200 00a6 0023     		mov	r3, #0
 201 00a8 FB60     		str	r3, [r7, #12]
 202 00aa 6EE0     		b	.L8
 203              	.L16:
 233:.\Generated_Source\PSoC4/ADC.c ****     {
 234:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 204              		.loc 1 234 0
 205 00ac 504B     		ldr	r3, .L17+88
 206 00ae FA68     		ldr	r2, [r7, #12]
 207 00b0 9200     		lsl	r2, r2, #2
 208 00b2 D258     		ldr	r2, [r2, r3]
 209 00b4 DC23     		mov	r3, #220
 210 00b6 9B01     		lsl	r3, r3, #6
 211 00b8 1340     		and	r3, r2
 212 00ba 7B60     		str	r3, [r7, #4]
 235:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 236:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 213              		.loc 1 236 0
 214 00bc 4D4A     		ldr	r2, .L17+92
 215 00be FB68     		ldr	r3, [r7, #12]
 216 00c0 D318     		add	r3, r2, r3
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 9


 217 00c2 1B78     		ldrb	r3, [r3]
 218 00c4 7A68     		ldr	r2, [r7, #4]
 219 00c6 1343     		orr	r3, r2
 220 00c8 7B60     		str	r3, [r7, #4]
 237:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 238:.\Generated_Source\PSoC4/ADC.c ****         
 239:.\Generated_Source\PSoC4/ADC.c ****         
 240:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 243:.\Generated_Source\PSoC4/ADC.c ****         */
 244:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 245:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 246:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 247:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 248:.\Generated_Source\PSoC4/ADC.c **** 
 249:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 250:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 251:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 252:.\Generated_Source\PSoC4/ADC.c ****         {
 253:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 221              		.loc 1 253 0
 222 00ca FB68     		ldr	r3, [r7, #12]
 223 00cc 9B00     		lsl	r3, r3, #2
 224 00ce 4A4A     		ldr	r2, .L17+96
 225 00d0 9B18     		add	r3, r3, r2
 226 00d2 7A68     		ldr	r2, [r7, #4]
 227 00d4 1A60     		str	r2, [r3]
 254:.\Generated_Source\PSoC4/ADC.c **** 
 255:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 228              		.loc 1 255 0
 229 00d6 464B     		ldr	r3, .L17+88
 230 00d8 FA68     		ldr	r2, [r7, #12]
 231 00da 9200     		lsl	r2, r2, #2
 232 00dc D258     		ldr	r2, [r2, r3]
 233 00de 0123     		mov	r3, #1
 234 00e0 1340     		and	r3, r2
 235 00e2 0AD0     		beq	.L9
 256:.\Generated_Source\PSoC4/ADC.c ****             {
 257:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 236              		.loc 1 257 0
 237 00e4 3C4B     		ldr	r3, .L17+64
 238 00e6 3C4A     		ldr	r2, .L17+64
 239 00e8 1168     		ldr	r1, [r2]
 240 00ea FA68     		ldr	r2, [r7, #12]
 241 00ec 0120     		mov	r0, #1
 242 00ee 041C     		mov	r4, r0
 243 00f0 9440     		lsl	r4, r4, r2
 244 00f2 221C     		mov	r2, r4
 245 00f4 92B2     		uxth	r2, r2
 246 00f6 0A43     		orr	r2, r1
 247 00f8 1A60     		str	r2, [r3]
 248              	.L9:
 258:.\Generated_Source\PSoC4/ADC.c ****             }
 259:.\Generated_Source\PSoC4/ADC.c **** 
 260:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 249              		.loc 1 260 0
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 10


 250 00fa 3D4B     		ldr	r3, .L17+88
 251 00fc FA68     		ldr	r2, [r7, #12]
 252 00fe 9200     		lsl	r2, r2, #2
 253 0100 D258     		ldr	r2, [r2, r3]
 254 0102 0223     		mov	r3, #2
 255 0104 1340     		and	r3, r2
 256 0106 0AD0     		beq	.L10
 261:.\Generated_Source\PSoC4/ADC.c ****             {
 262:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 257              		.loc 1 262 0
 258 0108 344B     		ldr	r3, .L17+68
 259 010a 344A     		ldr	r2, .L17+68
 260 010c 1168     		ldr	r1, [r2]
 261 010e FA68     		ldr	r2, [r7, #12]
 262 0110 0120     		mov	r0, #1
 263 0112 041C     		mov	r4, r0
 264 0114 9440     		lsl	r4, r4, r2
 265 0116 221C     		mov	r2, r4
 266 0118 92B2     		uxth	r2, r2
 267 011a 0A43     		orr	r2, r1
 268 011c 1A60     		str	r2, [r3]
 269              	.L10:
 263:.\Generated_Source\PSoC4/ADC.c ****             }
 264:.\Generated_Source\PSoC4/ADC.c ****         }
 265:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 266:.\Generated_Source\PSoC4/ADC.c ****             else
 267:.\Generated_Source\PSoC4/ADC.c ****             {
 268:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 269:.\Generated_Source\PSoC4/ADC.c **** 
 270:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 271:.\Generated_Source\PSoC4/ADC.c ****                 {
 272:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 273:.\Generated_Source\PSoC4/ADC.c ****                 }
 274:.\Generated_Source\PSoC4/ADC.c **** 
 275:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 276:.\Generated_Source\PSoC4/ADC.c ****                 {
 277:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 278:.\Generated_Source\PSoC4/ADC.c ****                 }
 279:.\Generated_Source\PSoC4/ADC.c ****             }
 280:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 281:.\Generated_Source\PSoC4/ADC.c **** 
 282:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 270              		.loc 1 282 0
 271 011e 344B     		ldr	r3, .L17+88
 272 0120 FA68     		ldr	r2, [r7, #12]
 273 0122 9200     		lsl	r2, r2, #2
 274 0124 D258     		ldr	r2, [r2, r3]
 275 0126 8023     		mov	r3, #128
 276 0128 9B00     		lsl	r3, r3, #2
 277 012a 1340     		and	r3, r2
 278 012c 03D0     		beq	.L11
 283:.\Generated_Source\PSoC4/ADC.c ****         {
 284:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 279              		.loc 1 284 0
 280 012e 8023     		mov	r3, #128
 281 0130 5B00     		lsl	r3, r3, #1
 282 0132 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 11


 283 0134 02E0     		b	.L12
 284              	.L11:
 285:.\Generated_Source\PSoC4/ADC.c ****         }
 286:.\Generated_Source\PSoC4/ADC.c ****         else
 287:.\Generated_Source\PSoC4/ADC.c ****         {
 288:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 285              		.loc 1 288 0
 286 0136 8023     		mov	r3, #128
 287 0138 5B01     		lsl	r3, r3, #5
 288 013a BB60     		str	r3, [r7, #8]
 289              	.L12:
 289:.\Generated_Source\PSoC4/ADC.c ****         }
 290:.\Generated_Source\PSoC4/ADC.c **** 
 291:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 290              		.loc 1 291 0
 291 013c 2C4B     		ldr	r3, .L17+88
 292 013e FA68     		ldr	r2, [r7, #12]
 293 0140 9200     		lsl	r2, r2, #2
 294 0142 D258     		ldr	r2, [r2, r3]
 295 0144 8023     		mov	r3, #128
 296 0146 5B00     		lsl	r3, r3, #1
 297 0148 1340     		and	r3, r2
 298 014a 05D1     		bne	.L13
 292:.\Generated_Source\PSoC4/ADC.c ****         {
 293:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 294:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 295:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 297:.\Generated_Source\PSoC4/ADC.c ****             #else
 298:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 299              		.loc 1 298 0
 300 014c 2B4B     		ldr	r3, .L17+100
 301 014e FA68     		ldr	r2, [r7, #12]
 302 0150 5200     		lsl	r2, r2, #1
 303 0152 0021     		mov	r1, #0
 304 0154 D152     		strh	r1, [r2, r3]
 305 0156 04E0     		b	.L14
 306              	.L13:
 299:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 300:.\Generated_Source\PSoC4/ADC.c ****         }
 301:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 302:.\Generated_Source\PSoC4/ADC.c ****         {
 303:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 304:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 306:.\Generated_Source\PSoC4/ADC.c ****             #else
 307:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 307              		.loc 1 307 0
 308 0158 284B     		ldr	r3, .L17+100
 309 015a FA68     		ldr	r2, [r7, #12]
 310 015c 5200     		lsl	r2, r2, #1
 311 015e 0021     		mov	r1, #0
 312 0160 D152     		strh	r1, [r2, r3]
 313              	.L14:
 308:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 309:.\Generated_Source\PSoC4/ADC.c ****         }
 310:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 12


 311:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 314              		.loc 1 311 0
 315 0162 BB68     		ldr	r3, [r7, #8]
 316 0164 264A     		ldr	r2, .L17+104
 317 0166 5343     		mul	r3, r2
 318 0168 8022     		mov	r2, #128
 319 016a D200     		lsl	r2, r2, #3
 320 016c 9B18     		add	r3, r3, r2
 312:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 321              		.loc 1 312 0
 322 016e 002B     		cmp	r3, #0
 323 0170 01DA     		bge	.L15
 324 0172 244C     		ldr	r4, .L17+108
 325 0174 1B19     		add	r3, r3, r4
 326              	.L15:
 327 0176 DB12     		asr	r3, r3, #11
 311:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 328              		.loc 1 311 0
 329 0178 9BB2     		uxth	r3, r3
 330 017a 19B2     		sxth	r1, r3
 331 017c 224B     		ldr	r3, .L17+112
 332 017e FA68     		ldr	r2, [r7, #12]
 333 0180 9200     		lsl	r2, r2, #2
 334 0182 D150     		str	r1, [r2, r3]
 232:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 335              		.loc 1 232 0
 336 0184 FB68     		ldr	r3, [r7, #12]
 337 0186 0133     		add	r3, r3, #1
 338 0188 FB60     		str	r3, [r7, #12]
 339              	.L8:
 232:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 340              		.loc 1 232 0 is_stmt 0 discriminator 1
 341 018a FB68     		ldr	r3, [r7, #12]
 342 018c 032B     		cmp	r3, #3
 343 018e 8DD9     		bls	.L16
 313:.\Generated_Source\PSoC4/ADC.c ****     }
 314:.\Generated_Source\PSoC4/ADC.c **** }
 344              		.loc 1 314 0 is_stmt 1
 345 0190 BD46     		mov	sp, r7
 346 0192 05B0     		add	sp, sp, #20
 347              		@ sp needed
 348 0194 90BD     		pop	{r4, r7, pc}
 349              	.L18:
 350 0196 C046     		.align	2
 351              	.L17:
 352 0198 00000000 		.word	ADC_ISR
 353 019c 20001A40 		.word	1075445792
 354 01a0 00001A40 		.word	1075445760
 355 01a4 80031A40 		.word	1075446656
 356 01a8 40201013 		.word	319823936
 357 01ac 40200013 		.word	318775360
 358 01b0 04001A40 		.word	1075445764
 359 01b4 FC000080 		.word	-2147483396
 360 01b8 18001A40 		.word	1075445784
 361 01bc F401DB05 		.word	98238964
 362 01c0 1C001A40 		.word	1075445788
 363 01c4 10001A40 		.word	1075445776
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 13


 364 01c8 02000200 		.word	131074
 365 01cc 14001A40 		.word	1075445780
 366 01d0 00031A40 		.word	1075446528
 367 01d4 40031A40 		.word	1075446592
 368 01d8 28021A40 		.word	1075446312
 369 01dc 38021A40 		.word	1075446328
 370 01e0 18021A40 		.word	1075446296
 371 01e4 000F1A40 		.word	1075449600
 372 01e8 30001A40 		.word	1075445808
 373 01ec FFFFFFDF 		.word	-536870913
 374 01f0 00000000 		.word	ADC_channelsConfig
 375 01f4 10000000 		.word	ADC_InputsPlacement.4743
 376 01f8 80001A40 		.word	1075445888
 377 01fc 00000000 		.word	ADC_offset
 378 0200 10270000 		.word	10000
 379 0204 FF070000 		.word	2047
 380 0208 00000000 		.word	ADC_countsPer10Volt
 381              		.cfi_endproc
 382              	.LFE1:
 383              		.size	ADC_Init, .-ADC_Init
 384              		.section	.text.ADC_Enable,"ax",%progbits
 385              		.align	2
 386              		.global	ADC_Enable
 387              		.code	16
 388              		.thumb_func
 389              		.type	ADC_Enable, %function
 390              	ADC_Enable:
 391              	.LFB2:
 315:.\Generated_Source\PSoC4/ADC.c **** 
 316:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 317:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 318:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 319:.\Generated_Source\PSoC4/ADC.c **** *
 320:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 321:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 322:.\Generated_Source\PSoC4/ADC.c **** *
 323:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 331:.\Generated_Source\PSoC4/ADC.c **** {
 392              		.loc 1 331 0
 393              		.cfi_startproc
 394 0000 80B5     		push	{r7, lr}
 395              		.cfi_def_cfa_offset 8
 396              		.cfi_offset 7, -8
 397              		.cfi_offset 14, -4
 398 0002 00AF     		add	r7, sp, #0
 399              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 400              		.loc 1 332 0
 401 0004 074B     		ldr	r3, .L21
 402 0006 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 14


 403 0008 002B     		cmp	r3, #0
 404 000a 09DB     		blt	.L19
 333:.\Generated_Source\PSoC4/ADC.c ****     {
 334:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0)
 335:.\Generated_Source\PSoC4/ADC.c **** 
 336:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 337:.\Generated_Source\PSoC4/ADC.c ****             {
 338:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:.\Generated_Source\PSoC4/ADC.c ****             }
 340:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_VER0) */
 341:.\Generated_Source\PSoC4/ADC.c ****         
 342:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 405              		.loc 1 342 0
 406 000c 054B     		ldr	r3, .L21
 407 000e 054A     		ldr	r2, .L21
 408 0010 1268     		ldr	r2, [r2]
 409 0012 8021     		mov	r1, #128
 410 0014 0906     		lsl	r1, r1, #24
 411 0016 0A43     		orr	r2, r1
 412 0018 1A60     		str	r2, [r3]
 343:.\Generated_Source\PSoC4/ADC.c ****         
 344:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 413              		.loc 1 345 0
 414 001a 0A20     		mov	r0, #10
 415 001c FFF7FEFF 		bl	CyDelayUs
 416              	.L19:
 346:.\Generated_Source\PSoC4/ADC.c ****     }
 347:.\Generated_Source\PSoC4/ADC.c **** }
 417              		.loc 1 347 0
 418 0020 BD46     		mov	sp, r7
 419              		@ sp needed
 420 0022 80BD     		pop	{r7, pc}
 421              	.L22:
 422              		.align	2
 423              	.L21:
 424 0024 00001A40 		.word	1075445760
 425              		.cfi_endproc
 426              	.LFE2:
 427              		.size	ADC_Enable, .-ADC_Enable
 428              		.section	.text.ADC_Stop,"ax",%progbits
 429              		.align	2
 430              		.global	ADC_Stop
 431              		.code	16
 432              		.thumb_func
 433              		.type	ADC_Stop, %function
 434              	ADC_Stop:
 435              	.LFB3:
 348:.\Generated_Source\PSoC4/ADC.c **** 
 349:.\Generated_Source\PSoC4/ADC.c **** 
 350:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 351:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 352:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 353:.\Generated_Source\PSoC4/ADC.c **** *
 354:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 355:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:.\Generated_Source\PSoC4/ADC.c **** *  mode.
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 15


 357:.\Generated_Source\PSoC4/ADC.c **** *
 358:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 359:.\Generated_Source\PSoC4/ADC.c **** *  None.
 360:.\Generated_Source\PSoC4/ADC.c **** *
 361:.\Generated_Source\PSoC4/ADC.c **** * Return:
 362:.\Generated_Source\PSoC4/ADC.c **** *  None.
 363:.\Generated_Source\PSoC4/ADC.c **** *
 364:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 365:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 366:.\Generated_Source\PSoC4/ADC.c **** {
 436              		.loc 1 366 0
 437              		.cfi_startproc
 438 0000 80B5     		push	{r7, lr}
 439              		.cfi_def_cfa_offset 8
 440              		.cfi_offset 7, -8
 441              		.cfi_offset 14, -4
 442 0002 00AF     		add	r7, sp, #0
 443              		.cfi_def_cfa_register 7
 367:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 444              		.loc 1 367 0
 445 0004 034B     		ldr	r3, .L24
 446 0006 034A     		ldr	r2, .L24
 447 0008 1268     		ldr	r2, [r2]
 448 000a 5200     		lsl	r2, r2, #1
 449 000c 5208     		lsr	r2, r2, #1
 450 000e 1A60     		str	r2, [r3]
 368:.\Generated_Source\PSoC4/ADC.c **** }
 451              		.loc 1 368 0
 452 0010 BD46     		mov	sp, r7
 453              		@ sp needed
 454 0012 80BD     		pop	{r7, pc}
 455              	.L25:
 456              		.align	2
 457              	.L24:
 458 0014 00001A40 		.word	1075445760
 459              		.cfi_endproc
 460              	.LFE3:
 461              		.size	ADC_Stop, .-ADC_Stop
 462              		.section	.text.ADC_StartConvert,"ax",%progbits
 463              		.align	2
 464              		.global	ADC_StartConvert
 465              		.code	16
 466              		.thumb_func
 467              		.type	ADC_StartConvert, %function
 468              	ADC_StartConvert:
 469              	.LFB4:
 369:.\Generated_Source\PSoC4/ADC.c **** 
 370:.\Generated_Source\PSoC4/ADC.c **** 
 371:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 372:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 373:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 374:.\Generated_Source\PSoC4/ADC.c **** *
 375:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 376:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 377:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 378:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 379:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 16


 380:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 381:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 383:.\Generated_Source\PSoC4/ADC.c **** *
 384:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 385:.\Generated_Source\PSoC4/ADC.c **** *  None.
 386:.\Generated_Source\PSoC4/ADC.c **** *
 387:.\Generated_Source\PSoC4/ADC.c **** * Return:
 388:.\Generated_Source\PSoC4/ADC.c **** *  None.
 389:.\Generated_Source\PSoC4/ADC.c **** *
 390:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 391:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 392:.\Generated_Source\PSoC4/ADC.c **** {
 470              		.loc 1 392 0
 471              		.cfi_startproc
 472 0000 80B5     		push	{r7, lr}
 473              		.cfi_def_cfa_offset 8
 474              		.cfi_offset 7, -8
 475              		.cfi_offset 14, -4
 476 0002 00AF     		add	r7, sp, #0
 477              		.cfi_def_cfa_register 7
 393:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 394:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 478              		.loc 1 394 0
 479 0004 044B     		ldr	r3, .L27
 480 0006 044A     		ldr	r2, .L27
 481 0008 1268     		ldr	r2, [r2]
 482 000a 8021     		mov	r1, #128
 483 000c 4902     		lsl	r1, r1, #9
 484 000e 0A43     		orr	r2, r1
 485 0010 1A60     		str	r2, [r3]
 395:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 396:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 397:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 398:.\Generated_Source\PSoC4/ADC.c **** 
 399:.\Generated_Source\PSoC4/ADC.c **** }
 486              		.loc 1 399 0
 487 0012 BD46     		mov	sp, r7
 488              		@ sp needed
 489 0014 80BD     		pop	{r7, pc}
 490              	.L28:
 491 0016 C046     		.align	2
 492              	.L27:
 493 0018 04001A40 		.word	1075445764
 494              		.cfi_endproc
 495              	.LFE4:
 496              		.size	ADC_StartConvert, .-ADC_StartConvert
 497              		.section	.text.ADC_StopConvert,"ax",%progbits
 498              		.align	2
 499              		.global	ADC_StopConvert
 500              		.code	16
 501              		.thumb_func
 502              		.type	ADC_StopConvert, %function
 503              	ADC_StopConvert:
 504              	.LFB5:
 400:.\Generated_Source\PSoC4/ADC.c **** 
 401:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 17


 402:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 403:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 404:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 405:.\Generated_Source\PSoC4/ADC.c **** *
 406:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 407:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 408:.\Generated_Source\PSoC4/ADC.c **** *
 409:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 410:.\Generated_Source\PSoC4/ADC.c **** *  None.
 411:.\Generated_Source\PSoC4/ADC.c **** *
 412:.\Generated_Source\PSoC4/ADC.c **** * Return:
 413:.\Generated_Source\PSoC4/ADC.c **** *  None.
 414:.\Generated_Source\PSoC4/ADC.c **** *
 415:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 416:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 417:.\Generated_Source\PSoC4/ADC.c **** {
 505              		.loc 1 417 0
 506              		.cfi_startproc
 507 0000 80B5     		push	{r7, lr}
 508              		.cfi_def_cfa_offset 8
 509              		.cfi_offset 7, -8
 510              		.cfi_offset 14, -4
 511 0002 00AF     		add	r7, sp, #0
 512              		.cfi_def_cfa_register 7
 418:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 419:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 513              		.loc 1 419 0
 514 0004 034B     		ldr	r3, .L30
 515 0006 034A     		ldr	r2, .L30
 516 0008 1168     		ldr	r1, [r2]
 517 000a 034A     		ldr	r2, .L30+4
 518 000c 0A40     		and	r2, r1
 519 000e 1A60     		str	r2, [r3]
 420:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 421:.\Generated_Source\PSoC4/ADC.c **** }
 520              		.loc 1 421 0
 521 0010 BD46     		mov	sp, r7
 522              		@ sp needed
 523 0012 80BD     		pop	{r7, pc}
 524              	.L31:
 525              		.align	2
 526              	.L30:
 527 0014 04001A40 		.word	1075445764
 528 0018 FFFFFEFF 		.word	-65537
 529              		.cfi_endproc
 530              	.LFE5:
 531              		.size	ADC_StopConvert, .-ADC_StopConvert
 532              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 533              		.align	2
 534              		.global	ADC_IsEndConversion
 535              		.code	16
 536              		.thumb_func
 537              		.type	ADC_IsEndConversion, %function
 538              	ADC_IsEndConversion:
 539              	.LFB6:
 422:.\Generated_Source\PSoC4/ADC.c **** 
 423:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 18


 424:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 425:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 426:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 427:.\Generated_Source\PSoC4/ADC.c **** *
 428:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 429:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 430:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 432:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 433:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 434:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 435:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 436:.\Generated_Source\PSoC4/ADC.c **** *
 437:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 438:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 440:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 442:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 444:.\Generated_Source\PSoC4/ADC.c **** *
 445:.\Generated_Source\PSoC4/ADC.c **** * Return:
 446:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:.\Generated_Source\PSoC4/ADC.c **** *
 449:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 450:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 451:.\Generated_Source\PSoC4/ADC.c **** {
 540              		.loc 1 451 0
 541              		.cfi_startproc
 542 0000 80B5     		push	{r7, lr}
 543              		.cfi_def_cfa_offset 8
 544              		.cfi_offset 7, -8
 545              		.cfi_offset 14, -4
 546 0002 84B0     		sub	sp, sp, #16
 547              		.cfi_def_cfa_offset 24
 548 0004 00AF     		add	r7, sp, #0
 549              		.cfi_def_cfa_register 7
 550 0006 7860     		str	r0, [r7, #4]
 452:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 551              		.loc 1 452 0
 552 0008 0023     		mov	r3, #0
 553 000a FB60     		str	r3, [r7, #12]
 453:.\Generated_Source\PSoC4/ADC.c **** 
 454:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 554              		.loc 1 454 0
 555 000c 7A68     		ldr	r2, [r7, #4]
 556 000e 0323     		mov	r3, #3
 557 0010 1340     		and	r3, r2
 558 0012 11D0     		beq	.L33
 559              	.L35:
 455:.\Generated_Source\PSoC4/ADC.c ****     {
 456:.\Generated_Source\PSoC4/ADC.c ****         do
 457:.\Generated_Source\PSoC4/ADC.c ****         {
 458:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 560              		.loc 1 458 0 discriminator 1
 561 0014 0B4B     		ldr	r3, .L37
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 19


 562 0016 1A68     		ldr	r2, [r3]
 563 0018 0123     		mov	r3, #1
 564 001a 1340     		and	r3, r2
 565 001c FB60     		str	r3, [r7, #12]
 459:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 566              		.loc 1 459 0 discriminator 1
 567 001e FB68     		ldr	r3, [r7, #12]
 568 0020 002B     		cmp	r3, #0
 569 0022 03D1     		bne	.L34
 570 0024 7A68     		ldr	r2, [r7, #4]
 571 0026 0223     		mov	r3, #2
 572 0028 1340     		and	r3, r2
 573 002a F3D1     		bne	.L35
 574              	.L34:
 460:.\Generated_Source\PSoC4/ADC.c **** 
 461:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 575              		.loc 1 461 0
 576 002c FB68     		ldr	r3, [r7, #12]
 577 002e 002B     		cmp	r3, #0
 578 0030 02D0     		beq	.L33
 462:.\Generated_Source\PSoC4/ADC.c ****         {
 463:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 464:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 579              		.loc 1 464 0
 580 0032 044B     		ldr	r3, .L37
 581 0034 0122     		mov	r2, #1
 582 0036 1A60     		str	r2, [r3]
 583              	.L33:
 465:.\Generated_Source\PSoC4/ADC.c ****         }
 466:.\Generated_Source\PSoC4/ADC.c ****     }
 467:.\Generated_Source\PSoC4/ADC.c **** 
 468:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 469:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 470:.\Generated_Source\PSoC4/ADC.c ****         {
 471:.\Generated_Source\PSoC4/ADC.c ****             do
 472:.\Generated_Source\PSoC4/ADC.c ****             {
 473:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 474:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 475:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 476:.\Generated_Source\PSoC4/ADC.c **** 
 477:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 478:.\Generated_Source\PSoC4/ADC.c ****             {
 479:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 480:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 481:.\Generated_Source\PSoC4/ADC.c ****             }
 482:.\Generated_Source\PSoC4/ADC.c ****         }
 483:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 484:.\Generated_Source\PSoC4/ADC.c **** 
 485:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 584              		.loc 1 485 0
 585 0038 FB68     		ldr	r3, [r7, #12]
 486:.\Generated_Source\PSoC4/ADC.c **** }
 586              		.loc 1 486 0
 587 003a 181C     		mov	r0, r3
 588 003c BD46     		mov	sp, r7
 589 003e 04B0     		add	sp, sp, #16
 590              		@ sp needed
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 20


 591 0040 80BD     		pop	{r7, pc}
 592              	.L38:
 593 0042 C046     		.align	2
 594              	.L37:
 595 0044 10021A40 		.word	1075446288
 596              		.cfi_endproc
 597              	.LFE6:
 598              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 599              		.section	.text.ADC_GetResult16,"ax",%progbits
 600              		.align	2
 601              		.global	ADC_GetResult16
 602              		.code	16
 603              		.thumb_func
 604              		.type	ADC_GetResult16, %function
 605              	ADC_GetResult16:
 606              	.LFB7:
 487:.\Generated_Source\PSoC4/ADC.c **** 
 488:.\Generated_Source\PSoC4/ADC.c **** 
 489:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 490:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 491:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 492:.\Generated_Source\PSoC4/ADC.c **** *
 493:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 494:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 495:.\Generated_Source\PSoC4/ADC.c **** *
 496:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 497:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:.\Generated_Source\PSoC4/ADC.c **** *
 500:.\Generated_Source\PSoC4/ADC.c **** * Return:
 501:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 502:.\Generated_Source\PSoC4/ADC.c **** *
 503:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 504:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 505:.\Generated_Source\PSoC4/ADC.c **** {
 607              		.loc 1 505 0
 608              		.cfi_startproc
 609 0000 80B5     		push	{r7, lr}
 610              		.cfi_def_cfa_offset 8
 611              		.cfi_offset 7, -8
 612              		.cfi_offset 14, -4
 613 0002 84B0     		sub	sp, sp, #16
 614              		.cfi_def_cfa_offset 24
 615 0004 00AF     		add	r7, sp, #0
 616              		.cfi_def_cfa_register 7
 617 0006 7860     		str	r0, [r7, #4]
 506:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 507:.\Generated_Source\PSoC4/ADC.c **** 
 508:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 618              		.loc 1 509 0
 619 0008 7B68     		ldr	r3, [r7, #4]
 620 000a 032B     		cmp	r3, #3
 621 000c 02D9     		bls	.L40
 622              		.loc 1 509 0 is_stmt 0 discriminator 1
 623 000e 0020     		mov	r0, #0
 624 0010 FFF7FEFF 		bl	CyHalt
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 21


 625              	.L40:
 510:.\Generated_Source\PSoC4/ADC.c **** 
 511:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 626              		.loc 1 511 0 is_stmt 1
 627 0014 7B68     		ldr	r3, [r7, #4]
 628 0016 032B     		cmp	r3, #3
 629 0018 08D8     		bhi	.L41
 512:.\Generated_Source\PSoC4/ADC.c ****     {
 513:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 630              		.loc 1 513 0
 631 001a 7B68     		ldr	r3, [r7, #4]
 632 001c 9B00     		lsl	r3, r3, #2
 633 001e 084A     		ldr	r2, .L44
 634 0020 9B18     		add	r3, r3, r2
 635 0022 1B68     		ldr	r3, [r3]
 636 0024 1B04     		lsl	r3, r3, #16
 637 0026 1B0C     		lsr	r3, r3, #16
 638 0028 FB60     		str	r3, [r7, #12]
 639 002a 01E0     		b	.L42
 640              	.L41:
 514:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 515:.\Generated_Source\PSoC4/ADC.c ****     }
 516:.\Generated_Source\PSoC4/ADC.c ****     else
 517:.\Generated_Source\PSoC4/ADC.c ****     {
 518:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 519:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 520:.\Generated_Source\PSoC4/ADC.c ****         #else
 521:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 641              		.loc 1 521 0
 642 002c 0023     		mov	r3, #0
 643 002e FB60     		str	r3, [r7, #12]
 644              	.L42:
 522:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 523:.\Generated_Source\PSoC4/ADC.c ****     }
 524:.\Generated_Source\PSoC4/ADC.c **** 
 525:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 645              		.loc 1 525 0
 646 0030 FB68     		ldr	r3, [r7, #12]
 647 0032 9BB2     		uxth	r3, r3
 648 0034 1BB2     		sxth	r3, r3
 526:.\Generated_Source\PSoC4/ADC.c **** }
 649              		.loc 1 526 0
 650 0036 181C     		mov	r0, r3
 651 0038 BD46     		mov	sp, r7
 652 003a 04B0     		add	sp, sp, #16
 653              		@ sp needed
 654 003c 80BD     		pop	{r7, pc}
 655              	.L45:
 656 003e C046     		.align	2
 657              	.L44:
 658 0040 80011A40 		.word	1075446144
 659              		.cfi_endproc
 660              	.LFE7:
 661              		.size	ADC_GetResult16, .-ADC_GetResult16
 662              		.section	.text.ADC_SetChanMask,"ax",%progbits
 663              		.align	2
 664              		.global	ADC_SetChanMask
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 22


 665              		.code	16
 666              		.thumb_func
 667              		.type	ADC_SetChanMask, %function
 668              	ADC_SetChanMask:
 669              	.LFB8:
 527:.\Generated_Source\PSoC4/ADC.c **** 
 528:.\Generated_Source\PSoC4/ADC.c **** 
 529:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 530:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 531:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 532:.\Generated_Source\PSoC4/ADC.c **** *
 533:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 534:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 535:.\Generated_Source\PSoC4/ADC.c **** *
 536:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 537:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 538:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 542:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 543:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:.\Generated_Source\PSoC4/ADC.c **** *
 545:.\Generated_Source\PSoC4/ADC.c **** * Return:
 546:.\Generated_Source\PSoC4/ADC.c **** *  None.
 547:.\Generated_Source\PSoC4/ADC.c **** *
 548:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 549:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 550:.\Generated_Source\PSoC4/ADC.c **** {
 670              		.loc 1 550 0
 671              		.cfi_startproc
 672 0000 80B5     		push	{r7, lr}
 673              		.cfi_def_cfa_offset 8
 674              		.cfi_offset 7, -8
 675              		.cfi_offset 14, -4
 676 0002 82B0     		sub	sp, sp, #8
 677              		.cfi_def_cfa_offset 16
 678 0004 00AF     		add	r7, sp, #0
 679              		.cfi_def_cfa_register 7
 680 0006 7860     		str	r0, [r7, #4]
 551:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 681              		.loc 1 551 0
 682 0008 034B     		ldr	r3, .L47
 683 000a 7968     		ldr	r1, [r7, #4]
 684 000c 0F22     		mov	r2, #15
 685 000e 0A40     		and	r2, r1
 686 0010 1A60     		str	r2, [r3]
 552:.\Generated_Source\PSoC4/ADC.c **** }
 687              		.loc 1 552 0
 688 0012 BD46     		mov	sp, r7
 689 0014 02B0     		add	sp, sp, #8
 690              		@ sp needed
 691 0016 80BD     		pop	{r7, pc}
 692              	.L48:
 693              		.align	2
 694              	.L47:
 695 0018 20001A40 		.word	1075445792
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 23


 696              		.cfi_endproc
 697              	.LFE8:
 698              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 699              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 700              		.align	2
 701              		.global	ADC_SetLowLimit
 702              		.code	16
 703              		.thumb_func
 704              		.type	ADC_SetLowLimit, %function
 705              	ADC_SetLowLimit:
 706              	.LFB9:
 553:.\Generated_Source\PSoC4/ADC.c **** 
 554:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 555:.\Generated_Source\PSoC4/ADC.c **** 
 556:.\Generated_Source\PSoC4/ADC.c **** 
 557:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 558:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 559:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 560:.\Generated_Source\PSoC4/ADC.c ****     *
 561:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 562:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 563:.\Generated_Source\PSoC4/ADC.c ****     *
 564:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 565:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 566:.\Generated_Source\PSoC4/ADC.c ****     *
 567:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 568:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 569:.\Generated_Source\PSoC4/ADC.c ****     *
 570:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 571:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 572:.\Generated_Source\PSoC4/ADC.c ****     {
 573:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 574:.\Generated_Source\PSoC4/ADC.c ****     }
 575:.\Generated_Source\PSoC4/ADC.c **** 
 576:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 577:.\Generated_Source\PSoC4/ADC.c **** 
 578:.\Generated_Source\PSoC4/ADC.c **** 
 579:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 580:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 581:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 582:.\Generated_Source\PSoC4/ADC.c **** *
 583:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 584:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 585:.\Generated_Source\PSoC4/ADC.c **** *
 586:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 587:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 588:.\Generated_Source\PSoC4/ADC.c **** *
 589:.\Generated_Source\PSoC4/ADC.c **** * Return:
 590:.\Generated_Source\PSoC4/ADC.c **** *  None.
 591:.\Generated_Source\PSoC4/ADC.c **** *
 592:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 593:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 594:.\Generated_Source\PSoC4/ADC.c **** {
 707              		.loc 1 594 0
 708              		.cfi_startproc
 709 0000 80B5     		push	{r7, lr}
 710              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 24


 711              		.cfi_offset 7, -8
 712              		.cfi_offset 14, -4
 713 0002 82B0     		sub	sp, sp, #8
 714              		.cfi_def_cfa_offset 16
 715 0004 00AF     		add	r7, sp, #0
 716              		.cfi_def_cfa_register 7
 717 0006 7860     		str	r0, [r7, #4]
 595:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 718              		.loc 1 595 0
 719 0008 084B     		ldr	r3, .L50
 720 000a 084A     		ldr	r2, .L50
 721 000c 1268     		ldr	r2, [r2]
 722 000e 120C     		lsr	r2, r2, #16
 723 0010 1204     		lsl	r2, r2, #16
 724 0012 1A60     		str	r2, [r3]
 596:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 725              		.loc 1 596 0
 726 0014 054B     		ldr	r3, .L50
 727 0016 054A     		ldr	r2, .L50
 728 0018 1168     		ldr	r1, [r2]
 729 001a 7A68     		ldr	r2, [r7, #4]
 730 001c 1204     		lsl	r2, r2, #16
 731 001e 120C     		lsr	r2, r2, #16
 732 0020 0A43     		orr	r2, r1
 733 0022 1A60     		str	r2, [r3]
 597:.\Generated_Source\PSoC4/ADC.c **** }
 734              		.loc 1 597 0
 735 0024 BD46     		mov	sp, r7
 736 0026 02B0     		add	sp, sp, #8
 737              		@ sp needed
 738 0028 80BD     		pop	{r7, pc}
 739              	.L51:
 740 002a C046     		.align	2
 741              	.L50:
 742 002c 18001A40 		.word	1075445784
 743              		.cfi_endproc
 744              	.LFE9:
 745              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 746              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 747              		.align	2
 748              		.global	ADC_SetHighLimit
 749              		.code	16
 750              		.thumb_func
 751              		.type	ADC_SetHighLimit, %function
 752              	ADC_SetHighLimit:
 753              	.LFB10:
 598:.\Generated_Source\PSoC4/ADC.c **** 
 599:.\Generated_Source\PSoC4/ADC.c **** 
 600:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 601:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 602:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 603:.\Generated_Source\PSoC4/ADC.c **** *
 604:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 605:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 606:.\Generated_Source\PSoC4/ADC.c **** *
 607:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 608:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 25


 609:.\Generated_Source\PSoC4/ADC.c **** *
 610:.\Generated_Source\PSoC4/ADC.c **** * Return:
 611:.\Generated_Source\PSoC4/ADC.c **** *  None.
 612:.\Generated_Source\PSoC4/ADC.c **** *
 613:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 614:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 615:.\Generated_Source\PSoC4/ADC.c **** {
 754              		.loc 1 615 0
 755              		.cfi_startproc
 756 0000 80B5     		push	{r7, lr}
 757              		.cfi_def_cfa_offset 8
 758              		.cfi_offset 7, -8
 759              		.cfi_offset 14, -4
 760 0002 82B0     		sub	sp, sp, #8
 761              		.cfi_def_cfa_offset 16
 762 0004 00AF     		add	r7, sp, #0
 763              		.cfi_def_cfa_register 7
 764 0006 7860     		str	r0, [r7, #4]
 616:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 765              		.loc 1 616 0
 766 0008 074B     		ldr	r3, .L53
 767 000a 074A     		ldr	r2, .L53
 768 000c 1268     		ldr	r2, [r2]
 769 000e 1204     		lsl	r2, r2, #16
 770 0010 120C     		lsr	r2, r2, #16
 771 0012 1A60     		str	r2, [r3]
 617:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 772              		.loc 1 617 0
 773 0014 044B     		ldr	r3, .L53
 774 0016 044A     		ldr	r2, .L53
 775 0018 1168     		ldr	r1, [r2]
 776 001a 7A68     		ldr	r2, [r7, #4]
 777 001c 1204     		lsl	r2, r2, #16
 778 001e 0A43     		orr	r2, r1
 779 0020 1A60     		str	r2, [r3]
 618:.\Generated_Source\PSoC4/ADC.c **** }
 780              		.loc 1 618 0
 781 0022 BD46     		mov	sp, r7
 782 0024 02B0     		add	sp, sp, #8
 783              		@ sp needed
 784 0026 80BD     		pop	{r7, pc}
 785              	.L54:
 786              		.align	2
 787              	.L53:
 788 0028 18001A40 		.word	1075445784
 789              		.cfi_endproc
 790              	.LFE10:
 791              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 792              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 793              		.align	2
 794              		.global	ADC_SetLimitMask
 795              		.code	16
 796              		.thumb_func
 797              		.type	ADC_SetLimitMask, %function
 798              	ADC_SetLimitMask:
 799              	.LFB11:
 619:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 26


 620:.\Generated_Source\PSoC4/ADC.c **** 
 621:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 622:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 623:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 626:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 627:.\Generated_Source\PSoC4/ADC.c **** *
 628:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 629:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 630:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:.\Generated_Source\PSoC4/ADC.c **** *
 634:.\Generated_Source\PSoC4/ADC.c **** * Return:
 635:.\Generated_Source\PSoC4/ADC.c **** *  None.
 636:.\Generated_Source\PSoC4/ADC.c **** *
 637:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 638:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 639:.\Generated_Source\PSoC4/ADC.c **** {
 800              		.loc 1 639 0
 801              		.cfi_startproc
 802 0000 80B5     		push	{r7, lr}
 803              		.cfi_def_cfa_offset 8
 804              		.cfi_offset 7, -8
 805              		.cfi_offset 14, -4
 806 0002 82B0     		sub	sp, sp, #8
 807              		.cfi_def_cfa_offset 16
 808 0004 00AF     		add	r7, sp, #0
 809              		.cfi_def_cfa_register 7
 810 0006 7860     		str	r0, [r7, #4]
 640:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 811              		.loc 1 640 0
 812 0008 034B     		ldr	r3, .L56
 813 000a 7968     		ldr	r1, [r7, #4]
 814 000c 0F22     		mov	r2, #15
 815 000e 0A40     		and	r2, r1
 816 0010 1A60     		str	r2, [r3]
 641:.\Generated_Source\PSoC4/ADC.c **** }
 817              		.loc 1 641 0
 818 0012 BD46     		mov	sp, r7
 819 0014 02B0     		add	sp, sp, #8
 820              		@ sp needed
 821 0016 80BD     		pop	{r7, pc}
 822              	.L57:
 823              		.align	2
 824              	.L56:
 825 0018 38021A40 		.word	1075446328
 826              		.cfi_endproc
 827              	.LFE11:
 828              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 829              		.section	.text.ADC_SetSatMask,"ax",%progbits
 830              		.align	2
 831              		.global	ADC_SetSatMask
 832              		.code	16
 833              		.thumb_func
 834              		.type	ADC_SetSatMask, %function
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 27


 835              	ADC_SetSatMask:
 836              	.LFB12:
 642:.\Generated_Source\PSoC4/ADC.c **** 
 643:.\Generated_Source\PSoC4/ADC.c **** 
 644:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 645:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 646:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 647:.\Generated_Source\PSoC4/ADC.c **** *
 648:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 649:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 650:.\Generated_Source\PSoC4/ADC.c **** *
 651:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 652:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 653:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:.\Generated_Source\PSoC4/ADC.c **** *
 657:.\Generated_Source\PSoC4/ADC.c **** * Return:
 658:.\Generated_Source\PSoC4/ADC.c **** *  None.
 659:.\Generated_Source\PSoC4/ADC.c **** *
 660:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 661:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 662:.\Generated_Source\PSoC4/ADC.c **** {
 837              		.loc 1 662 0
 838              		.cfi_startproc
 839 0000 80B5     		push	{r7, lr}
 840              		.cfi_def_cfa_offset 8
 841              		.cfi_offset 7, -8
 842              		.cfi_offset 14, -4
 843 0002 82B0     		sub	sp, sp, #8
 844              		.cfi_def_cfa_offset 16
 845 0004 00AF     		add	r7, sp, #0
 846              		.cfi_def_cfa_register 7
 847 0006 7860     		str	r0, [r7, #4]
 663:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 848              		.loc 1 663 0
 849 0008 034B     		ldr	r3, .L59
 850 000a 7968     		ldr	r1, [r7, #4]
 851 000c 0F22     		mov	r2, #15
 852 000e 0A40     		and	r2, r1
 853 0010 1A60     		str	r2, [r3]
 664:.\Generated_Source\PSoC4/ADC.c **** }
 854              		.loc 1 664 0
 855 0012 BD46     		mov	sp, r7
 856 0014 02B0     		add	sp, sp, #8
 857              		@ sp needed
 858 0016 80BD     		pop	{r7, pc}
 859              	.L60:
 860              		.align	2
 861              	.L59:
 862 0018 28021A40 		.word	1075446312
 863              		.cfi_endproc
 864              	.LFE12:
 865              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 866              		.section	.text.ADC_SetOffset,"ax",%progbits
 867              		.align	2
 868              		.global	ADC_SetOffset
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 28


 869              		.code	16
 870              		.thumb_func
 871              		.type	ADC_SetOffset, %function
 872              	ADC_SetOffset:
 873              	.LFB13:
 665:.\Generated_Source\PSoC4/ADC.c **** 
 666:.\Generated_Source\PSoC4/ADC.c **** 
 667:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 668:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 669:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 670:.\Generated_Source\PSoC4/ADC.c **** *
 671:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 672:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 673:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 675:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 676:.\Generated_Source\PSoC4/ADC.c **** *
 677:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 678:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 679:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 680:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 681:.\Generated_Source\PSoC4/ADC.c **** *
 682:.\Generated_Source\PSoC4/ADC.c **** * Return:
 683:.\Generated_Source\PSoC4/ADC.c **** *  None.
 684:.\Generated_Source\PSoC4/ADC.c **** *
 685:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 686:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 687:.\Generated_Source\PSoC4/ADC.c **** *
 688:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 689:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 690:.\Generated_Source\PSoC4/ADC.c **** {
 874              		.loc 1 690 0
 875              		.cfi_startproc
 876 0000 80B5     		push	{r7, lr}
 877              		.cfi_def_cfa_offset 8
 878              		.cfi_offset 7, -8
 879              		.cfi_offset 14, -4
 880 0002 82B0     		sub	sp, sp, #8
 881              		.cfi_def_cfa_offset 16
 882 0004 00AF     		add	r7, sp, #0
 883              		.cfi_def_cfa_register 7
 884 0006 7860     		str	r0, [r7, #4]
 885 0008 0A1C     		mov	r2, r1
 886 000a BB1C     		add	r3, r7, #2
 887 000c 1A80     		strh	r2, [r3]
 691:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 888              		.loc 1 692 0
 889 000e 7B68     		ldr	r3, [r7, #4]
 890 0010 032B     		cmp	r3, #3
 891 0012 02D9     		bls	.L62
 892              		.loc 1 692 0 is_stmt 0 discriminator 1
 893 0014 0020     		mov	r0, #0
 894 0016 FFF7FEFF 		bl	CyHalt
 895              	.L62:
 693:.\Generated_Source\PSoC4/ADC.c **** 
 694:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 29


 896              		.loc 1 694 0 is_stmt 1
 897 001a 044B     		ldr	r3, .L63
 898 001c 7A68     		ldr	r2, [r7, #4]
 899 001e 5200     		lsl	r2, r2, #1
 900 0020 B91C     		add	r1, r7, #2
 901 0022 0988     		ldrh	r1, [r1]
 902 0024 D152     		strh	r1, [r2, r3]
 695:.\Generated_Source\PSoC4/ADC.c **** }
 903              		.loc 1 695 0
 904 0026 BD46     		mov	sp, r7
 905 0028 02B0     		add	sp, sp, #8
 906              		@ sp needed
 907 002a 80BD     		pop	{r7, pc}
 908              	.L64:
 909              		.align	2
 910              	.L63:
 911 002c 00000000 		.word	ADC_offset
 912              		.cfi_endproc
 913              	.LFE13:
 914              		.size	ADC_SetOffset, .-ADC_SetOffset
 915              		.section	.text.ADC_SetGain,"ax",%progbits
 916              		.align	2
 917              		.global	ADC_SetGain
 918              		.code	16
 919              		.thumb_func
 920              		.type	ADC_SetGain, %function
 921              	ADC_SetGain:
 922              	.LFB14:
 696:.\Generated_Source\PSoC4/ADC.c **** 
 697:.\Generated_Source\PSoC4/ADC.c **** 
 698:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 699:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 700:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 701:.\Generated_Source\PSoC4/ADC.c **** *
 702:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 703:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 705:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 706:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 707:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 710:.\Generated_Source\PSoC4/ADC.c **** *
 711:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 712:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 713:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:.\Generated_Source\PSoC4/ADC.c **** *
 715:.\Generated_Source\PSoC4/ADC.c **** * Return:
 716:.\Generated_Source\PSoC4/ADC.c **** *  None.
 717:.\Generated_Source\PSoC4/ADC.c **** *
 718:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 719:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 720:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 721:.\Generated_Source\PSoC4/ADC.c **** *
 722:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 723:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 724:.\Generated_Source\PSoC4/ADC.c **** {
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 30


 923              		.loc 1 724 0
 924              		.cfi_startproc
 925 0000 80B5     		push	{r7, lr}
 926              		.cfi_def_cfa_offset 8
 927              		.cfi_offset 7, -8
 928              		.cfi_offset 14, -4
 929 0002 82B0     		sub	sp, sp, #8
 930              		.cfi_def_cfa_offset 16
 931 0004 00AF     		add	r7, sp, #0
 932              		.cfi_def_cfa_register 7
 933 0006 7860     		str	r0, [r7, #4]
 934 0008 3960     		str	r1, [r7]
 725:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 935              		.loc 1 726 0
 936 000a 7B68     		ldr	r3, [r7, #4]
 937 000c 032B     		cmp	r3, #3
 938 000e 02D9     		bls	.L66
 939              		.loc 1 726 0 is_stmt 0 discriminator 1
 940 0010 0020     		mov	r0, #0
 941 0012 FFF7FEFF 		bl	CyHalt
 942              	.L66:
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 943              		.loc 1 728 0 is_stmt 1
 944 0016 044B     		ldr	r3, .L67
 945 0018 7A68     		ldr	r2, [r7, #4]
 946 001a 9200     		lsl	r2, r2, #2
 947 001c 3968     		ldr	r1, [r7]
 948 001e D150     		str	r1, [r2, r3]
 729:.\Generated_Source\PSoC4/ADC.c **** }
 949              		.loc 1 729 0
 950 0020 BD46     		mov	sp, r7
 951 0022 02B0     		add	sp, sp, #8
 952              		@ sp needed
 953 0024 80BD     		pop	{r7, pc}
 954              	.L68:
 955 0026 C046     		.align	2
 956              	.L67:
 957 0028 00000000 		.word	ADC_countsPer10Volt
 958              		.cfi_endproc
 959              	.LFE14:
 960              		.size	ADC_SetGain, .-ADC_SetGain
 961              		.global	__aeabi_idiv
 962              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 963              		.align	2
 964              		.global	ADC_CountsTo_mVolts
 965              		.code	16
 966              		.thumb_func
 967              		.type	ADC_CountsTo_mVolts, %function
 968              	ADC_CountsTo_mVolts:
 969              	.LFB15:
 730:.\Generated_Source\PSoC4/ADC.c **** 
 731:.\Generated_Source\PSoC4/ADC.c **** 
 732:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 733:.\Generated_Source\PSoC4/ADC.c **** 
 734:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 31


 735:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 736:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 737:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 738:.\Generated_Source\PSoC4/ADC.c ****     *
 739:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 740:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 741:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 742:.\Generated_Source\PSoC4/ADC.c ****     *
 743:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 744:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 745:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 746:.\Generated_Source\PSoC4/ADC.c ****     *
 747:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 748:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 749:.\Generated_Source\PSoC4/ADC.c ****     *
 750:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 751:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 753:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 754:.\Generated_Source\PSoC4/ADC.c ****     *
 755:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 756:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:.\Generated_Source\PSoC4/ADC.c ****     {
 970              		.loc 1 757 0
 971              		.cfi_startproc
 972 0000 80B5     		push	{r7, lr}
 973              		.cfi_def_cfa_offset 8
 974              		.cfi_offset 7, -8
 975              		.cfi_offset 14, -4
 976 0002 84B0     		sub	sp, sp, #16
 977              		.cfi_def_cfa_offset 24
 978 0004 00AF     		add	r7, sp, #0
 979              		.cfi_def_cfa_register 7
 980 0006 7860     		str	r0, [r7, #4]
 981 0008 0A1C     		mov	r2, r1
 982 000a BB1C     		add	r3, r7, #2
 983 000c 1A80     		strh	r2, [r3]
 758:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 759:.\Generated_Source\PSoC4/ADC.c **** 
 760:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 984              		.loc 1 761 0
 985 000e 7B68     		ldr	r3, [r7, #4]
 986 0010 032B     		cmp	r3, #3
 987 0012 02D9     		bls	.L70
 988              		.loc 1 761 0 is_stmt 0 discriminator 1
 989 0014 0020     		mov	r0, #0
 990 0016 FFF7FEFF 		bl	CyHalt
 991              	.L70:
 762:.\Generated_Source\PSoC4/ADC.c **** 
 763:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 765:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 766:.\Generated_Source\PSoC4/ADC.c ****             {
 767:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 768:.\Generated_Source\PSoC4/ADC.c ****             }
 769:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 32


 770:.\Generated_Source\PSoC4/ADC.c **** 
 771:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 772:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 992              		.loc 1 772 0 is_stmt 1
 993 001a BB1C     		add	r3, r7, #2
 994 001c 1A88     		ldrh	r2, [r3]
 995 001e 1E4B     		ldr	r3, .L76
 996 0020 7968     		ldr	r1, [r7, #4]
 997 0022 4900     		lsl	r1, r1, #1
 998 0024 CB5A     		ldrh	r3, [r1, r3]
 999 0026 9BB2     		uxth	r3, r3
 1000 0028 9BB2     		uxth	r3, r3
 1001 002a D31A     		sub	r3, r2, r3
 1002 002c 9AB2     		uxth	r2, r3
 1003 002e BB1C     		add	r3, r7, #2
 1004 0030 1A80     		strh	r2, [r3]
 773:.\Generated_Source\PSoC4/ADC.c **** 
 774:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1005              		.loc 1 774 0
 1006 0032 BB1C     		add	r3, r7, #2
 1007 0034 0021     		mov	r1, #0
 1008 0036 5B5E     		ldrsh	r3, [r3, r1]
 1009 0038 184A     		ldr	r2, .L76+4
 1010 003a 5A43     		mul	r2, r3
 775:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1011              		.loc 1 775 0
 1012 003c BB1C     		add	r3, r7, #2
 1013 003e 0021     		mov	r1, #0
 1014 0040 5B5E     		ldrsh	r3, [r3, r1]
 1015 0042 002B     		cmp	r3, #0
 1016 0044 08DD     		ble	.L71
 1017              		.loc 1 775 0 is_stmt 0 discriminator 1
 1018 0046 164B     		ldr	r3, .L76+8
 1019 0048 7968     		ldr	r1, [r7, #4]
 1020 004a 8900     		lsl	r1, r1, #2
 1021 004c CB58     		ldr	r3, [r1, r3]
 1022 004e 002B     		cmp	r3, #0
 1023 0050 00DA     		bge	.L72
 1024 0052 0133     		add	r3, r3, #1
 1025              	.L72:
 1026 0054 5B10     		asr	r3, r3, #1
 1027 0056 08E0     		b	.L73
 1028              	.L71:
 1029              		.loc 1 775 0 discriminator 2
 1030 0058 114B     		ldr	r3, .L76+8
 1031 005a 7968     		ldr	r1, [r7, #4]
 1032 005c 8900     		lsl	r1, r1, #2
 1033 005e CB58     		ldr	r3, [r1, r3]
 1034 0060 002B     		cmp	r3, #0
 1035 0062 00DA     		bge	.L74
 1036 0064 0133     		add	r3, r3, #1
 1037              	.L74:
 1038 0066 5B10     		asr	r3, r3, #1
 1039 0068 5B42     		neg	r3, r3
 1040              	.L73:
 774:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1041              		.loc 1 774 0 is_stmt 1
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 33


 1042 006a D218     		add	r2, r2, r3
 776:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1043              		.loc 1 776 0
 1044 006c 0C4B     		ldr	r3, .L76+8
 1045 006e 7968     		ldr	r1, [r7, #4]
 1046 0070 8900     		lsl	r1, r1, #2
 1047 0072 CB58     		ldr	r3, [r1, r3]
 1048 0074 101C     		mov	r0, r2
 1049 0076 191C     		mov	r1, r3
 1050 0078 FFF7FEFF 		bl	__aeabi_idiv
 1051 007c 031C     		mov	r3, r0
 1052 007e 1A1C     		mov	r2, r3
 774:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1053              		.loc 1 774 0
 1054 0080 3B1C     		mov	r3, r7
 1055 0082 0E33     		add	r3, r3, #14
 1056 0084 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC.c **** 
 778:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1057              		.loc 1 778 0
 1058 0086 3B1C     		mov	r3, r7
 1059 0088 0E33     		add	r3, r3, #14
 1060 008a 1B88     		ldrh	r3, [r3]
 1061 008c 1BB2     		sxth	r3, r3
 779:.\Generated_Source\PSoC4/ADC.c ****     }
 1062              		.loc 1 779 0
 1063 008e 181C     		mov	r0, r3
 1064 0090 BD46     		mov	sp, r7
 1065 0092 04B0     		add	sp, sp, #16
 1066              		@ sp needed
 1067 0094 80BD     		pop	{r7, pc}
 1068              	.L77:
 1069 0096 C046     		.align	2
 1070              	.L76:
 1071 0098 00000000 		.word	ADC_offset
 1072 009c 10270000 		.word	10000
 1073 00a0 00000000 		.word	ADC_countsPer10Volt
 1074              		.cfi_endproc
 1075              	.LFE15:
 1076              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1077              		.global	__aeabi_lmul
 1078              		.global	__aeabi_ldivmod
 1079              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1080              		.align	2
 1081              		.global	ADC_CountsTo_uVolts
 1082              		.code	16
 1083              		.thumb_func
 1084              		.type	ADC_CountsTo_uVolts, %function
 1085              	ADC_CountsTo_uVolts:
 1086              	.LFB16:
 780:.\Generated_Source\PSoC4/ADC.c **** 
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 783:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 784:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 785:.\Generated_Source\PSoC4/ADC.c ****     *
 786:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 34


 787:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 788:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 789:.\Generated_Source\PSoC4/ADC.c ****     *
 790:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 791:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 792:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 793:.\Generated_Source\PSoC4/ADC.c ****     *
 794:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 795:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 796:.\Generated_Source\PSoC4/ADC.c ****     *
 797:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 798:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 800:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 801:.\Generated_Source\PSoC4/ADC.c ****     *
 802:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 803:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 806:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:.\Generated_Source\PSoC4/ADC.c ****     *
 809:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 810:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:.\Generated_Source\PSoC4/ADC.c ****     {
 1087              		.loc 1 811 0
 1088              		.cfi_startproc
 1089 0000 B0B5     		push	{r4, r5, r7, lr}
 1090              		.cfi_def_cfa_offset 16
 1091              		.cfi_offset 4, -16
 1092              		.cfi_offset 5, -12
 1093              		.cfi_offset 7, -8
 1094              		.cfi_offset 14, -4
 1095 0002 86B0     		sub	sp, sp, #24
 1096              		.cfi_def_cfa_offset 40
 1097 0004 00AF     		add	r7, sp, #0
 1098              		.cfi_def_cfa_register 7
 1099 0006 F860     		str	r0, [r7, #12]
 1100 0008 0A1C     		mov	r2, r1
 1101 000a 3B1C     		mov	r3, r7
 1102 000c 0A33     		add	r3, r3, #10
 1103 000e 1A80     		strh	r2, [r3]
 812:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 813:.\Generated_Source\PSoC4/ADC.c **** 
 814:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1104              		.loc 1 815 0
 1105 0010 FB68     		ldr	r3, [r7, #12]
 1106 0012 032B     		cmp	r3, #3
 1107 0014 02D9     		bls	.L79
 1108              		.loc 1 815 0 is_stmt 0 discriminator 1
 1109 0016 0020     		mov	r0, #0
 1110 0018 FFF7FEFF 		bl	CyHalt
 1111              	.L79:
 816:.\Generated_Source\PSoC4/ADC.c **** 
 817:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 35


 819:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 820:.\Generated_Source\PSoC4/ADC.c ****             {
 821:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 822:.\Generated_Source\PSoC4/ADC.c ****             }
 823:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 824:.\Generated_Source\PSoC4/ADC.c **** 
 825:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 826:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1112              		.loc 1 826 0 is_stmt 1
 1113 001c 3B1C     		mov	r3, r7
 1114 001e 0A33     		add	r3, r3, #10
 1115 0020 1A88     		ldrh	r2, [r3]
 1116 0022 1B4B     		ldr	r3, .L81+8
 1117 0024 F968     		ldr	r1, [r7, #12]
 1118 0026 4900     		lsl	r1, r1, #1
 1119 0028 CB5A     		ldrh	r3, [r1, r3]
 1120 002a 9BB2     		uxth	r3, r3
 1121 002c 9BB2     		uxth	r3, r3
 1122 002e D31A     		sub	r3, r2, r3
 1123 0030 9AB2     		uxth	r2, r3
 1124 0032 3B1C     		mov	r3, r7
 1125 0034 0A33     		add	r3, r3, #10
 1126 0036 1A80     		strh	r2, [r3]
 827:.\Generated_Source\PSoC4/ADC.c **** 
 828:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1127              		.loc 1 828 0
 1128 0038 3B1C     		mov	r3, r7
 1129 003a 0A33     		add	r3, r3, #10
 1130 003c 1B88     		ldrh	r3, [r3]
 1131 003e 1BB2     		sxth	r3, r3
 1132 0040 3B60     		str	r3, [r7]
 1133 0042 DB17     		asr	r3, r3, #31
 1134 0044 7B60     		str	r3, [r7, #4]
 1135 0046 3868     		ldr	r0, [r7]
 1136 0048 7968     		ldr	r1, [r7, #4]
 1137 004a 104B     		ldr	r3, .L81+4
 1138 004c 0E4A     		ldr	r2, .L81
 1139 004e FFF7FEFF 		bl	__aeabi_lmul
 1140 0052 021C     		mov	r2, r0
 1141 0054 0B1C     		mov	r3, r1
 1142 0056 0F49     		ldr	r1, .L81+12
 1143 0058 F868     		ldr	r0, [r7, #12]
 1144 005a 8000     		lsl	r0, r0, #2
 1145 005c 4158     		ldr	r1, [r0, r1]
 1146 005e 0C1C     		mov	r4, r1
 1147 0060 C917     		asr	r1, r1, #31
 1148 0062 0D1C     		mov	r5, r1
 1149 0064 101C     		mov	r0, r2
 1150 0066 191C     		mov	r1, r3
 1151 0068 221C     		mov	r2, r4
 1152 006a 2B1C     		mov	r3, r5
 1153 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1154 0070 031C     		mov	r3, r0
 1155 0072 0C1C     		mov	r4, r1
 1156 0074 3B61     		str	r3, [r7, #16]
 1157 0076 7C61     		str	r4, [r7, #20]
 829:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 36


 830:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1158              		.loc 1 830 0
 1159 0078 3B69     		ldr	r3, [r7, #16]
 831:.\Generated_Source\PSoC4/ADC.c ****     }
 1160              		.loc 1 831 0
 1161 007a 181C     		mov	r0, r3
 1162 007c BD46     		mov	sp, r7
 1163 007e 06B0     		add	sp, sp, #24
 1164              		@ sp needed
 1165 0080 B0BD     		pop	{r4, r5, r7, pc}
 1166              	.L82:
 1167 0082 C046C046 		.align	3
 1167      C046
 1168              	.L81:
 1169 0088 80969800 		.word	10000000
 1170 008c 00000000 		.word	0
 1171 0090 00000000 		.word	ADC_offset
 1172 0094 00000000 		.word	ADC_countsPer10Volt
 1173              		.cfi_endproc
 1174              	.LFE16:
 1175              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1176              		.global	__aeabi_i2f
 1177              		.global	__aeabi_fmul
 1178              		.global	__aeabi_fdiv
 1179              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1180              		.align	2
 1181              		.global	ADC_CountsTo_Volts
 1182              		.code	16
 1183              		.thumb_func
 1184              		.type	ADC_CountsTo_Volts, %function
 1185              	ADC_CountsTo_Volts:
 1186              	.LFB17:
 832:.\Generated_Source\PSoC4/ADC.c **** 
 833:.\Generated_Source\PSoC4/ADC.c **** 
 834:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 835:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 836:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 837:.\Generated_Source\PSoC4/ADC.c ****     *
 838:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 839:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 841:.\Generated_Source\PSoC4/ADC.c ****     *
 842:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 843:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 844:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 845:.\Generated_Source\PSoC4/ADC.c ****     *
 846:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 847:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 848:.\Generated_Source\PSoC4/ADC.c ****     *
 849:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 850:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 851:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 852:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 853:.\Generated_Source\PSoC4/ADC.c ****     *
 854:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 855:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:.\Generated_Source\PSoC4/ADC.c ****     {
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 37


 1187              		.loc 1 856 0
 1188              		.cfi_startproc
 1189 0000 90B5     		push	{r4, r7, lr}
 1190              		.cfi_def_cfa_offset 12
 1191              		.cfi_offset 4, -12
 1192              		.cfi_offset 7, -8
 1193              		.cfi_offset 14, -4
 1194 0002 85B0     		sub	sp, sp, #20
 1195              		.cfi_def_cfa_offset 32
 1196 0004 00AF     		add	r7, sp, #0
 1197              		.cfi_def_cfa_register 7
 1198 0006 7860     		str	r0, [r7, #4]
 1199 0008 0A1C     		mov	r2, r1
 1200 000a BB1C     		add	r3, r7, #2
 1201 000c 1A80     		strh	r2, [r3]
 857:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 858:.\Generated_Source\PSoC4/ADC.c **** 
 859:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1202              		.loc 1 860 0
 1203 000e 7B68     		ldr	r3, [r7, #4]
 1204 0010 032B     		cmp	r3, #3
 1205 0012 02D9     		bls	.L84
 1206              		.loc 1 860 0 is_stmt 0 discriminator 1
 1207 0014 0020     		mov	r0, #0
 1208 0016 FFF7FEFF 		bl	CyHalt
 1209              	.L84:
 861:.\Generated_Source\PSoC4/ADC.c **** 
 862:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 864:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 865:.\Generated_Source\PSoC4/ADC.c ****             {
 866:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 867:.\Generated_Source\PSoC4/ADC.c ****             }
 868:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 869:.\Generated_Source\PSoC4/ADC.c **** 
 870:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 871:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1210              		.loc 1 871 0 is_stmt 1
 1211 001a BB1C     		add	r3, r7, #2
 1212 001c 1A88     		ldrh	r2, [r3]
 1213 001e 154B     		ldr	r3, .L86
 1214 0020 7968     		ldr	r1, [r7, #4]
 1215 0022 4900     		lsl	r1, r1, #1
 1216 0024 CB5A     		ldrh	r3, [r1, r3]
 1217 0026 9BB2     		uxth	r3, r3
 1218 0028 9BB2     		uxth	r3, r3
 1219 002a D31A     		sub	r3, r2, r3
 1220 002c 9AB2     		uxth	r2, r3
 1221 002e BB1C     		add	r3, r7, #2
 1222 0030 1A80     		strh	r2, [r3]
 872:.\Generated_Source\PSoC4/ADC.c **** 
 873:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1223              		.loc 1 873 0
 1224 0032 BB1C     		add	r3, r7, #2
 1225 0034 0022     		mov	r2, #0
 1226 0036 9B5E     		ldrsh	r3, [r3, r2]
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 38


 1227 0038 181C     		mov	r0, r3
 1228 003a FFF7FEFF 		bl	__aeabi_i2f
 1229 003e 031C     		add	r3, r0, #0
 1230 0040 181C     		add	r0, r3, #0
 1231 0042 0D49     		ldr	r1, .L86+4
 1232 0044 FFF7FEFF 		bl	__aeabi_fmul
 1233 0048 031C     		add	r3, r0, #0
 1234 004a 1C1C     		add	r4, r3, #0
 1235 004c 0B4B     		ldr	r3, .L86+8
 1236 004e 7A68     		ldr	r2, [r7, #4]
 1237 0050 9200     		lsl	r2, r2, #2
 1238 0052 D358     		ldr	r3, [r2, r3]
 1239 0054 181C     		mov	r0, r3
 1240 0056 FFF7FEFF 		bl	__aeabi_i2f
 1241 005a 031C     		add	r3, r0, #0
 1242 005c 201C     		add	r0, r4, #0
 1243 005e 191C     		add	r1, r3, #0
 1244 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1245 0064 031C     		add	r3, r0, #0
 1246 0066 FB60     		str	r3, [r7, #12]
 874:.\Generated_Source\PSoC4/ADC.c **** 
 875:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1247              		.loc 1 875 0
 1248 0068 FB68     		ldr	r3, [r7, #12]
 876:.\Generated_Source\PSoC4/ADC.c ****     }
 1249              		.loc 1 876 0
 1250 006a 181C     		add	r0, r3, #0
 1251 006c BD46     		mov	sp, r7
 1252 006e 05B0     		add	sp, sp, #20
 1253              		@ sp needed
 1254 0070 90BD     		pop	{r4, r7, pc}
 1255              	.L87:
 1256 0072 C046     		.align	2
 1257              	.L86:
 1258 0074 00000000 		.word	ADC_offset
 1259 0078 00002041 		.word	1092616192
 1260 007c 00000000 		.word	ADC_countsPer10Volt
 1261              		.cfi_endproc
 1262              	.LFE17:
 1263              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1264              		.section	.rodata
 1265              		.align	2
 1266              		.type	ADC_InputsPlacement.4743, %object
 1267              		.size	ADC_InputsPlacement.4743, 4
 1268              	ADC_InputsPlacement.4743:
 1269 0010 12       		.byte	18
 1270 0011 00       		.byte	0
 1271 0012 02       		.byte	2
 1272 0013 03       		.byte	3
 1273              		.text
 1274              	.Letext0:
 1275              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1276              		.section	.debug_info,"",%progbits
 1277              	.Ldebug_info0:
 1278 0000 96040000 		.4byte	0x496
 1279 0004 0400     		.2byte	0x4
 1280 0006 00000000 		.4byte	.Ldebug_abbrev0
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 39


 1281 000a 04       		.byte	0x4
 1282 000b 01       		.uleb128 0x1
 1283 000c EA010000 		.4byte	.LASF60
 1284 0010 01       		.byte	0x1
 1285 0011 94020000 		.4byte	.LASF61
 1286 0015 DF020000 		.4byte	.LASF62
 1287 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1288 001d 00000000 		.4byte	0
 1289 0021 00000000 		.4byte	.Ldebug_line0
 1290 0025 02       		.uleb128 0x2
 1291 0026 01       		.byte	0x1
 1292 0027 06       		.byte	0x6
 1293 0028 7C000000 		.4byte	.LASF0
 1294 002c 02       		.uleb128 0x2
 1295 002d 01       		.byte	0x1
 1296 002e 08       		.byte	0x8
 1297 002f B3020000 		.4byte	.LASF1
 1298 0033 02       		.uleb128 0x2
 1299 0034 02       		.byte	0x2
 1300 0035 05       		.byte	0x5
 1301 0036 CC020000 		.4byte	.LASF2
 1302 003a 02       		.uleb128 0x2
 1303 003b 02       		.byte	0x2
 1304 003c 07       		.byte	0x7
 1305 003d 53010000 		.4byte	.LASF3
 1306 0041 02       		.uleb128 0x2
 1307 0042 04       		.byte	0x4
 1308 0043 05       		.byte	0x5
 1309 0044 9F000000 		.4byte	.LASF4
 1310 0048 02       		.uleb128 0x2
 1311 0049 04       		.byte	0x4
 1312 004a 07       		.byte	0x7
 1313 004b 22010000 		.4byte	.LASF5
 1314 004f 02       		.uleb128 0x2
 1315 0050 08       		.byte	0x8
 1316 0051 05       		.byte	0x5
 1317 0052 6E000000 		.4byte	.LASF6
 1318 0056 02       		.uleb128 0x2
 1319 0057 08       		.byte	0x8
 1320 0058 07       		.byte	0x7
 1321 0059 32000000 		.4byte	.LASF7
 1322 005d 03       		.uleb128 0x3
 1323 005e 04       		.byte	0x4
 1324 005f 05       		.byte	0x5
 1325 0060 696E7400 		.ascii	"int\000"
 1326 0064 02       		.uleb128 0x2
 1327 0065 04       		.byte	0x4
 1328 0066 07       		.byte	0x7
 1329 0067 0E010000 		.4byte	.LASF8
 1330 006b 04       		.uleb128 0x4
 1331 006c D0000000 		.4byte	.LASF9
 1332 0070 02       		.byte	0x2
 1333 0071 C1       		.byte	0xc1
 1334 0072 2C000000 		.4byte	0x2c
 1335 0076 04       		.uleb128 0x4
 1336 0077 00000000 		.4byte	.LASF10
 1337 007b 02       		.byte	0x2
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 40


 1338 007c C2       		.byte	0xc2
 1339 007d 3A000000 		.4byte	0x3a
 1340 0081 04       		.uleb128 0x4
 1341 0082 DD000000 		.4byte	.LASF11
 1342 0086 02       		.byte	0x2
 1343 0087 C3       		.byte	0xc3
 1344 0088 48000000 		.4byte	0x48
 1345 008c 04       		.uleb128 0x4
 1346 008d 64030000 		.4byte	.LASF12
 1347 0091 02       		.byte	0x2
 1348 0092 C5       		.byte	0xc5
 1349 0093 33000000 		.4byte	0x33
 1350 0097 04       		.uleb128 0x4
 1351 0098 8F000000 		.4byte	.LASF13
 1352 009c 02       		.byte	0x2
 1353 009d C6       		.byte	0xc6
 1354 009e 41000000 		.4byte	0x41
 1355 00a2 04       		.uleb128 0x4
 1356 00a3 83010000 		.4byte	.LASF14
 1357 00a7 02       		.byte	0x2
 1358 00a8 C7       		.byte	0xc7
 1359 00a9 AD000000 		.4byte	0xad
 1360 00ad 02       		.uleb128 0x2
 1361 00ae 04       		.byte	0x4
 1362 00af 04       		.byte	0x4
 1363 00b0 E4010000 		.4byte	.LASF15
 1364 00b4 02       		.uleb128 0x2
 1365 00b5 08       		.byte	0x8
 1366 00b6 04       		.byte	0x4
 1367 00b7 D6000000 		.4byte	.LASF16
 1368 00bb 04       		.uleb128 0x4
 1369 00bc C2010000 		.4byte	.LASF17
 1370 00c0 02       		.byte	0x2
 1371 00c1 CC       		.byte	0xcc
 1372 00c2 4F000000 		.4byte	0x4f
 1373 00c6 02       		.uleb128 0x2
 1374 00c7 01       		.byte	0x1
 1375 00c8 08       		.byte	0x8
 1376 00c9 30030000 		.4byte	.LASF18
 1377 00cd 05       		.uleb128 0x5
 1378 00ce 7D010000 		.4byte	.LASF19
 1379 00d2 02       		.byte	0x2
 1380 00d3 6D01     		.2byte	0x16d
 1381 00d5 D9000000 		.4byte	0xd9
 1382 00d9 06       		.uleb128 0x6
 1383 00da 81000000 		.4byte	0x81
 1384 00de 02       		.uleb128 0x2
 1385 00df 04       		.byte	0x4
 1386 00e0 07       		.byte	0x7
 1387 00e1 8B010000 		.4byte	.LASF20
 1388 00e5 07       		.uleb128 0x7
 1389 00e6 95000000 		.4byte	.LASF25
 1390 00ea 01       		.byte	0x1
 1391 00eb 3F       		.byte	0x3f
 1392 00ec 00000000 		.4byte	.LFB0
 1393 00f0 24000000 		.4byte	.LFE0-.LFB0
 1394 00f4 01       		.uleb128 0x1
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 41


 1395 00f5 9C       		.byte	0x9c
 1396 00f6 08       		.uleb128 0x8
 1397 00f7 29000000 		.4byte	.LASF36
 1398 00fb 01       		.byte	0x1
 1399 00fc 5E       		.byte	0x5e
 1400 00fd 00000000 		.4byte	.LFB1
 1401 0101 0C020000 		.4byte	.LFE1-.LFB1
 1402 0105 01       		.uleb128 0x1
 1403 0106 9C       		.byte	0x9c
 1404 0107 47010000 		.4byte	0x147
 1405 010b 09       		.uleb128 0x9
 1406 010c 25030000 		.4byte	.LASF21
 1407 0110 01       		.byte	0x1
 1408 0111 60       		.byte	0x60
 1409 0112 81000000 		.4byte	0x81
 1410 0116 02       		.uleb128 0x2
 1411 0117 91       		.byte	0x91
 1412 0118 6C       		.sleb128 -20
 1413 0119 09       		.uleb128 0x9
 1414 011a 49010000 		.4byte	.LASF22
 1415 011e 01       		.byte	0x1
 1416 011f 61       		.byte	0x61
 1417 0120 81000000 		.4byte	0x81
 1418 0124 02       		.uleb128 0x2
 1419 0125 91       		.byte	0x91
 1420 0126 64       		.sleb128 -28
 1421 0127 09       		.uleb128 0x9
 1422 0128 0F000000 		.4byte	.LASF23
 1423 012c 01       		.byte	0x1
 1424 012d 62       		.byte	0x62
 1425 012e 97000000 		.4byte	0x97
 1426 0132 02       		.uleb128 0x2
 1427 0133 91       		.byte	0x91
 1428 0134 68       		.sleb128 -24
 1429 0135 09       		.uleb128 0x9
 1430 0136 49000000 		.4byte	.LASF24
 1431 013a 01       		.byte	0x1
 1432 013b 65       		.byte	0x65
 1433 013c 57010000 		.4byte	0x157
 1434 0140 05       		.uleb128 0x5
 1435 0141 03       		.byte	0x3
 1436 0142 10000000 		.4byte	ADC_InputsPlacement.4743
 1437 0146 00       		.byte	0
 1438 0147 0A       		.uleb128 0xa
 1439 0148 6B000000 		.4byte	0x6b
 1440 014c 57010000 		.4byte	0x157
 1441 0150 0B       		.uleb128 0xb
 1442 0151 DE000000 		.4byte	0xde
 1443 0155 03       		.byte	0x3
 1444 0156 00       		.byte	0
 1445 0157 0C       		.uleb128 0xc
 1446 0158 47010000 		.4byte	0x147
 1447 015c 0D       		.uleb128 0xd
 1448 015d 59030000 		.4byte	.LASF26
 1449 0161 01       		.byte	0x1
 1450 0162 4A01     		.2byte	0x14a
 1451 0164 00000000 		.4byte	.LFB2
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 42


 1452 0168 28000000 		.4byte	.LFE2-.LFB2
 1453 016c 01       		.uleb128 0x1
 1454 016d 9C       		.byte	0x9c
 1455 016e 0E       		.uleb128 0xe
 1456 016f D6020000 		.4byte	.LASF27
 1457 0173 01       		.byte	0x1
 1458 0174 6D01     		.2byte	0x16d
 1459 0176 00000000 		.4byte	.LFB3
 1460 017a 18000000 		.4byte	.LFE3-.LFB3
 1461 017e 01       		.uleb128 0x1
 1462 017f 9C       		.byte	0x9c
 1463 0180 0E       		.uleb128 0xe
 1464 0181 5D000000 		.4byte	.LASF28
 1465 0185 01       		.byte	0x1
 1466 0186 8701     		.2byte	0x187
 1467 0188 00000000 		.4byte	.LFB4
 1468 018c 1C000000 		.4byte	.LFE4-.LFB4
 1469 0190 01       		.uleb128 0x1
 1470 0191 9C       		.byte	0x9c
 1471 0192 0E       		.uleb128 0xe
 1472 0193 66010000 		.4byte	.LASF29
 1473 0197 01       		.byte	0x1
 1474 0198 A001     		.2byte	0x1a0
 1475 019a 00000000 		.4byte	.LFB5
 1476 019e 1C000000 		.4byte	.LFE5-.LFB5
 1477 01a2 01       		.uleb128 0x1
 1478 01a3 9C       		.byte	0x9c
 1479 01a4 0F       		.uleb128 0xf
 1480 01a5 AE010000 		.4byte	.LASF31
 1481 01a9 01       		.byte	0x1
 1482 01aa C201     		.2byte	0x1c2
 1483 01ac 81000000 		.4byte	0x81
 1484 01b0 00000000 		.4byte	.LFB6
 1485 01b4 48000000 		.4byte	.LFE6-.LFB6
 1486 01b8 01       		.uleb128 0x1
 1487 01b9 9C       		.byte	0x9c
 1488 01ba DD010000 		.4byte	0x1dd
 1489 01be 10       		.uleb128 0x10
 1490 01bf F5000000 		.4byte	.LASF33
 1491 01c3 01       		.byte	0x1
 1492 01c4 C201     		.2byte	0x1c2
 1493 01c6 81000000 		.4byte	0x81
 1494 01ca 02       		.uleb128 0x2
 1495 01cb 91       		.byte	0x91
 1496 01cc 6C       		.sleb128 -20
 1497 01cd 11       		.uleb128 0x11
 1498 01ce 88000000 		.4byte	.LASF30
 1499 01d2 01       		.byte	0x1
 1500 01d3 C401     		.2byte	0x1c4
 1501 01d5 81000000 		.4byte	0x81
 1502 01d9 02       		.uleb128 0x2
 1503 01da 91       		.byte	0x91
 1504 01db 74       		.sleb128 -12
 1505 01dc 00       		.byte	0
 1506 01dd 12       		.uleb128 0x12
 1507 01de 7F030000 		.4byte	.LASF32
 1508 01e2 01       		.byte	0x1
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 43


 1509 01e3 F801     		.2byte	0x1f8
 1510 01e5 8C000000 		.4byte	0x8c
 1511 01e9 00000000 		.4byte	.LFB7
 1512 01ed 44000000 		.4byte	.LFE7-.LFB7
 1513 01f1 01       		.uleb128 0x1
 1514 01f2 9C       		.byte	0x9c
 1515 01f3 16020000 		.4byte	0x216
 1516 01f7 10       		.uleb128 0x10
 1517 01f8 2B030000 		.4byte	.LASF34
 1518 01fc 01       		.byte	0x1
 1519 01fd F801     		.2byte	0x1f8
 1520 01ff 81000000 		.4byte	0x81
 1521 0203 02       		.uleb128 0x2
 1522 0204 91       		.byte	0x91
 1523 0205 6C       		.sleb128 -20
 1524 0206 11       		.uleb128 0x11
 1525 0207 78030000 		.4byte	.LASF35
 1526 020b 01       		.byte	0x1
 1527 020c FA01     		.2byte	0x1fa
 1528 020e 81000000 		.4byte	0x81
 1529 0212 02       		.uleb128 0x2
 1530 0213 91       		.byte	0x91
 1531 0214 74       		.sleb128 -12
 1532 0215 00       		.byte	0
 1533 0216 13       		.uleb128 0x13
 1534 0217 C8010000 		.4byte	.LASF37
 1535 021b 01       		.byte	0x1
 1536 021c 2502     		.2byte	0x225
 1537 021e 00000000 		.4byte	.LFB8
 1538 0222 1C000000 		.4byte	.LFE8-.LFB8
 1539 0226 01       		.uleb128 0x1
 1540 0227 9C       		.byte	0x9c
 1541 0228 3C020000 		.4byte	0x23c
 1542 022c 10       		.uleb128 0x10
 1543 022d E4000000 		.4byte	.LASF38
 1544 0231 01       		.byte	0x1
 1545 0232 2502     		.2byte	0x225
 1546 0234 81000000 		.4byte	0x81
 1547 0238 02       		.uleb128 0x2
 1548 0239 91       		.byte	0x91
 1549 023a 74       		.sleb128 -12
 1550 023b 00       		.byte	0
 1551 023c 13       		.uleb128 0x13
 1552 023d 84020000 		.4byte	.LASF39
 1553 0241 01       		.byte	0x1
 1554 0242 5102     		.2byte	0x251
 1555 0244 00000000 		.4byte	.LFB9
 1556 0248 30000000 		.4byte	.LFE9-.LFB9
 1557 024c 01       		.uleb128 0x1
 1558 024d 9C       		.byte	0x9c
 1559 024e 62020000 		.4byte	0x262
 1560 0252 10       		.uleb128 0x10
 1561 0253 94010000 		.4byte	.LASF40
 1562 0257 01       		.byte	0x1
 1563 0258 5102     		.2byte	0x251
 1564 025a 81000000 		.4byte	0x81
 1565 025e 02       		.uleb128 0x2
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 44


 1566 025f 91       		.byte	0x91
 1567 0260 74       		.sleb128 -12
 1568 0261 00       		.byte	0
 1569 0262 13       		.uleb128 0x13
 1570 0263 9D010000 		.4byte	.LASF41
 1571 0267 01       		.byte	0x1
 1572 0268 6602     		.2byte	0x266
 1573 026a 00000000 		.4byte	.LFB10
 1574 026e 2C000000 		.4byte	.LFE10-.LFB10
 1575 0272 01       		.uleb128 0x1
 1576 0273 9C       		.byte	0x9c
 1577 0274 88020000 		.4byte	0x288
 1578 0278 10       		.uleb128 0x10
 1579 0279 66020000 		.4byte	.LASF42
 1580 027d 01       		.byte	0x1
 1581 027e 6602     		.2byte	0x266
 1582 0280 81000000 		.4byte	0x81
 1583 0284 02       		.uleb128 0x2
 1584 0285 91       		.byte	0x91
 1585 0286 74       		.sleb128 -12
 1586 0287 00       		.byte	0
 1587 0288 13       		.uleb128 0x13
 1588 0289 FD000000 		.4byte	.LASF43
 1589 028d 01       		.byte	0x1
 1590 028e 7E02     		.2byte	0x27e
 1591 0290 00000000 		.4byte	.LFB11
 1592 0294 1C000000 		.4byte	.LFE11-.LFB11
 1593 0298 01       		.uleb128 0x1
 1594 0299 9C       		.byte	0x9c
 1595 029a AE020000 		.4byte	0x2ae
 1596 029e 10       		.uleb128 0x10
 1597 029f E4000000 		.4byte	.LASF38
 1598 02a3 01       		.byte	0x1
 1599 02a4 7E02     		.2byte	0x27e
 1600 02a6 81000000 		.4byte	0x81
 1601 02aa 02       		.uleb128 0x2
 1602 02ab 91       		.byte	0x91
 1603 02ac 74       		.sleb128 -12
 1604 02ad 00       		.byte	0
 1605 02ae 13       		.uleb128 0x13
 1606 02af 34010000 		.4byte	.LASF44
 1607 02b3 01       		.byte	0x1
 1608 02b4 9502     		.2byte	0x295
 1609 02b6 00000000 		.4byte	.LFB12
 1610 02ba 1C000000 		.4byte	.LFE12-.LFB12
 1611 02be 01       		.uleb128 0x1
 1612 02bf 9C       		.byte	0x9c
 1613 02c0 D4020000 		.4byte	0x2d4
 1614 02c4 10       		.uleb128 0x10
 1615 02c5 E4000000 		.4byte	.LASF38
 1616 02c9 01       		.byte	0x1
 1617 02ca 9502     		.2byte	0x295
 1618 02cc 81000000 		.4byte	0x81
 1619 02d0 02       		.uleb128 0x2
 1620 02d1 91       		.byte	0x91
 1621 02d2 74       		.sleb128 -12
 1622 02d3 00       		.byte	0
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 45


 1623 02d4 14       		.uleb128 0x14
 1624 02d5 6A030000 		.4byte	.LASF45
 1625 02d9 01       		.byte	0x1
 1626 02da B102     		.2byte	0x2b1
 1627 02dc 00000000 		.4byte	.LFB13
 1628 02e0 30000000 		.4byte	.LFE13-.LFB13
 1629 02e4 01       		.uleb128 0x1
 1630 02e5 9C       		.byte	0x9c
 1631 02e6 09030000 		.4byte	0x309
 1632 02ea 10       		.uleb128 0x10
 1633 02eb 2B030000 		.4byte	.LASF34
 1634 02ef 01       		.byte	0x1
 1635 02f0 B102     		.2byte	0x2b1
 1636 02f2 81000000 		.4byte	0x81
 1637 02f6 02       		.uleb128 0x2
 1638 02f7 91       		.byte	0x91
 1639 02f8 74       		.sleb128 -12
 1640 02f9 10       		.uleb128 0x10
 1641 02fa 48030000 		.4byte	.LASF46
 1642 02fe 01       		.byte	0x1
 1643 02ff B102     		.2byte	0x2b1
 1644 0301 8C000000 		.4byte	0x8c
 1645 0305 02       		.uleb128 0x2
 1646 0306 91       		.byte	0x91
 1647 0307 72       		.sleb128 -14
 1648 0308 00       		.byte	0
 1649 0309 14       		.uleb128 0x14
 1650 030a D8010000 		.4byte	.LASF47
 1651 030e 01       		.byte	0x1
 1652 030f D302     		.2byte	0x2d3
 1653 0311 00000000 		.4byte	.LFB14
 1654 0315 2C000000 		.4byte	.LFE14-.LFB14
 1655 0319 01       		.uleb128 0x1
 1656 031a 9C       		.byte	0x9c
 1657 031b 3E030000 		.4byte	0x33e
 1658 031f 10       		.uleb128 0x10
 1659 0320 2B030000 		.4byte	.LASF34
 1660 0324 01       		.byte	0x1
 1661 0325 D302     		.2byte	0x2d3
 1662 0327 81000000 		.4byte	0x81
 1663 032b 02       		.uleb128 0x2
 1664 032c 91       		.byte	0x91
 1665 032d 74       		.sleb128 -12
 1666 032e 10       		.uleb128 0x10
 1667 032f 07000000 		.4byte	.LASF48
 1668 0333 01       		.byte	0x1
 1669 0334 D302     		.2byte	0x2d3
 1670 0336 97000000 		.4byte	0x97
 1671 033a 02       		.uleb128 0x2
 1672 033b 91       		.byte	0x91
 1673 033c 70       		.sleb128 -16
 1674 033d 00       		.byte	0
 1675 033e 12       		.uleb128 0x12
 1676 033f 70020000 		.4byte	.LASF49
 1677 0343 01       		.byte	0x1
 1678 0344 F402     		.2byte	0x2f4
 1679 0346 8C000000 		.4byte	0x8c
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 46


 1680 034a 00000000 		.4byte	.LFB15
 1681 034e A4000000 		.4byte	.LFE15-.LFB15
 1682 0352 01       		.uleb128 0x1
 1683 0353 9C       		.byte	0x9c
 1684 0354 86030000 		.4byte	0x386
 1685 0358 10       		.uleb128 0x10
 1686 0359 2B030000 		.4byte	.LASF34
 1687 035d 01       		.byte	0x1
 1688 035e F402     		.2byte	0x2f4
 1689 0360 81000000 		.4byte	0x81
 1690 0364 02       		.uleb128 0x2
 1691 0365 91       		.byte	0x91
 1692 0366 6C       		.sleb128 -20
 1693 0367 10       		.uleb128 0x10
 1694 0368 4F030000 		.4byte	.LASF50
 1695 036c 01       		.byte	0x1
 1696 036d F402     		.2byte	0x2f4
 1697 036f 8C000000 		.4byte	0x8c
 1698 0373 02       		.uleb128 0x2
 1699 0374 91       		.byte	0x91
 1700 0375 6A       		.sleb128 -22
 1701 0376 11       		.uleb128 0x11
 1702 0377 76010000 		.4byte	.LASF51
 1703 037b 01       		.byte	0x1
 1704 037c F602     		.2byte	0x2f6
 1705 037e 8C000000 		.4byte	0x8c
 1706 0382 02       		.uleb128 0x2
 1707 0383 91       		.byte	0x91
 1708 0384 76       		.sleb128 -10
 1709 0385 00       		.byte	0
 1710 0386 12       		.uleb128 0x12
 1711 0387 A8000000 		.4byte	.LASF52
 1712 038b 01       		.byte	0x1
 1713 038c 2A03     		.2byte	0x32a
 1714 038e 97000000 		.4byte	0x97
 1715 0392 00000000 		.4byte	.LFB16
 1716 0396 98000000 		.4byte	.LFE16-.LFB16
 1717 039a 01       		.uleb128 0x1
 1718 039b 9C       		.byte	0x9c
 1719 039c CE030000 		.4byte	0x3ce
 1720 03a0 10       		.uleb128 0x10
 1721 03a1 2B030000 		.4byte	.LASF34
 1722 03a5 01       		.byte	0x1
 1723 03a6 2A03     		.2byte	0x32a
 1724 03a8 81000000 		.4byte	0x81
 1725 03ac 02       		.uleb128 0x2
 1726 03ad 91       		.byte	0x91
 1727 03ae 64       		.sleb128 -28
 1728 03af 10       		.uleb128 0x10
 1729 03b0 4F030000 		.4byte	.LASF50
 1730 03b4 01       		.byte	0x1
 1731 03b5 2A03     		.2byte	0x32a
 1732 03b7 8C000000 		.4byte	0x8c
 1733 03bb 02       		.uleb128 0x2
 1734 03bc 91       		.byte	0x91
 1735 03bd 62       		.sleb128 -30
 1736 03be 11       		.uleb128 0x11
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 47


 1737 03bf 1B010000 		.4byte	.LASF53
 1738 03c3 01       		.byte	0x1
 1739 03c4 2C03     		.2byte	0x32c
 1740 03c6 BB000000 		.4byte	0xbb
 1741 03ca 02       		.uleb128 0x2
 1742 03cb 91       		.byte	0x91
 1743 03cc 68       		.sleb128 -24
 1744 03cd 00       		.byte	0
 1745 03ce 12       		.uleb128 0x12
 1746 03cf 16000000 		.4byte	.LASF54
 1747 03d3 01       		.byte	0x1
 1748 03d4 5703     		.2byte	0x357
 1749 03d6 A2000000 		.4byte	0xa2
 1750 03da 00000000 		.4byte	.LFB17
 1751 03de 80000000 		.4byte	.LFE17-.LFB17
 1752 03e2 01       		.uleb128 0x1
 1753 03e3 9C       		.byte	0x9c
 1754 03e4 16040000 		.4byte	0x416
 1755 03e8 10       		.uleb128 0x10
 1756 03e9 2B030000 		.4byte	.LASF34
 1757 03ed 01       		.byte	0x1
 1758 03ee 5703     		.2byte	0x357
 1759 03f0 81000000 		.4byte	0x81
 1760 03f4 02       		.uleb128 0x2
 1761 03f5 91       		.byte	0x91
 1762 03f6 64       		.sleb128 -28
 1763 03f7 10       		.uleb128 0x10
 1764 03f8 4F030000 		.4byte	.LASF50
 1765 03fc 01       		.byte	0x1
 1766 03fd 5703     		.2byte	0x357
 1767 03ff 8C000000 		.4byte	0x8c
 1768 0403 02       		.uleb128 0x2
 1769 0404 91       		.byte	0x91
 1770 0405 62       		.sleb128 -30
 1771 0406 11       		.uleb128 0x11
 1772 0407 43010000 		.4byte	.LASF55
 1773 040b 01       		.byte	0x1
 1774 040c 5903     		.2byte	0x359
 1775 040e A2000000 		.4byte	0xa2
 1776 0412 02       		.uleb128 0x2
 1777 0413 91       		.byte	0x91
 1778 0414 6C       		.sleb128 -20
 1779 0415 00       		.byte	0
 1780 0416 0A       		.uleb128 0xa
 1781 0417 81000000 		.4byte	0x81
 1782 041b 26040000 		.4byte	0x426
 1783 041f 0B       		.uleb128 0xb
 1784 0420 DE000000 		.4byte	0xde
 1785 0424 03       		.byte	0x3
 1786 0425 00       		.byte	0
 1787 0426 09       		.uleb128 0x9
 1788 0427 35030000 		.4byte	.LASF56
 1789 042b 01       		.byte	0x1
 1790 042c 21       		.byte	0x21
 1791 042d 37040000 		.4byte	0x437
 1792 0431 05       		.uleb128 0x5
 1793 0432 03       		.byte	0x3
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 48


 1794 0433 00000000 		.4byte	ADC_channelsConfig
 1795 0437 0C       		.uleb128 0xc
 1796 0438 16040000 		.4byte	0x416
 1797 043c 15       		.uleb128 0x15
 1798 043d E9000000 		.4byte	.LASF57
 1799 0441 01       		.byte	0x1
 1800 0442 18       		.byte	0x18
 1801 0443 6B000000 		.4byte	0x6b
 1802 0447 05       		.uleb128 0x5
 1803 0448 03       		.byte	0x3
 1804 0449 00000000 		.4byte	ADC_initVar
 1805 044d 0A       		.uleb128 0xa
 1806 044e 8C000000 		.4byte	0x8c
 1807 0452 5D040000 		.4byte	0x45d
 1808 0456 0B       		.uleb128 0xb
 1809 0457 DE000000 		.4byte	0xde
 1810 045b 03       		.byte	0x3
 1811 045c 00       		.byte	0
 1812 045d 15       		.uleb128 0x15
 1813 045e C1020000 		.4byte	.LASF58
 1814 0462 01       		.byte	0x1
 1815 0463 19       		.byte	0x19
 1816 0464 6E040000 		.4byte	0x46e
 1817 0468 05       		.uleb128 0x5
 1818 0469 03       		.byte	0x3
 1819 046a 00000000 		.4byte	ADC_offset
 1820 046e 06       		.uleb128 0x6
 1821 046f 4D040000 		.4byte	0x44d
 1822 0473 0A       		.uleb128 0xa
 1823 0474 97000000 		.4byte	0x97
 1824 0478 83040000 		.4byte	0x483
 1825 047c 0B       		.uleb128 0xb
 1826 047d DE000000 		.4byte	0xde
 1827 0481 03       		.byte	0x3
 1828 0482 00       		.byte	0
 1829 0483 15       		.uleb128 0x15
 1830 0484 BC000000 		.4byte	.LASF59
 1831 0488 01       		.byte	0x1
 1832 0489 1A       		.byte	0x1a
 1833 048a 94040000 		.4byte	0x494
 1834 048e 05       		.uleb128 0x5
 1835 048f 03       		.byte	0x3
 1836 0490 00000000 		.4byte	ADC_countsPer10Volt
 1837 0494 06       		.uleb128 0x6
 1838 0495 73040000 		.4byte	0x473
 1839 0499 00       		.byte	0
 1840              		.section	.debug_abbrev,"",%progbits
 1841              	.Ldebug_abbrev0:
 1842 0000 01       		.uleb128 0x1
 1843 0001 11       		.uleb128 0x11
 1844 0002 01       		.byte	0x1
 1845 0003 25       		.uleb128 0x25
 1846 0004 0E       		.uleb128 0xe
 1847 0005 13       		.uleb128 0x13
 1848 0006 0B       		.uleb128 0xb
 1849 0007 03       		.uleb128 0x3
 1850 0008 0E       		.uleb128 0xe
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 49


 1851 0009 1B       		.uleb128 0x1b
 1852 000a 0E       		.uleb128 0xe
 1853 000b 55       		.uleb128 0x55
 1854 000c 17       		.uleb128 0x17
 1855 000d 11       		.uleb128 0x11
 1856 000e 01       		.uleb128 0x1
 1857 000f 10       		.uleb128 0x10
 1858 0010 17       		.uleb128 0x17
 1859 0011 00       		.byte	0
 1860 0012 00       		.byte	0
 1861 0013 02       		.uleb128 0x2
 1862 0014 24       		.uleb128 0x24
 1863 0015 00       		.byte	0
 1864 0016 0B       		.uleb128 0xb
 1865 0017 0B       		.uleb128 0xb
 1866 0018 3E       		.uleb128 0x3e
 1867 0019 0B       		.uleb128 0xb
 1868 001a 03       		.uleb128 0x3
 1869 001b 0E       		.uleb128 0xe
 1870 001c 00       		.byte	0
 1871 001d 00       		.byte	0
 1872 001e 03       		.uleb128 0x3
 1873 001f 24       		.uleb128 0x24
 1874 0020 00       		.byte	0
 1875 0021 0B       		.uleb128 0xb
 1876 0022 0B       		.uleb128 0xb
 1877 0023 3E       		.uleb128 0x3e
 1878 0024 0B       		.uleb128 0xb
 1879 0025 03       		.uleb128 0x3
 1880 0026 08       		.uleb128 0x8
 1881 0027 00       		.byte	0
 1882 0028 00       		.byte	0
 1883 0029 04       		.uleb128 0x4
 1884 002a 16       		.uleb128 0x16
 1885 002b 00       		.byte	0
 1886 002c 03       		.uleb128 0x3
 1887 002d 0E       		.uleb128 0xe
 1888 002e 3A       		.uleb128 0x3a
 1889 002f 0B       		.uleb128 0xb
 1890 0030 3B       		.uleb128 0x3b
 1891 0031 0B       		.uleb128 0xb
 1892 0032 49       		.uleb128 0x49
 1893 0033 13       		.uleb128 0x13
 1894 0034 00       		.byte	0
 1895 0035 00       		.byte	0
 1896 0036 05       		.uleb128 0x5
 1897 0037 16       		.uleb128 0x16
 1898 0038 00       		.byte	0
 1899 0039 03       		.uleb128 0x3
 1900 003a 0E       		.uleb128 0xe
 1901 003b 3A       		.uleb128 0x3a
 1902 003c 0B       		.uleb128 0xb
 1903 003d 3B       		.uleb128 0x3b
 1904 003e 05       		.uleb128 0x5
 1905 003f 49       		.uleb128 0x49
 1906 0040 13       		.uleb128 0x13
 1907 0041 00       		.byte	0
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 50


 1908 0042 00       		.byte	0
 1909 0043 06       		.uleb128 0x6
 1910 0044 35       		.uleb128 0x35
 1911 0045 00       		.byte	0
 1912 0046 49       		.uleb128 0x49
 1913 0047 13       		.uleb128 0x13
 1914 0048 00       		.byte	0
 1915 0049 00       		.byte	0
 1916 004a 07       		.uleb128 0x7
 1917 004b 2E       		.uleb128 0x2e
 1918 004c 00       		.byte	0
 1919 004d 3F       		.uleb128 0x3f
 1920 004e 19       		.uleb128 0x19
 1921 004f 03       		.uleb128 0x3
 1922 0050 0E       		.uleb128 0xe
 1923 0051 3A       		.uleb128 0x3a
 1924 0052 0B       		.uleb128 0xb
 1925 0053 3B       		.uleb128 0x3b
 1926 0054 0B       		.uleb128 0xb
 1927 0055 27       		.uleb128 0x27
 1928 0056 19       		.uleb128 0x19
 1929 0057 11       		.uleb128 0x11
 1930 0058 01       		.uleb128 0x1
 1931 0059 12       		.uleb128 0x12
 1932 005a 06       		.uleb128 0x6
 1933 005b 40       		.uleb128 0x40
 1934 005c 18       		.uleb128 0x18
 1935 005d 9642     		.uleb128 0x2116
 1936 005f 19       		.uleb128 0x19
 1937 0060 00       		.byte	0
 1938 0061 00       		.byte	0
 1939 0062 08       		.uleb128 0x8
 1940 0063 2E       		.uleb128 0x2e
 1941 0064 01       		.byte	0x1
 1942 0065 3F       		.uleb128 0x3f
 1943 0066 19       		.uleb128 0x19
 1944 0067 03       		.uleb128 0x3
 1945 0068 0E       		.uleb128 0xe
 1946 0069 3A       		.uleb128 0x3a
 1947 006a 0B       		.uleb128 0xb
 1948 006b 3B       		.uleb128 0x3b
 1949 006c 0B       		.uleb128 0xb
 1950 006d 27       		.uleb128 0x27
 1951 006e 19       		.uleb128 0x19
 1952 006f 11       		.uleb128 0x11
 1953 0070 01       		.uleb128 0x1
 1954 0071 12       		.uleb128 0x12
 1955 0072 06       		.uleb128 0x6
 1956 0073 40       		.uleb128 0x40
 1957 0074 18       		.uleb128 0x18
 1958 0075 9642     		.uleb128 0x2116
 1959 0077 19       		.uleb128 0x19
 1960 0078 01       		.uleb128 0x1
 1961 0079 13       		.uleb128 0x13
 1962 007a 00       		.byte	0
 1963 007b 00       		.byte	0
 1964 007c 09       		.uleb128 0x9
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 51


 1965 007d 34       		.uleb128 0x34
 1966 007e 00       		.byte	0
 1967 007f 03       		.uleb128 0x3
 1968 0080 0E       		.uleb128 0xe
 1969 0081 3A       		.uleb128 0x3a
 1970 0082 0B       		.uleb128 0xb
 1971 0083 3B       		.uleb128 0x3b
 1972 0084 0B       		.uleb128 0xb
 1973 0085 49       		.uleb128 0x49
 1974 0086 13       		.uleb128 0x13
 1975 0087 02       		.uleb128 0x2
 1976 0088 18       		.uleb128 0x18
 1977 0089 00       		.byte	0
 1978 008a 00       		.byte	0
 1979 008b 0A       		.uleb128 0xa
 1980 008c 01       		.uleb128 0x1
 1981 008d 01       		.byte	0x1
 1982 008e 49       		.uleb128 0x49
 1983 008f 13       		.uleb128 0x13
 1984 0090 01       		.uleb128 0x1
 1985 0091 13       		.uleb128 0x13
 1986 0092 00       		.byte	0
 1987 0093 00       		.byte	0
 1988 0094 0B       		.uleb128 0xb
 1989 0095 21       		.uleb128 0x21
 1990 0096 00       		.byte	0
 1991 0097 49       		.uleb128 0x49
 1992 0098 13       		.uleb128 0x13
 1993 0099 2F       		.uleb128 0x2f
 1994 009a 0B       		.uleb128 0xb
 1995 009b 00       		.byte	0
 1996 009c 00       		.byte	0
 1997 009d 0C       		.uleb128 0xc
 1998 009e 26       		.uleb128 0x26
 1999 009f 00       		.byte	0
 2000 00a0 49       		.uleb128 0x49
 2001 00a1 13       		.uleb128 0x13
 2002 00a2 00       		.byte	0
 2003 00a3 00       		.byte	0
 2004 00a4 0D       		.uleb128 0xd
 2005 00a5 2E       		.uleb128 0x2e
 2006 00a6 00       		.byte	0
 2007 00a7 3F       		.uleb128 0x3f
 2008 00a8 19       		.uleb128 0x19
 2009 00a9 03       		.uleb128 0x3
 2010 00aa 0E       		.uleb128 0xe
 2011 00ab 3A       		.uleb128 0x3a
 2012 00ac 0B       		.uleb128 0xb
 2013 00ad 3B       		.uleb128 0x3b
 2014 00ae 05       		.uleb128 0x5
 2015 00af 27       		.uleb128 0x27
 2016 00b0 19       		.uleb128 0x19
 2017 00b1 11       		.uleb128 0x11
 2018 00b2 01       		.uleb128 0x1
 2019 00b3 12       		.uleb128 0x12
 2020 00b4 06       		.uleb128 0x6
 2021 00b5 40       		.uleb128 0x40
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 52


 2022 00b6 18       		.uleb128 0x18
 2023 00b7 9642     		.uleb128 0x2116
 2024 00b9 19       		.uleb128 0x19
 2025 00ba 00       		.byte	0
 2026 00bb 00       		.byte	0
 2027 00bc 0E       		.uleb128 0xe
 2028 00bd 2E       		.uleb128 0x2e
 2029 00be 00       		.byte	0
 2030 00bf 3F       		.uleb128 0x3f
 2031 00c0 19       		.uleb128 0x19
 2032 00c1 03       		.uleb128 0x3
 2033 00c2 0E       		.uleb128 0xe
 2034 00c3 3A       		.uleb128 0x3a
 2035 00c4 0B       		.uleb128 0xb
 2036 00c5 3B       		.uleb128 0x3b
 2037 00c6 05       		.uleb128 0x5
 2038 00c7 27       		.uleb128 0x27
 2039 00c8 19       		.uleb128 0x19
 2040 00c9 11       		.uleb128 0x11
 2041 00ca 01       		.uleb128 0x1
 2042 00cb 12       		.uleb128 0x12
 2043 00cc 06       		.uleb128 0x6
 2044 00cd 40       		.uleb128 0x40
 2045 00ce 18       		.uleb128 0x18
 2046 00cf 9742     		.uleb128 0x2117
 2047 00d1 19       		.uleb128 0x19
 2048 00d2 00       		.byte	0
 2049 00d3 00       		.byte	0
 2050 00d4 0F       		.uleb128 0xf
 2051 00d5 2E       		.uleb128 0x2e
 2052 00d6 01       		.byte	0x1
 2053 00d7 3F       		.uleb128 0x3f
 2054 00d8 19       		.uleb128 0x19
 2055 00d9 03       		.uleb128 0x3
 2056 00da 0E       		.uleb128 0xe
 2057 00db 3A       		.uleb128 0x3a
 2058 00dc 0B       		.uleb128 0xb
 2059 00dd 3B       		.uleb128 0x3b
 2060 00de 05       		.uleb128 0x5
 2061 00df 27       		.uleb128 0x27
 2062 00e0 19       		.uleb128 0x19
 2063 00e1 49       		.uleb128 0x49
 2064 00e2 13       		.uleb128 0x13
 2065 00e3 11       		.uleb128 0x11
 2066 00e4 01       		.uleb128 0x1
 2067 00e5 12       		.uleb128 0x12
 2068 00e6 06       		.uleb128 0x6
 2069 00e7 40       		.uleb128 0x40
 2070 00e8 18       		.uleb128 0x18
 2071 00e9 9742     		.uleb128 0x2117
 2072 00eb 19       		.uleb128 0x19
 2073 00ec 01       		.uleb128 0x1
 2074 00ed 13       		.uleb128 0x13
 2075 00ee 00       		.byte	0
 2076 00ef 00       		.byte	0
 2077 00f0 10       		.uleb128 0x10
 2078 00f1 05       		.uleb128 0x5
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 53


 2079 00f2 00       		.byte	0
 2080 00f3 03       		.uleb128 0x3
 2081 00f4 0E       		.uleb128 0xe
 2082 00f5 3A       		.uleb128 0x3a
 2083 00f6 0B       		.uleb128 0xb
 2084 00f7 3B       		.uleb128 0x3b
 2085 00f8 05       		.uleb128 0x5
 2086 00f9 49       		.uleb128 0x49
 2087 00fa 13       		.uleb128 0x13
 2088 00fb 02       		.uleb128 0x2
 2089 00fc 18       		.uleb128 0x18
 2090 00fd 00       		.byte	0
 2091 00fe 00       		.byte	0
 2092 00ff 11       		.uleb128 0x11
 2093 0100 34       		.uleb128 0x34
 2094 0101 00       		.byte	0
 2095 0102 03       		.uleb128 0x3
 2096 0103 0E       		.uleb128 0xe
 2097 0104 3A       		.uleb128 0x3a
 2098 0105 0B       		.uleb128 0xb
 2099 0106 3B       		.uleb128 0x3b
 2100 0107 05       		.uleb128 0x5
 2101 0108 49       		.uleb128 0x49
 2102 0109 13       		.uleb128 0x13
 2103 010a 02       		.uleb128 0x2
 2104 010b 18       		.uleb128 0x18
 2105 010c 00       		.byte	0
 2106 010d 00       		.byte	0
 2107 010e 12       		.uleb128 0x12
 2108 010f 2E       		.uleb128 0x2e
 2109 0110 01       		.byte	0x1
 2110 0111 3F       		.uleb128 0x3f
 2111 0112 19       		.uleb128 0x19
 2112 0113 03       		.uleb128 0x3
 2113 0114 0E       		.uleb128 0xe
 2114 0115 3A       		.uleb128 0x3a
 2115 0116 0B       		.uleb128 0xb
 2116 0117 3B       		.uleb128 0x3b
 2117 0118 05       		.uleb128 0x5
 2118 0119 27       		.uleb128 0x27
 2119 011a 19       		.uleb128 0x19
 2120 011b 49       		.uleb128 0x49
 2121 011c 13       		.uleb128 0x13
 2122 011d 11       		.uleb128 0x11
 2123 011e 01       		.uleb128 0x1
 2124 011f 12       		.uleb128 0x12
 2125 0120 06       		.uleb128 0x6
 2126 0121 40       		.uleb128 0x40
 2127 0122 18       		.uleb128 0x18
 2128 0123 9642     		.uleb128 0x2116
 2129 0125 19       		.uleb128 0x19
 2130 0126 01       		.uleb128 0x1
 2131 0127 13       		.uleb128 0x13
 2132 0128 00       		.byte	0
 2133 0129 00       		.byte	0
 2134 012a 13       		.uleb128 0x13
 2135 012b 2E       		.uleb128 0x2e
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 54


 2136 012c 01       		.byte	0x1
 2137 012d 3F       		.uleb128 0x3f
 2138 012e 19       		.uleb128 0x19
 2139 012f 03       		.uleb128 0x3
 2140 0130 0E       		.uleb128 0xe
 2141 0131 3A       		.uleb128 0x3a
 2142 0132 0B       		.uleb128 0xb
 2143 0133 3B       		.uleb128 0x3b
 2144 0134 05       		.uleb128 0x5
 2145 0135 27       		.uleb128 0x27
 2146 0136 19       		.uleb128 0x19
 2147 0137 11       		.uleb128 0x11
 2148 0138 01       		.uleb128 0x1
 2149 0139 12       		.uleb128 0x12
 2150 013a 06       		.uleb128 0x6
 2151 013b 40       		.uleb128 0x40
 2152 013c 18       		.uleb128 0x18
 2153 013d 9742     		.uleb128 0x2117
 2154 013f 19       		.uleb128 0x19
 2155 0140 01       		.uleb128 0x1
 2156 0141 13       		.uleb128 0x13
 2157 0142 00       		.byte	0
 2158 0143 00       		.byte	0
 2159 0144 14       		.uleb128 0x14
 2160 0145 2E       		.uleb128 0x2e
 2161 0146 01       		.byte	0x1
 2162 0147 3F       		.uleb128 0x3f
 2163 0148 19       		.uleb128 0x19
 2164 0149 03       		.uleb128 0x3
 2165 014a 0E       		.uleb128 0xe
 2166 014b 3A       		.uleb128 0x3a
 2167 014c 0B       		.uleb128 0xb
 2168 014d 3B       		.uleb128 0x3b
 2169 014e 05       		.uleb128 0x5
 2170 014f 27       		.uleb128 0x27
 2171 0150 19       		.uleb128 0x19
 2172 0151 11       		.uleb128 0x11
 2173 0152 01       		.uleb128 0x1
 2174 0153 12       		.uleb128 0x12
 2175 0154 06       		.uleb128 0x6
 2176 0155 40       		.uleb128 0x40
 2177 0156 18       		.uleb128 0x18
 2178 0157 9642     		.uleb128 0x2116
 2179 0159 19       		.uleb128 0x19
 2180 015a 01       		.uleb128 0x1
 2181 015b 13       		.uleb128 0x13
 2182 015c 00       		.byte	0
 2183 015d 00       		.byte	0
 2184 015e 15       		.uleb128 0x15
 2185 015f 34       		.uleb128 0x34
 2186 0160 00       		.byte	0
 2187 0161 03       		.uleb128 0x3
 2188 0162 0E       		.uleb128 0xe
 2189 0163 3A       		.uleb128 0x3a
 2190 0164 0B       		.uleb128 0xb
 2191 0165 3B       		.uleb128 0x3b
 2192 0166 0B       		.uleb128 0xb
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 55


 2193 0167 49       		.uleb128 0x49
 2194 0168 13       		.uleb128 0x13
 2195 0169 3F       		.uleb128 0x3f
 2196 016a 19       		.uleb128 0x19
 2197 016b 02       		.uleb128 0x2
 2198 016c 18       		.uleb128 0x18
 2199 016d 00       		.byte	0
 2200 016e 00       		.byte	0
 2201 016f 00       		.byte	0
 2202              		.section	.debug_aranges,"",%progbits
 2203 0000 A4000000 		.4byte	0xa4
 2204 0004 0200     		.2byte	0x2
 2205 0006 00000000 		.4byte	.Ldebug_info0
 2206 000a 04       		.byte	0x4
 2207 000b 00       		.byte	0
 2208 000c 0000     		.2byte	0
 2209 000e 0000     		.2byte	0
 2210 0010 00000000 		.4byte	.LFB0
 2211 0014 24000000 		.4byte	.LFE0-.LFB0
 2212 0018 00000000 		.4byte	.LFB1
 2213 001c 0C020000 		.4byte	.LFE1-.LFB1
 2214 0020 00000000 		.4byte	.LFB2
 2215 0024 28000000 		.4byte	.LFE2-.LFB2
 2216 0028 00000000 		.4byte	.LFB3
 2217 002c 18000000 		.4byte	.LFE3-.LFB3
 2218 0030 00000000 		.4byte	.LFB4
 2219 0034 1C000000 		.4byte	.LFE4-.LFB4
 2220 0038 00000000 		.4byte	.LFB5
 2221 003c 1C000000 		.4byte	.LFE5-.LFB5
 2222 0040 00000000 		.4byte	.LFB6
 2223 0044 48000000 		.4byte	.LFE6-.LFB6
 2224 0048 00000000 		.4byte	.LFB7
 2225 004c 44000000 		.4byte	.LFE7-.LFB7
 2226 0050 00000000 		.4byte	.LFB8
 2227 0054 1C000000 		.4byte	.LFE8-.LFB8
 2228 0058 00000000 		.4byte	.LFB9
 2229 005c 30000000 		.4byte	.LFE9-.LFB9
 2230 0060 00000000 		.4byte	.LFB10
 2231 0064 2C000000 		.4byte	.LFE10-.LFB10
 2232 0068 00000000 		.4byte	.LFB11
 2233 006c 1C000000 		.4byte	.LFE11-.LFB11
 2234 0070 00000000 		.4byte	.LFB12
 2235 0074 1C000000 		.4byte	.LFE12-.LFB12
 2236 0078 00000000 		.4byte	.LFB13
 2237 007c 30000000 		.4byte	.LFE13-.LFB13
 2238 0080 00000000 		.4byte	.LFB14
 2239 0084 2C000000 		.4byte	.LFE14-.LFB14
 2240 0088 00000000 		.4byte	.LFB15
 2241 008c A4000000 		.4byte	.LFE15-.LFB15
 2242 0090 00000000 		.4byte	.LFB16
 2243 0094 98000000 		.4byte	.LFE16-.LFB16
 2244 0098 00000000 		.4byte	.LFB17
 2245 009c 80000000 		.4byte	.LFE17-.LFB17
 2246 00a0 00000000 		.4byte	0
 2247 00a4 00000000 		.4byte	0
 2248              		.section	.debug_ranges,"",%progbits
 2249              	.Ldebug_ranges0:
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 56


 2250 0000 00000000 		.4byte	.LFB0
 2251 0004 24000000 		.4byte	.LFE0
 2252 0008 00000000 		.4byte	.LFB1
 2253 000c 0C020000 		.4byte	.LFE1
 2254 0010 00000000 		.4byte	.LFB2
 2255 0014 28000000 		.4byte	.LFE2
 2256 0018 00000000 		.4byte	.LFB3
 2257 001c 18000000 		.4byte	.LFE3
 2258 0020 00000000 		.4byte	.LFB4
 2259 0024 1C000000 		.4byte	.LFE4
 2260 0028 00000000 		.4byte	.LFB5
 2261 002c 1C000000 		.4byte	.LFE5
 2262 0030 00000000 		.4byte	.LFB6
 2263 0034 48000000 		.4byte	.LFE6
 2264 0038 00000000 		.4byte	.LFB7
 2265 003c 44000000 		.4byte	.LFE7
 2266 0040 00000000 		.4byte	.LFB8
 2267 0044 1C000000 		.4byte	.LFE8
 2268 0048 00000000 		.4byte	.LFB9
 2269 004c 30000000 		.4byte	.LFE9
 2270 0050 00000000 		.4byte	.LFB10
 2271 0054 2C000000 		.4byte	.LFE10
 2272 0058 00000000 		.4byte	.LFB11
 2273 005c 1C000000 		.4byte	.LFE11
 2274 0060 00000000 		.4byte	.LFB12
 2275 0064 1C000000 		.4byte	.LFE12
 2276 0068 00000000 		.4byte	.LFB13
 2277 006c 30000000 		.4byte	.LFE13
 2278 0070 00000000 		.4byte	.LFB14
 2279 0074 2C000000 		.4byte	.LFE14
 2280 0078 00000000 		.4byte	.LFB15
 2281 007c A4000000 		.4byte	.LFE15
 2282 0080 00000000 		.4byte	.LFB16
 2283 0084 98000000 		.4byte	.LFE16
 2284 0088 00000000 		.4byte	.LFB17
 2285 008c 80000000 		.4byte	.LFE17
 2286 0090 00000000 		.4byte	0
 2287 0094 00000000 		.4byte	0
 2288              		.section	.debug_line,"",%progbits
 2289              	.Ldebug_line0:
 2290 0000 84020000 		.section	.debug_str,"MS",%progbits,1
 2290      02004200 
 2290      00000201 
 2290      FB0E0D00 
 2290      01010101 
 2291              	.LASF10:
 2292 0000 75696E74 		.ascii	"uint16\000"
 2292      313600
 2293              	.LASF48:
 2294 0007 61646347 		.ascii	"adcGain\000"
 2294      61696E00 
 2295              	.LASF23:
 2296 000f 636F756E 		.ascii	"counts\000"
 2296      747300
 2297              	.LASF54:
 2298 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2298      436F756E 
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 57


 2298      7473546F 
 2298      5F566F6C 
 2298      747300
 2299              	.LASF36:
 2300 0029 4144435F 		.ascii	"ADC_Init\000"
 2300      496E6974 
 2300      00
 2301              	.LASF7:
 2302 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2302      206C6F6E 
 2302      6720756E 
 2302      7369676E 
 2302      65642069 
 2303              	.LASF24:
 2304 0049 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2304      496E7075 
 2304      7473506C 
 2304      6163656D 
 2304      656E7400 
 2305              	.LASF28:
 2306 005d 4144435F 		.ascii	"ADC_StartConvert\000"
 2306      53746172 
 2306      74436F6E 
 2306      76657274 
 2306      00
 2307              	.LASF6:
 2308 006e 6C6F6E67 		.ascii	"long long int\000"
 2308      206C6F6E 
 2308      6720696E 
 2308      7400
 2309              	.LASF0:
 2310 007c 7369676E 		.ascii	"signed char\000"
 2310      65642063 
 2310      68617200 
 2311              	.LASF30:
 2312 0088 73746174 		.ascii	"status\000"
 2312      757300
 2313              	.LASF13:
 2314 008f 696E7433 		.ascii	"int32\000"
 2314      3200
 2315              	.LASF25:
 2316 0095 4144435F 		.ascii	"ADC_Start\000"
 2316      53746172 
 2316      7400
 2317              	.LASF4:
 2318 009f 6C6F6E67 		.ascii	"long int\000"
 2318      20696E74 
 2318      00
 2319              	.LASF52:
 2320 00a8 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2320      436F756E 
 2320      7473546F 
 2320      5F75566F 
 2320      6C747300 
 2321              	.LASF59:
 2322 00bc 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2322      636F756E 
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 58


 2322      74735065 
 2322      72313056 
 2322      6F6C7400 
 2323              	.LASF9:
 2324 00d0 75696E74 		.ascii	"uint8\000"
 2324      3800
 2325              	.LASF16:
 2326 00d6 646F7562 		.ascii	"double\000"
 2326      6C6500
 2327              	.LASF11:
 2328 00dd 75696E74 		.ascii	"uint32\000"
 2328      333200
 2329              	.LASF38:
 2330 00e4 6D61736B 		.ascii	"mask\000"
 2330      00
 2331              	.LASF57:
 2332 00e9 4144435F 		.ascii	"ADC_initVar\000"
 2332      696E6974 
 2332      56617200 
 2333              	.LASF33:
 2334 00f5 7265744D 		.ascii	"retMode\000"
 2334      6F646500 
 2335              	.LASF43:
 2336 00fd 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2336      5365744C 
 2336      696D6974 
 2336      4D61736B 
 2336      00
 2337              	.LASF8:
 2338 010e 756E7369 		.ascii	"unsigned int\000"
 2338      676E6564 
 2338      20696E74 
 2338      00
 2339              	.LASF53:
 2340 011b 75566F6C 		.ascii	"uVolts\000"
 2340      747300
 2341              	.LASF5:
 2342 0122 6C6F6E67 		.ascii	"long unsigned int\000"
 2342      20756E73 
 2342      69676E65 
 2342      6420696E 
 2342      7400
 2343              	.LASF44:
 2344 0134 4144435F 		.ascii	"ADC_SetSatMask\000"
 2344      53657453 
 2344      61744D61 
 2344      736B00
 2345              	.LASF55:
 2346 0143 766F6C74 		.ascii	"volts\000"
 2346      7300
 2347              	.LASF22:
 2348 0149 746D7052 		.ascii	"tmpRegVal\000"
 2348      65675661 
 2348      6C00
 2349              	.LASF3:
 2350 0153 73686F72 		.ascii	"short unsigned int\000"
 2350      7420756E 
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 59


 2350      7369676E 
 2350      65642069 
 2350      6E7400
 2351              	.LASF29:
 2352 0166 4144435F 		.ascii	"ADC_StopConvert\000"
 2352      53746F70 
 2352      436F6E76 
 2352      65727400 
 2353              	.LASF51:
 2354 0176 6D566F6C 		.ascii	"mVolts\000"
 2354      747300
 2355              	.LASF19:
 2356 017d 72656733 		.ascii	"reg32\000"
 2356      3200
 2357              	.LASF14:
 2358 0183 666C6F61 		.ascii	"float32\000"
 2358      74333200 
 2359              	.LASF20:
 2360 018b 73697A65 		.ascii	"sizetype\000"
 2360      74797065 
 2360      00
 2361              	.LASF40:
 2362 0194 6C6F774C 		.ascii	"lowLimit\000"
 2362      696D6974 
 2362      00
 2363              	.LASF41:
 2364 019d 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2364      53657448 
 2364      6967684C 
 2364      696D6974 
 2364      00
 2365              	.LASF31:
 2366 01ae 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2366      4973456E 
 2366      64436F6E 
 2366      76657273 
 2366      696F6E00 
 2367              	.LASF17:
 2368 01c2 696E7436 		.ascii	"int64\000"
 2368      3400
 2369              	.LASF37:
 2370 01c8 4144435F 		.ascii	"ADC_SetChanMask\000"
 2370      53657443 
 2370      68616E4D 
 2370      61736B00 
 2371              	.LASF47:
 2372 01d8 4144435F 		.ascii	"ADC_SetGain\000"
 2372      53657447 
 2372      61696E00 
 2373              	.LASF15:
 2374 01e4 666C6F61 		.ascii	"float\000"
 2374      7400
 2375              	.LASF60:
 2376 01ea 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2376      4320342E 
 2376      382E3420 
 2376      32303134 
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 60


 2376      30353236 
 2377 021d 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2377      20726576 
 2377      6973696F 
 2377      6E203231 
 2377      31333538 
 2378 0250 30202D66 		.ascii	"0 -ffunction-sections\000"
 2378      66756E63 
 2378      74696F6E 
 2378      2D736563 
 2378      74696F6E 
 2379              	.LASF42:
 2380 0266 68696768 		.ascii	"highLimit\000"
 2380      4C696D69 
 2380      7400
 2381              	.LASF49:
 2382 0270 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2382      436F756E 
 2382      7473546F 
 2382      5F6D566F 
 2382      6C747300 
 2383              	.LASF39:
 2384 0284 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2384      5365744C 
 2384      6F774C69 
 2384      6D697400 
 2385              	.LASF61:
 2386 0294 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2386      6E657261 
 2386      7465645F 
 2386      536F7572 
 2386      63655C50 
 2387              	.LASF1:
 2388 02b3 756E7369 		.ascii	"unsigned char\000"
 2388      676E6564 
 2388      20636861 
 2388      7200
 2389              	.LASF58:
 2390 02c1 4144435F 		.ascii	"ADC_offset\000"
 2390      6F666673 
 2390      657400
 2391              	.LASF2:
 2392 02cc 73686F72 		.ascii	"short int\000"
 2392      7420696E 
 2392      7400
 2393              	.LASF27:
 2394 02d6 4144435F 		.ascii	"ADC_Stop\000"
 2394      53746F70 
 2394      00
 2395              	.LASF62:
 2396 02df 433A5C55 		.ascii	"C:\\Users\\mitchell\\Documents\\fsae\\E-Throttle\\E"
 2396      73657273 
 2396      5C6D6974 
 2396      6368656C 
 2396      6C5C446F 
 2397 030c 2D546872 		.ascii	"-Throttle\\Design01.cydsn\000"
 2397      6F74746C 
ARM GAS  C:\Users\mitchell\AppData\Local\Temp\ccfZhRLh.s 			page 61


 2397      655C4465 
 2397      7369676E 
 2397      30312E63 
 2398              	.LASF21:
 2399 0325 63684E75 		.ascii	"chNum\000"
 2399      6D00
 2400              	.LASF34:
 2401 032b 6368616E 		.ascii	"chan\000"
 2401      00
 2402              	.LASF18:
 2403 0330 63686172 		.ascii	"char\000"
 2403      00
 2404              	.LASF56:
 2405 0335 4144435F 		.ascii	"ADC_channelsConfig\000"
 2405      6368616E 
 2405      6E656C73 
 2405      436F6E66 
 2405      696700
 2406              	.LASF46:
 2407 0348 6F666673 		.ascii	"offset\000"
 2407      657400
 2408              	.LASF50:
 2409 034f 61646343 		.ascii	"adcCounts\000"
 2409      6F756E74 
 2409      7300
 2410              	.LASF26:
 2411 0359 4144435F 		.ascii	"ADC_Enable\000"
 2411      456E6162 
 2411      6C6500
 2412              	.LASF12:
 2413 0364 696E7431 		.ascii	"int16\000"
 2413      3600
 2414              	.LASF45:
 2415 036a 4144435F 		.ascii	"ADC_SetOffset\000"
 2415      5365744F 
 2415      66667365 
 2415      7400
 2416              	.LASF35:
 2417 0378 72657375 		.ascii	"result\000"
 2417      6C7400
 2418              	.LASF32:
 2419 037f 4144435F 		.ascii	"ADC_GetResult16\000"
 2419      47657452 
 2419      6573756C 
 2419      74313600 
 2420              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
